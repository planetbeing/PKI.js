{"version":3,"sources":["../src/KeyTransRecipientInfo.js"],"names":["asn1js","KeyTransRecipientInfo","constructor","parameters","version","defaultValues","rid","keyEncryptionAlgorithm","encryptedKey","recipientCertificate","fromSchema","schema","memberName","AlgorithmIdentifier","OctetString","Certificate","Error","compareWithDefault","memberValue","Object","keys","length","isEqual","names","Sequence","name","blockName","value","Integer","RecipientIdentifier","asn1","compareSchema","verified","result","valueBlock","valueDec","idBlock","tagClass","IssuerAndSerialNumber","toSchema","outputArray","push","Constructed","tagNumber","toJSON"],"mappings":"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","file":"KeyTransRecipientInfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Certificate from \"./Certificate.js\";\r\nimport RecipientIdentifier from \"./RecipientIdentifier.js\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class KeyTransRecipientInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for KeyTransRecipientInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", KeyTransRecipientInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {RecipientIdentifier}\r\n\t\t * @desc rid\r\n\t\t */\r\n\t\tthis.rid = getParametersValue(parameters, \"rid\", KeyTransRecipientInfo.defaultValues(\"rid\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc keyEncryptionAlgorithm\r\n\t\t */\r\n\t\tthis.keyEncryptionAlgorithm = getParametersValue(parameters, \"keyEncryptionAlgorithm\", KeyTransRecipientInfo.defaultValues(\"keyEncryptionAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc encryptedKey\r\n\t\t */\r\n\t\tthis.encryptedKey = getParametersValue(parameters, \"encryptedKey\", KeyTransRecipientInfo.defaultValues(\"encryptedKey\"));\r\n\t\t/**\r\n\t\t * @type {Certificate}\r\n\t\t * @desc recipientCertificate For some reasons we need to store recipient's certificate here\r\n\t\t */\r\n\t\tthis.recipientCertificate = getParametersValue(parameters, \"recipientCertificate\", KeyTransRecipientInfo.defaultValues(\"recipientCertificate\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (-1);\r\n\t\t\tcase \"rid\":\r\n\t\t\t\treturn {};\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"recipientCertificate\":\r\n\t\t\t\treturn new Certificate();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KeyTransRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === KeyTransRecipientInfo.defaultValues(\"version\"));\r\n\t\t\tcase \"rid\":\r\n\t\t\t\treturn (Object.keys(memberValue).length === 0);\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn memberValue.isEqual(KeyTransRecipientInfo.defaultValues(memberName));\r\n\t\t\tcase \"recipientCertificate\":\r\n\t\t\t\treturn false; // For now we do not need to compare any values with the \"recipientCertificate\"\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KeyTransRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * KeyTransRecipientInfo ::= SEQUENCE {\r\n\t *    version CMSVersion,  -- always set to 0 or 2\r\n\t *    rid RecipientIdentifier,\r\n\t *    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\r\n\t *    encryptedKey EncryptedKey }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [rid]\r\n\t\t * @property {string} [keyEncryptionAlgorithm]\r\n\t\t * @property {string} [encryptedKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tRecipientIdentifier.schema(names.rid || {}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.encryptedKey || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"rid\",\r\n\t\t\t\"keyEncryptionAlgorithm\",\r\n\t\t\t\"encryptedKey\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tKeyTransRecipientInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\trid: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"rid\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tkeyEncryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"keyEncryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedKey: \"encryptedKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for KeyTransRecipientInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\r\n\t\tif(asn1.result.rid.idBlock.tagClass === 3)\r\n\t\t\tthis.rid = asn1.result.rid.valueBlock.value[0]; // SubjectKeyIdentifier\r\n\t\telse\r\n\t\t\tthis.rid = new IssuerAndSerialNumber({ schema: asn1.result.rid });\r\n\r\n\t\tthis.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\r\n\t\tthis.encryptedKey = asn1.result.encryptedKey;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence \r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(this.rid instanceof IssuerAndSerialNumber)\r\n\t\t{\r\n\t\t\tthis.version = 0;\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\toutputArray.push(this.rid.toSchema());\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.version = 2;\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.rid]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\toutputArray.push(this.keyEncryptionAlgorithm.toSchema());\r\n\t\toutputArray.push(this.encryptedKey);\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object \r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tversion: this.version,\r\n\t\t\trid: this.rid.toJSON(),\r\n\t\t\tkeyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\r\n\t\t\tencryptedKey: this.encryptedKey.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}