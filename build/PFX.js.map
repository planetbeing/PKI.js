{"version":3,"sources":["../src/PFX.js"],"names":["asn1js","PFX","constructor","parameters","version","defaultValues","authSafe","macData","parsedValue","fromSchema","schema","memberName","ContentInfo","MacData","Error","compareWithDefault","memberValue","contentType","content","mac","macSalt","iterations","Object","keys","length","names","Sequence","name","blockName","value","Integer","optional","asn1","compareSchema","verified","result","valueBlock","valueDec","toSchema","outputArray","push","toJSON","output","makeInternalValues","Promise","reject","sequence","resolve","crypto","integrityMode","saltBuffer","ArrayBuffer","saltView","Uint8Array","data","authenticatedSafe","toBER","OctetString","valueHex","engine","subtle","then","stampDataWithPassword","password","hashAlgorithm","hmacHashAlgorithm","salt","iterationCount","contentToStamp","DigestInfo","digestAlgorithm","AlgorithmIdentifier","algorithmId","digest","error","toBeSigned","cmsSigned","SignedData","encapContentInfo","EncapsulatedContentInfo","eContentType","eContent","certificates","signingCertificate","signedAttr","Attribute","type","values","ObjectIdentifier","UTCTime","valueDate","Date","signerInfos","SignerInfo","sid","IssuerAndSerialNumber","issuer","serialNumber","signedAttrs","SignedAndUnsignedAttributes","attributes","sign","privateKey","parseInternalValues","checkIntegrity","authSafeContent","isConstructed","contentValue","fromBER","offset","AuthenticatedSafe","verifyDataStampedWithPassword","contentToVerify","signatureToVerify","idBlock","i","verify","signer","checkChain"],"mappings":"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","file":"PFX.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf, clearProps } from \"pvutils\";\r\nimport { getCrypto, getEngine, getRandomValues, getOIDByAlgorithm, getAlgorithmByOID } from \"./common.js\";\r\nimport ContentInfo from \"./ContentInfo.js\";\r\nimport MacData from \"./MacData.js\";\r\nimport DigestInfo from \"./DigestInfo.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport SignedData from \"./SignedData.js\";\r\nimport EncapsulatedContentInfo from \"./EncapsulatedContentInfo.js\";\r\nimport Attribute from \"./Attribute.js\";\r\nimport SignerInfo from \"./SignerInfo.js\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\r\nimport SignedAndUnsignedAttributes from \"./SignedAndUnsignedAttributes.js\";\r\nimport AuthenticatedSafe from \"./AuthenticatedSafe.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class PFX \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PFX class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", PFX.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {ContentInfo}\r\n\t\t * @desc authSafe\r\n\t\t */\r\n\t\tthis.authSafe = getParametersValue(parameters, \"authSafe\", PFX.defaultValues(\"authSafe\"));\r\n\t\t\r\n\t\tif(\"macData\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {MacData}\r\n\t\t\t * @desc macData\r\n\t\t\t */\r\n\t\t\tthis.macData = getParametersValue(parameters, \"macData\", PFX.defaultValues(\"macData\"));\r\n\t\t\r\n\t\tif(\"parsedValue\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @desc parsedValue\r\n\t\t\t */\r\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", PFX.defaultValues(\"parsedValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 3;\r\n\t\t\tcase \"authSafe\":\r\n\t\t\t\treturn (new ContentInfo());\r\n\t\t\tcase \"macData\":\r\n\t\t\t\treturn (new MacData());\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PFX class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === PFX.defaultValues(memberName));\r\n\t\t\tcase \"authSafe\":\r\n\t\t\t\treturn ((ContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\r\n\t\t\t\t(ContentInfo.compareWithDefault(\"content\", memberValue.content)));\r\n\t\t\tcase \"macData\":\r\n\t\t\t\treturn ((MacData.compareWithDefault(\"mac\", memberValue.mac)) &&\r\n\t\t\t\t(MacData.compareWithDefault(\"macSalt\", memberValue.macSalt)) &&\r\n\t\t\t\t(MacData.compareWithDefault(\"iterations\", memberValue.iterations)));\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PFX class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PFX ::= SEQUENCE {\r\n\t *    version\t\tINTEGER {v3(3)}(v3,...),\r\n\t *    authSafe\tContentInfo,\r\n\t *    macData    \tMacData OPTIONAL\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [authSafe]\r\n\t\t * @property {string} [macData]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"version\") }),\r\n\t\t\t\tContentInfo.schema(names.authSafe || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"authSafe\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tMacData.schema(names.macData || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"macData\",\r\n\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"authSafe\",\r\n\t\t\t\"macData\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPFX.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tauthSafe: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"authSafe\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmacData: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"macData\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PFX\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.authSafe = new ContentInfo({ schema: asn1.result.authSafe });\r\n\t\t\r\n\t\tif(\"macData\" in asn1.result)\r\n\t\t\tthis.macData = new MacData({ schema: asn1.result.macData });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tconst outputArray = [\r\n\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\tthis.authSafe.toSchema()\r\n\t\t];\r\n\t\t\r\n\t\tif(\"macData\" in this)\r\n\t\t\toutputArray.push(this.macData.toSchema());\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst output = {\r\n\t\t\tversion: this.version,\r\n\t\t\tauthSafe: this.authSafe.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"macData\" in this)\r\n\t\t\toutput.macData = this.macData.toJSON();\r\n\t\t\r\n\t\treturn output;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Making ContentInfo from \"parsedValue\" object\r\n\t * @param {Object} parameters Parameters, specific to each \"integrity mode\"\r\n\t */\r\n\tmakeInternalValues(parameters = {})\r\n\t{\r\n\t\t//region Check mandatory parameter\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters\\\" must has \\\"Object\\\" type\");\r\n\t\t\r\n\t\tif((\"parsedValue\" in this) === false)\r\n\t\t\treturn Promise.reject(\"Please call \\\"parseValues\\\" function first in order to make \\\"parsedValue\\\" data\");\r\n\t\t\r\n\t\tif((\"integrityMode\" in this.parsedValue) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"integrityMode\\\" inside \\\"parsedValue\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Makes values for each particular integrity mode\r\n\t\t//region Check that we do have neccessary fields in \"parsedValue\" object\r\n\t\tif((\"authenticatedSafe\" in this.parsedValue) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"authenticatedSafe\\\" in \\\"parsedValue\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\tswitch(this.parsedValue.integrityMode)\r\n\t\t{\r\n\t\t\t//region HMAC-based integrity\r\n\t\t\tcase 0:\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Check additional mandatory parameters\r\n\t\t\t\t\tif((\"iterations\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"iterations\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((\"pbkdf2HashAlgorithm\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"pbkdf2HashAlgorithm\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((\"hmacHashAlgorithm\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hmacHashAlgorithm\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((\"password\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\tconst saltBuffer = new ArrayBuffer(64);\r\n\t\t\t\t\tconst saltView = new Uint8Array(saltBuffer);\r\n\t\t\t\t\r\n\t\t\t\t\tgetRandomValues(saltView);\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst data = this.parsedValue.authenticatedSafe.toSchema().toBER(false);\r\n\r\n\t\t\t\t\tthis.authSafe = new ContentInfo({\r\n\t\t\t\t\t\tcontentType: \"1.2.840.113549.1.7.1\",\r\n\t\t\t\t\t\tcontent: new asn1js.OctetString({ valueHex: data })\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Call current crypto engine for making HMAC-based data stamp\r\n\t\t\t\t\tconst engine = getEngine();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((\"stampDataWithPassword\" in engine.subtle) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`No support for \"stampDataWithPassword\" in current engine \"${engine.name}\"`);\r\n\t\t\t\t\t\r\n\t\t\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\t\t\tengine.subtle.stampDataWithPassword({\r\n\t\t\t\t\t\t\tpassword: parameters.password,\r\n\t\t\t\t\t\t\thashAlgorithm: parameters.hmacHashAlgorithm,\r\n\t\t\t\t\t\t\tsalt: saltBuffer,\r\n\t\t\t\t\t\t\titerationCount: parameters.iterations,\r\n\t\t\t\t\t\t\tcontentToStamp: data\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Make \"MacData\" values\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\tresult =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.macData = new MacData({\r\n\t\t\t\t\t\t\t\tmac: new DigestInfo({\r\n\t\t\t\t\t\t\t\t\tdigestAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\t\t\t\talgorithmId: getOIDByAlgorithm({ name: parameters.hmacHashAlgorithm })\r\n\t\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\t\tdigest: new asn1js.OctetString({ valueHex: result })\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\tmacSalt: new asn1js.OctetString({ valueHex: saltBuffer }),\r\n\t\t\t\t\t\t\t\titerations: parameters.iterations\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion\r\n\t\t\t//region publicKey-based integrity\r\n\t\t\tcase 1:\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Check additional mandatory parameters\r\n\t\t\t\t\tif((\"signingCertificate\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"signingCertificate\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((\"privateKey\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"privateKey\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((\"hashAlgorithm\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hashAlgorithm\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Making data to be signed\r\n\t\t\t\t\t// NOTE: all internal data for \"authenticatedSafe\" must be already prepared.\r\n\t\t\t\t\t// Thus user must call \"makeValues\" for all internal \"SafeContent\" value with appropriate parameters.\r\n\t\t\t\t\t// Or user can choose to use values from initial parsing of existing PKCS#12 data.\r\n\t\t\t\t\r\n\t\t\t\t\tconst toBeSigned = this.parsedValue.authenticatedSafe.toSchema().toBER(false);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\tconst cmsSigned = new SignedData({\r\n\t\t\t\t\t\tversion: 1,\r\n\t\t\t\t\t\tencapContentInfo: new EncapsulatedContentInfo({\r\n\t\t\t\t\t\t\teContentType: \"1.2.840.113549.1.7.1\", // \"data\" content type\r\n\t\t\t\t\t\t\teContent: new asn1js.OctetString({ valueHex: toBeSigned })\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tcertificates: [parameters.signingCertificate]\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Making additional attributes for CMS Signed Data\r\n\t\t\t\t\t//region Create a message digest\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t() => crypto.digest({ name: parameters.hashAlgorithm }, new Uint8Array(toBeSigned))\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Combine all signed extensions\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\tresult =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\t\tconst signedAttr = [];\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t//region contentType\r\n\t\t\t\t\t\t\tsignedAttr.push(new Attribute({\r\n\t\t\t\t\t\t\t\ttype: \"1.2.840.113549.1.9.3\",\r\n\t\t\t\t\t\t\t\tvalues: [\r\n\t\t\t\t\t\t\t\t\tnew asn1js.ObjectIdentifier({ value: \"1.2.840.113549.1.7.1\" })\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region signingTime\r\n\t\t\t\t\t\t\tsignedAttr.push(new Attribute({\r\n\t\t\t\t\t\t\t\ttype: \"1.2.840.113549.1.9.5\",\r\n\t\t\t\t\t\t\t\tvalues: [\r\n\t\t\t\t\t\t\t\t\tnew asn1js.UTCTime({ valueDate: new Date() })\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region messageDigest\r\n\t\t\t\t\t\t\tsignedAttr.push(new Attribute({\r\n\t\t\t\t\t\t\t\ttype: \"1.2.840.113549.1.9.4\",\r\n\t\t\t\t\t\t\t\tvalues: [\r\n\t\t\t\t\t\t\t\t\tnew asn1js.OctetString({ valueHex: result })\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t//region Making final value for \"SignerInfo\" type\r\n\t\t\t\t\t\t\tcmsSigned.signerInfos.push(new SignerInfo({\r\n\t\t\t\t\t\t\t\tversion: 1,\r\n\t\t\t\t\t\t\t\tsid: new IssuerAndSerialNumber({\r\n\t\t\t\t\t\t\t\t\tissuer: parameters.signingCertificate.issuer,\r\n\t\t\t\t\t\t\t\t\tserialNumber: parameters.signingCertificate.serialNumber\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\tsignedAttrs: new SignedAndUnsignedAttributes({\r\n\t\t\t\t\t\t\t\t\ttype: 0,\r\n\t\t\t\t\t\t\t\t\tattributes: signedAttr\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror => Promise.reject(`Error during making digest for message: ${error}`)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Signing CMS Signed Data\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t() => cmsSigned.sign(parameters.privateKey, 0, parameters.hashAlgorithm)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Making final CMS_CONTENT_INFO type\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.authSafe = new ContentInfo({\r\n\t\t\t\t\t\t\t\tcontentType: \"1.2.840.113549.1.7.2\",\r\n\t\t\t\t\t\t\t\tcontent: cmsSigned.toSchema(true)\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror => Promise.reject(`Error during making signature: ${error}`)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion\r\n\t\t\t//region default\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Parameter \"integrityMode\" has unknown value: ${parameters.integrityMode}`);\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tparseInternalValues(parameters)\r\n\t{\r\n\t\t//region Check input data from \"parameters\" \r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters\\\" must has \\\"Object\\\" type\");\r\n\t\t\r\n\t\tif((\"checkIntegrity\" in parameters) === false)\r\n\t\t\tparameters.checkIntegrity = true;\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Get a \"crypto\" extension \r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Create value for \"this.parsedValue.authenticatedSafe\" and check integrity \r\n\t\tthis.parsedValue = {};\r\n\t\t\r\n\t\tswitch(this.authSafe.contentType)\r\n\t\t{\r\n\t\t\t//region data \r\n\t\t\tcase \"1.2.840.113549.1.7.1\":\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Check additional mandatory parameters\r\n\t\t\t\t\tif((\"password\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Integrity based on HMAC\r\n\t\t\t\t\tthis.parsedValue.integrityMode = 0;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Check that we do have OCTETSTRING as \"content\"\r\n\t\t\t\t\tif((this.authSafe.content instanceof asn1js.OctetString) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Wrong type of \\\"this.authSafe.content\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check we have \"constructive encoding\" for AuthSafe content\r\n\t\t\t\t\tlet authSafeContent = new ArrayBuffer(0);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(this.authSafe.content.valueBlock.isConstructed)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(const contentValue of this.authSafe.content.valueBlock.value)\r\n\t\t\t\t\t\t\tauthSafeContent = utilConcatBuf(authSafeContent, contentValue.valueBlock.valueHex);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tauthSafeContent = this.authSafe.content.valueBlock.valueHex;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Parse internal ASN.1 data\r\n\t\t\t\t\tconst asn1 = asn1js.fromBER(authSafeContent);\r\n\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\treturn Promise.reject(\"Error during parsing of ASN.1 data inside \\\"this.authSafe.content\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Set \"authenticatedSafe\" value\r\n\t\t\t\t\tthis.parsedValue.authenticatedSafe = new AuthenticatedSafe({ schema: asn1.result });\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Check integrity\r\n\t\t\t\t\tif(parameters.checkIntegrity)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Check that \"MacData\" exists\r\n\t\t\t\t\t\tif((\"macData\" in this) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Absent \\\"macData\\\" value, can not check PKCS#12 data integrity\");\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tconst hashAlgorithm = getAlgorithmByOID(this.macData.mac.digestAlgorithm.algorithmId);\r\n\t\t\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(`Unsupported digest algorithm: ${this.macData.mac.digestAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Call current crypto engine for verifying HMAC-based data stamp\r\n\t\t\t\t\t\tconst engine = getEngine();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\t\t\t\tengine.subtle.verifyDataStampedWithPassword({\r\n\t\t\t\t\t\t\t\tpassword: parameters.password,\r\n\t\t\t\t\t\t\t\thashAlgorithm: hashAlgorithm.name,\r\n\t\t\t\t\t\t\t\tsalt: this.macData.macSalt.valueBlock.valueHex,\r\n\t\t\t\t\t\t\t\titerationCount: this.macData.iterations,\r\n\t\t\t\t\t\t\t\tcontentToVerify: authSafeContent,\r\n\t\t\t\t\t\t\t\tsignatureToVerify: this.macData.mac.digest.valueBlock.valueHex\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t//region Verify HMAC signature\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\tresult =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(result === false)\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(\"Integrity for the PKCS#12 data is broken!\");\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion \r\n\t\t\t//region signedData \r\n\t\t\tcase \"1.2.840.113549.1.7.2\":\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Integrity based on signature using public key\r\n\t\t\t\t\tthis.parsedValue.integrityMode = 1;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Parse CMS Signed Data\r\n\t\t\t\t\tconst cmsSigned = new SignedData({ schema: this.authSafe.content });\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Check that we do have OCTETSTRING as \"content\"\r\n\t\t\t\t\tif((\"eContent\" in cmsSigned.encapContentInfo) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent of attached data in \\\"cmsSigned.encapContentInfo\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((cmsSigned.encapContentInfo.eContent instanceof asn1js.OctetString) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Wrong type of \\\"cmsSigned.encapContentInfo.eContent\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Create correct data block for verification\r\n\t\t\t\t\tlet data = new ArrayBuffer(0);\r\n\t\t\t\t\r\n\t\t\t\t\tif(cmsSigned.encapContentInfo.eContent.idBlock.isConstructed === false)\r\n\t\t\t\t\t\tdata = cmsSigned.encapContentInfo.eContent.valueBlock.valueHex;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(let i = 0; i < cmsSigned.encapContentInfo.eContent.valueBlock.value.length; i++)\r\n\t\t\t\t\t\t\tdata = utilConcatBuf(data, cmsSigned.encapContentInfo.eContent.valueBlock.value[i].valueBlock.valueHex);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Parse internal ASN.1 data\r\n\t\t\t\t\tconst asn1 = asn1js.fromBER(data);\r\n\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\treturn Promise.reject(\"Error during parsing of ASN.1 data inside \\\"this.authSafe.content\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Set \"authenticatedSafe\" value\r\n\t\t\t\t\tthis.parsedValue.authenticatedSafe = new AuthenticatedSafe({ schema: asn1.result });\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Check integrity\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t() => cmsSigned.verify({ signer: 0, checkChain: false })\r\n\t\t\t\t\t).then(\r\n\t\t\t\t\t\tresult =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(result === false)\r\n\t\t\t\t\t\t\t\treturn Promise.reject(\"Integrity for the PKCS#12 data is broken!\");\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror => Promise.reject(`Error during integrity verification: ${error}`)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion   \r\n\t\t\t//region default \r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect value for \"this.authSafe.contentType\": ${this.authSafe.contentType}`);\r\n\t\t\t//endregion \r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Return result of the function \r\n\t\treturn sequence.then(\r\n\t\t\t() => this,\r\n\t\t\terror => Promise.reject(`Error during parsing: ${error}`)\r\n\t\t);\r\n\t\t//endregion   \r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}