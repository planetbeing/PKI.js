{"version":3,"sources":["../src/SignedData.js"],"names":["asn1js","SignedData","constructor","parameters","version","defaultValues","digestAlgorithms","encapContentInfo","certificates","crls","ocsps","signerInfos","fromSchema","schema","memberName","EncapsulatedContentInfo","Error","compareWithDefault","memberValue","length","names","optional","Sequence","name","blockName","value","Integer","Set","Repeated","AlgorithmIdentifier","Constructed","idBlock","tagClass","tagNumber","CertificateSet","valueBlock","RevocationInfoChoices","SignerInfo","asn1","compareSchema","verified","result","valueDec","Array","from","algorithm","certificateSet","slice","crl","CertificateRevocationList","OtherRevocationInfoFormat","signerInfoSchema","toSchema","encodeFlag","outputArray","push","certificateSetSchema","crlSchema","signerInfo","toJSON","_object","certificate","verify","signer","data","ArrayBuffer","trustedCerts","checkDate","Date","checkChain","extendedMode","findOrigin","findIssuer","sequence","Promise","resolve","messageDigestValue","shaAlgorithm","signerCertificate","timestampSerial","certificatePath","engine","crypto","reject","date","code","message","signatureVerified","signerCertificateVerified","sid","IssuerAndSerialNumber","then","Certificate","issuer","isEqual","serialNumber","all","filter","digest","Uint8Array","subjectPublicKeyInfo","subjectPublicKey","valueHex","results","entries","index","eContentType","fromBER","eContent","tstInfo","TSTInfo","ex","genTime","byteLength","checkCA","cert","isCA","extensions","extension","extnID","parsedValue","cA","promiseResults","certificateChainValidationEngineParameters","certs","_result","certificateChainEngine","CertificateChainValidationEngine","otherRevInfoFormat","BasicOCSPResponse","otherRevInfo","verificationResult","resultMessage","error","Object","signerInfoHashAlgorithm","digestAlgorithm","algorithmId","isConstructed","contentValue","valueBeforeDecode","foundContentType","foundMessageDigest","signedAttrs","attributes","attribute","type","values","encodedValue","subtle","verifyWithPublicKey","signature","signatureAlgorithm","sign","privateKey","signerIndex","hashAlgorithm","hashAlgorithmOID","algorithmParams","Null","getSignatureParameters","toBER","view","content","signWithPrivateKey","OctetString"],"mappings":"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","file":"SignedData.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport { getCrypto, getEngine, getOIDByAlgorithm, getAlgorithmByOID } from \"./common.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport EncapsulatedContentInfo from \"./EncapsulatedContentInfo.js\";\r\nimport Certificate from \"./Certificate.js\";\r\nimport CertificateRevocationList from \"./CertificateRevocationList.js\";\r\nimport OtherRevocationInfoFormat from \"./OtherRevocationInfoFormat.js\";\r\nimport SignerInfo from \"./SignerInfo.js\";\r\nimport CertificateSet from \"./CertificateSet.js\";\r\nimport RevocationInfoChoices from \"./RevocationInfoChoices.js\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\r\nimport TSTInfo from \"./TSTInfo.js\";\r\nimport CertificateChainValidationEngine from \"./CertificateChainValidationEngine.js\";\r\nimport BasicOCSPResponse from \"./BasicOCSPResponse.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class SignedData \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SignedData class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", SignedData.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {Array.<AlgorithmIdentifier>}\r\n\t\t * @desc digestAlgorithms\r\n\t\t */\r\n\t\tthis.digestAlgorithms = getParametersValue(parameters, \"digestAlgorithms\", SignedData.defaultValues(\"digestAlgorithms\"));\r\n\t\t/**\r\n\t\t * @type {EncapsulatedContentInfo}\r\n\t\t * @desc encapContentInfo\r\n\t\t */\r\n\t\tthis.encapContentInfo = getParametersValue(parameters, \"encapContentInfo\", SignedData.defaultValues(\"encapContentInfo\"));\r\n\t\t\r\n\t\tif(\"certificates\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Certificate|OtherCertificateFormat>}\r\n\t\t\t * @desc certificates\r\n\t\t\t */\r\n\t\t\tthis.certificates = getParametersValue(parameters, \"certificates\", SignedData.defaultValues(\"certificates\"));\r\n\t\t\r\n\t\tif(\"crls\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<CertificateRevocationList|OtherRevocationInfoFormat>}\r\n\t\t\t * @desc crls\r\n\t\t\t */\r\n\t\t\tthis.crls = getParametersValue(parameters, \"crls\", SignedData.defaultValues(\"crls\"));\r\n\t\t\r\n\t\tif(\"ocsps\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<BasicOCSPResponse>}\r\n\t\t\t * @desc crls\r\n\t\t\t */\r\n\t\t\tthis.ocsps = getParametersValue(parameters, \"ocsps\", SignedData.defaultValues(\"ocsps\"));\r\n\r\n\t\t/**\r\n\t\t * @type {Array.<SignerInfo>}\r\n\t\t * @desc signerInfos\r\n\t\t */\r\n\t\tthis.signerInfos = getParametersValue(parameters, \"signerInfos\", SignedData.defaultValues(\"signerInfos\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"digestAlgorithms\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"encapContentInfo\":\r\n\t\t\t\treturn new EncapsulatedContentInfo();\r\n\t\t\tcase \"certificates\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"crls\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"ocsps\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"signerInfos\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === SignedData.defaultValues(\"version\"));\r\n\t\t\tcase \"encapContentInfo\":\r\n\t\t\t\treturn new EncapsulatedContentInfo();\r\n\t\t\tcase \"digestAlgorithms\":\r\n\t\t\tcase \"certificates\":\r\n\t\t\tcase \"crls\":\r\n\t\t\tcase \"ocsps\":\r\n\t\t\tcase \"signerInfos\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * SignedData ::= SEQUENCE {\r\n\t *    version CMSVersion,\r\n\t *    digestAlgorithms DigestAlgorithmIdentifiers,\r\n\t *    encapContentInfo EncapsulatedContentInfo,\r\n\t *    certificates [0] IMPLICIT CertificateSet OPTIONAL,\r\n\t *    crls [1] IMPLICIT RevocationInfoChoices OPTIONAL,\r\n\t *    signerInfos SignerInfos }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [optional]\r\n\t\t * @property {string} [digestAlgorithms]\r\n\t\t * @property {string} [encapContentInfo]\r\n\t\t * @property {string} [certificates]\r\n\t\t * @property {string} [crls]\r\n\t\t * @property {string} [signerInfos]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\tif((\"optional\" in names) === false)\r\n\t\t\tnames.optional = false;\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"SignedData\"),\r\n\t\t\toptional: names.optional,\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"SignedData.version\") }),\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.digestAlgorithms || \"SignedData.digestAlgorithms\"),\r\n\t\t\t\t\t\t\tvalue: AlgorithmIdentifier.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tEncapsulatedContentInfo.schema(names.encapContentInfo || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"SignedData.encapContentInfo\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.certificates || \"SignedData.certificates\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: CertificateSet.schema().valueBlock.value\r\n\t\t\t\t}), // IMPLICIT CertificateSet\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: RevocationInfoChoices.schema(names.crls || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tcrls: \"SignedData.crls\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}).valueBlock.value\r\n\t\t\t\t}), // IMPLICIT RevocationInfoChoices\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.signerInfos || \"SignedData.signerInfos\"),\r\n\t\t\t\t\t\t\tvalue: SignerInfo.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"SignedData.version\",\r\n\t\t\t\"SignedData.digestAlgorithms\",\r\n\t\t\t\"SignedData.encapContentInfo\",\r\n\t\t\t\"SignedData.certificates\",\r\n\t\t\t\"SignedData.crls\",\r\n\t\t\t\"SignedData.signerInfos\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSignedData.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignedData\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result[\"SignedData.version\"].valueBlock.valueDec;\r\n\t\t\r\n\t\tif(\"SignedData.digestAlgorithms\" in asn1.result) // Could be empty SET of digest algorithms\r\n\t\t\tthis.digestAlgorithms = Array.from(asn1.result[\"SignedData.digestAlgorithms\"], algorithm => new AlgorithmIdentifier({ schema: algorithm }));\r\n\t\t\r\n\t\tthis.encapContentInfo = new EncapsulatedContentInfo({ schema: asn1.result[\"SignedData.encapContentInfo\"] });\r\n\t\t\r\n\t\tif(\"SignedData.certificates\" in asn1.result)\r\n\t\t{\r\n\t\t\tconst certificateSet = new CertificateSet({\r\n\t\t\t\tschema: new asn1js.Set({\r\n\t\t\t\t\tvalue: asn1.result[\"SignedData.certificates\"].valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\tthis.certificates = certificateSet.certificates.slice(0); // Copy all just for making comfortable access\r\n\t\t}\r\n\t\t\r\n\t\tif(\"SignedData.crls\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.crls = Array.from(asn1.result[\"SignedData.crls\"], crl =>\r\n\t\t\t{\r\n\t\t\t\tif(crl.idBlock.tagClass === 1)\r\n\t\t\t\t\treturn new CertificateRevocationList({ schema: crl });\r\n\t\t\t\t\r\n\t\t\t\t//region Create SEQUENCE from [1]\r\n\t\t\t\tcrl.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\t\t\tcrl.idBlock.tagNumber = 16; // SEQUENCE\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\treturn new OtherRevocationInfoFormat({ schema: crl });\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tif(\"SignedData.signerInfos\" in asn1.result) // Could be empty SET SignerInfos\r\n\t\t\tthis.signerInfos = Array.from(asn1.result[\"SignedData.signerInfos\"], signerInfoSchema => new SignerInfo({ schema: signerInfoSchema }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\r\n\t\t//region Create array of digest algorithms\r\n\t\toutputArray.push(new asn1js.Set({\r\n\t\t\tvalue: Array.from(this.digestAlgorithms, algorithm => algorithm.toSchema(encodeFlag))\r\n\t\t}));\r\n\t\t//endregion\r\n\t\t\r\n\t\toutputArray.push(this.encapContentInfo.toSchema());\r\n\t\t\r\n\t\tif(\"certificates\" in this)\r\n\t\t{\r\n\t\t\tconst certificateSet = new CertificateSet({ certificates: this.certificates });\r\n\t\t\tconst certificateSetSchema = certificateSet.toSchema();\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\ttagNumber: 0\r\n\t\t\t\t},\r\n\t\t\t\tvalue: certificateSetSchema.valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"crls\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.crls, crl =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(crl instanceof OtherRevocationInfoFormat)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst crlSchema = crl.toSchema(encodeFlag);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcrlSchema.idBlock.tagClass = 3;\r\n\t\t\t\t\t\tcrlSchema.idBlock.tagNumber = 1;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn crlSchema;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn crl.toSchema(encodeFlag);\r\n\t\t\t\t})\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\t//region Create array of signer infos\r\n\t\toutputArray.push(new asn1js.Set({\r\n\t\t\tvalue: Array.from(this.signerInfos, signerInfo => signerInfo.toSchema(encodeFlag))\r\n\t\t}));\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version,\r\n\t\t\tdigestAlgorithms: Array.from(this.digestAlgorithms, algorithm => algorithm.toJSON()),\r\n\t\t\tencapContentInfo: this.encapContentInfo.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"certificates\" in this)\r\n\t\t\t_object.certificates = Array.from(this.certificates, certificate => certificate.toJSON());\r\n\t\t\r\n\t\tif(\"crls\" in this)\r\n\t\t\t_object.crls = Array.from(this.crls, crl => crl.toJSON());\r\n\t\t\r\n\t\t_object.signerInfos = Array.from(this.signerInfos, signerInfo => signerInfo.toJSON());\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify current SignedData value\r\n\t * @param {Object} [param={}]\r\n\t * @param {Number} [param.signer = -1] Index of the signer which information we need to verify\r\n\t * @param {ArrayBuffer} [param.data=new ArrayBuffer(0)]\r\n\t * @param {Array.<Certificate>} [param.trustedCerts=[]]\r\n\t * @param {Date} [param.checkDate=new Date()]\r\n\t * @param {Boolean} [param.checkChain=false]\r\n\t * @param {Boolean} [param.extendedMode=false]\r\n\t * @param {?Function} [findOrigin=null]\r\n\t * @param {?Function} [findIssuer=null]\r\n\t */\r\n\tverify({\r\n\t\tsigner = (-1),\r\n\t\tdata = (new ArrayBuffer(0)),\r\n\t\ttrustedCerts = [],\r\n\t\tcheckDate = (new Date()),\r\n\t\tcheckChain = false,\r\n\t\textendedMode = false,\r\n\t\tfindOrigin = null,\r\n\t\tfindIssuer = null\r\n\t} = {})\r\n\t{\r\n\t\t//region Global variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet messageDigestValue = new ArrayBuffer(0);\r\n\t\t\r\n\t\tlet shaAlgorithm = \"\";\r\n\t\t\r\n\t\tlet signerCertificate = {};\r\n\t\t\r\n\t\tlet timestampSerial = null;\r\n\t\t\r\n\t\tlet certificatePath = [];\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a signer number\r\n\t\tif(signer === (-1))\r\n\t\t{\r\n\t\t\tif(extendedMode)\r\n\t\t\t{\r\n\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\tcode: 1,\r\n\t\t\t\t\tmessage: \"Unable to get signer index from input parameters\",\r\n\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn Promise.reject(\"Unable to get signer index from input parameters\");\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check that certificates field was included in signed data\r\n\t\tif((\"certificates\" in this) === false)\r\n\t\t{\r\n\t\t\tif(extendedMode)\r\n\t\t\t{\r\n\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\tcode: 2,\r\n\t\t\t\t\tmessage: \"No certificates attached to this signed data\",\r\n\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn Promise.reject(\"No certificates attached to this signed data\");\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find a certificate for specified signer\r\n\t\tif(this.signerInfos[signer].sid instanceof IssuerAndSerialNumber)\r\n\t\t{\r\n\t\t\tsequence = sequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tfor(const certificate of this.certificates)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((certificate instanceof Certificate) === false)\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((certificate.issuer.isEqual(this.signerInfos[signer].sid.issuer)) &&\r\n\t\t\t\t\t\t(certificate.serialNumber.isEqual(this.signerInfos[signer].sid.serialNumber)))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsignerCertificate = certificate;\r\n\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(extendedMode)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\tcode: 3,\r\n\t\t\t\t\t\tmessage: \"Unable to find signer certificate\",\r\n\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.reject(\"Unable to find signer certificate\");\r\n\t\t\t});\r\n\t\t}\r\n\t\telse // Find by SubjectKeyIdentifier\r\n\t\t{\r\n\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\tPromise.all(Array.from(this.certificates.filter(certificate => (certificate instanceof Certificate)), certificate =>\r\n\t\t\t\t\tcrypto.digest({ name: \"sha-1\" }, new Uint8Array(certificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex)))\r\n\t\t\t\t).then(results =>\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(const [index, certificate] of this.certificates.entries())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif((certificate instanceof Certificate) === false)\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(isEqualBuffer(results[index], this.signerInfos[signer].sid.valueBlock.valueHex))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tsignerCertificate = certificate;\r\n\t\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 3,\r\n\t\t\t\t\t\t\tmessage: \"Unable to find signer certificate\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Unable to find signer certificate\");\r\n\t\t\t\t}, () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 3,\r\n\t\t\t\t\t\t\tmessage: \"Unable to find signer certificate\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate: null,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Unable to find signer certificate\");\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Verify internal digest in case of \"tSTInfo\" content type\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tif(this.encapContentInfo.eContentType === \"1.2.840.113549.1.9.16.1.4\")\r\n\t\t\t{\r\n\t\t\t\t//region Check \"eContent\" precense\r\n\t\t\t\tif((\"eContent\" in this.encapContentInfo) === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Initialize TST_INFO value\r\n\t\t\t\tconst asn1 = asn1js.fromBER(this.encapContentInfo.eContent.valueBlock.valueHex);\r\n\t\t\t\tlet tstInfo;\r\n\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\ttstInfo = new TSTInfo({ schema: asn1.result });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Change \"checkDate\" and append \"timestampSerial\"\r\n\t\t\t\tcheckDate = tstInfo.genTime;\r\n\t\t\t\ttimestampSerial = tstInfo.serialNumber.valueBlock.valueHex;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Check that we do have detached data content\r\n\t\t\t\tif(data.byteLength === 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 4,\r\n\t\t\t\t\t\t\tmessage: \"Missed detached data input array\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: null\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Missed detached data input array\");\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\treturn tstInfo.verify({ data });\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make additional verification for signer's certificate\r\n\t\tfunction checkCA(cert)\r\n\t\t{\r\n\t\t\t/// <param name=\"cert\" type=\"in_window.org.pkijs.simpl.CERT\">Certificate to find CA flag for</param>\r\n\t\t\t\r\n\t\t\t//region Do not include signer's certificate\r\n\t\t\tif((cert.issuer.isEqual(signerCertificate.issuer) === true) && (cert.serialNumber.isEqual(signerCertificate.serialNumber) === true))\r\n\t\t\t\treturn null;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tlet isCA = false;\r\n\t\t\t\r\n\t\t\tif(\"extensions\" in cert)\r\n\t\t\t{\r\n\t\t\t\tfor(const extension of cert.extensions)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extension.extnID === \"2.5.29.19\") // BasicConstraints\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(\"cA\" in extension.parsedValue)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(extension.parsedValue.cA === true)\r\n\t\t\t\t\t\t\t\tisCA = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(isCA)\r\n\t\t\t\treturn cert;\r\n\t\t\t\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\t\tif(checkChain)\r\n\t\t{\r\n\t\t\tsequence = sequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Verify result of previous operation\r\n\t\t\t\tif(result === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tconst promiseResults = Array.from(this.certificates.filter(certificate => (certificate instanceof Certificate)), certificate => checkCA(certificate));\r\n\t\t\t\t\r\n\t\t\t\tconst certificateChainValidationEngineParameters = {\r\n\t\t\t\t\tcheckDate,\r\n\t\t\t\t\tcerts: Array.from(promiseResults.filter(_result => (_result !== null))),\r\n\t\t\t\t\ttrustedCerts\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tif(findIssuer !== null)\r\n\t\t\t\t\tcertificateChainValidationEngineParameters.findIssuer = findIssuer;\r\n\t\t\t\t\r\n\t\t\t\tif(findOrigin !== null)\r\n\t\t\t\t\tcertificateChainValidationEngineParameters.findOrigin = findOrigin;\r\n\t\t\t\t\r\n\t\t\t\tconst certificateChainEngine = new CertificateChainValidationEngine(certificateChainValidationEngineParameters);\r\n\t\t\t\t\r\n\t\t\t\tcertificateChainEngine.certs.push(signerCertificate);\r\n\t\t\t\t\r\n\t\t\t\tif(\"crls\" in this)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(const crl of this.crls)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(crl instanceof CertificateRevocationList)\r\n\t\t\t\t\t\t\tcertificateChainEngine.crls.push(crl);\r\n\t\t\t\t\t\telse // Assumed \"revocation value\" has \"OtherRevocationInfoFormat\"\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(crl.otherRevInfoFormat === \"1.3.6.1.5.5.7.48.1.1\") // Basic OCSP response\r\n\t\t\t\t\t\t\t\tcertificateChainEngine.ocsps.push(new BasicOCSPResponse({ schema: crl.otherRevInfo }));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(\"ocsps\" in this)\r\n\t\t\t\t\tcertificateChainEngine.ocsps.push(...(this.ocsps));\r\n\t\t\t\t\r\n\t\t\t\treturn certificateChainEngine.verify().then(verificationResult =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(\"certificatePath\" in verificationResult)\r\n\t\t\t\t\t\tcertificatePath = verificationResult.certificatePath;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(verificationResult.result === true)\r\n\t\t\t\t\t\treturn Promise.resolve(true);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 5,\r\n\t\t\t\t\t\t\tmessage: `Validation of signer's certificate failed: ${verificationResult.resultMessage}`,\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: false\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Validation of signer's certificate failed\");\r\n\t\t\t\t}, error =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 5,\r\n\t\t\t\t\t\t\tmessage: `Validation of signer's certificate failed with error: ${((error instanceof Object) ? error.resultMessage : error)}`,\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: false\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(`Validation of signer's certificate failed with error: ${((error instanceof Object) ? error.resultMessage : error)}`);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find signer's hashing algorithm\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Verify result of previous operation\r\n\t\t\tif(result === false)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tconst signerInfoHashAlgorithm = getAlgorithmByOID(this.signerInfos[signer].digestAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in signerInfoHashAlgorithm) === false)\r\n\t\t\t{\r\n\t\t\t\tif(extendedMode)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\tcode: 7,\r\n\t\t\t\t\t\tmessage: `Unsupported signature algorithm: ${this.signerInfos[signer].digestAlgorithm.algorithmId}`,\r\n\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${this.signerInfos[signer].digestAlgorithm.algorithmId}`);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tshaAlgorithm = signerInfoHashAlgorithm.name;\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create correct data block for verification\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Verify result of previous operation\r\n\t\t\tif(result === false)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(\"eContent\" in this.encapContentInfo) // Attached data\r\n\t\t\t{\r\n\t\t\t\tif((this.encapContentInfo.eContent.idBlock.tagClass === 1) &&\r\n\t\t\t\t\t(this.encapContentInfo.eContent.idBlock.tagNumber === 4))\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.encapContentInfo.eContent.idBlock.isConstructed === false)\r\n\t\t\t\t\t\tdata = this.encapContentInfo.eContent.valueBlock.valueHex;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(const contentValue of this.encapContentInfo.eContent.valueBlock.value)\r\n\t\t\t\t\t\t\tdata = utilConcatBuf(data, contentValue.valueBlock.valueHex);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\tdata = this.encapContentInfo.eContent.valueBlock.valueBeforeDecode;\r\n\t\t\t}\r\n\t\t\telse // Detached data\r\n\t\t\t{\r\n\t\t\t\tif(data.byteLength === 0) // Check that \"data\" already provided by function parameter\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 8,\r\n\t\t\t\t\t\t\tmessage: \"Missed detached data input array\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Missed detached data input array\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(\"signedAttrs\" in this.signerInfos[signer])\r\n\t\t\t{\r\n\t\t\t\t//region Check mandatory attributes\r\n\t\t\t\tlet foundContentType = false;\r\n\t\t\t\tlet foundMessageDigest = false;\r\n\t\t\t\t\r\n\t\t\t\tfor(const attribute of this.signerInfos[signer].signedAttrs.attributes)\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Check that \"content-type\" attribute exists\r\n\t\t\t\t\tif(attribute.type === \"1.2.840.113549.1.9.3\")\r\n\t\t\t\t\t\tfoundContentType = true;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check that \"message-digest\" attribute exists\r\n\t\t\t\t\tif(attribute.type === \"1.2.840.113549.1.9.4\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfoundMessageDigest = true;\r\n\t\t\t\t\t\tmessageDigestValue = attribute.values[0].valueBlock.valueHex;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Speed-up searching\r\n\t\t\t\t\tif(foundContentType && foundMessageDigest)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(foundContentType === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 9,\r\n\t\t\t\t\t\t\tmessage: \"Attribute \\\"content-type\\\" is a mandatory attribute for \\\"signed attributes\\\"\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Attribute \\\"content-type\\\" is a mandatory attribute for \\\"signed attributes\\\"\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(foundMessageDigest === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(extendedMode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\t\t\tcode: 10,\r\n\t\t\t\t\t\t\tmessage: \"Attribute \\\"message-digest\\\" is a mandatory attribute for \\\"signed attributes\\\"\",\r\n\t\t\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Attribute \\\"message-digest\\\" is a mandatory attribute for \\\"signed attributes\\\"\");\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Verify \"message-digest\" attribute in case of \"signedAttrs\"\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Verify result of previous operation\r\n\t\t\tif(result === false)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(\"signedAttrs\" in this.signerInfos[signer])\r\n\t\t\t\treturn crypto.digest(shaAlgorithm, new Uint8Array(data));\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t}).then(\r\n\t\t\t/**\r\n\t\t\t * @param {ArrayBuffer} result\r\n\t\t\t */\r\n\t\t\tresult =>\r\n\t\t\t{\r\n\t\t\t\t//region Verify result of previous operation\r\n\t\t\t\tif(result === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tif(\"signedAttrs\" in this.signerInfos[signer])\r\n\t\t\t\t{\r\n\t\t\t\t\tif(isEqualBuffer(result, messageDigestValue))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdata = this.signerInfos[signer].signedAttrs.encodedValue;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Verify result of previous operation\r\n\t\t\tif(result === false)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn engine.subtle.verifyWithPublicKey(data, this.signerInfos[signer].signature, signerCertificate.subjectPublicKeyInfo, signerCertificate.signatureAlgorithm, shaAlgorithm);\r\n\t\t});\r\n\t\t\r\n\t\t//region Make a final result\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tif(extendedMode)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\tcode: 14,\r\n\t\t\t\t\tmessage: \"\",\r\n\t\t\t\t\tsignatureVerified: result,\r\n\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\ttimestampSerial,\r\n\t\t\t\t\tsignerCertificateVerified: true,\r\n\t\t\t\t\tcertificatePath\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t}, error =>\r\n\t\t{\r\n\t\t\tif(extendedMode)\r\n\t\t\t{\r\n\t\t\t\tif(\"code\" in error)\r\n\t\t\t\t\treturn Promise.reject(error);\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.reject({\r\n\t\t\t\t\tdate: checkDate,\r\n\t\t\t\t\tcode: 15,\r\n\t\t\t\t\tmessage: `Error during verification: ${error.message}`,\r\n\t\t\t\t\tsignatureVerified: null,\r\n\t\t\t\t\tsignerCertificate,\r\n\t\t\t\t\ttimestampSerial,\r\n\t\t\t\t\tsignerCertificateVerified: true\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn Promise.reject(error);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Signing current SignedData\r\n\t * @param {key} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {number} signerIndex Index number (starting from 0) of signer index to make signature for\r\n\t * @param {string} [hashAlgorithm=\"SHA-1\"] Hashing algorithm. Default SHA-1\r\n\t * @param {ArrayBuffer} [data] Detached data\r\n\t * @returns {*}\r\n\t */\r\n\tsign(privateKey, signerIndex, hashAlgorithm = \"SHA-1\", data = (new ArrayBuffer(0)))\r\n\t{\r\n\t\t//region Initial checking\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Simple check for supported algorithm\r\n\t\tconst hashAlgorithmOID = getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\tif(hashAlgorithmOID === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Append information about hash algorithm\r\n\t\tif((this.digestAlgorithms.filter(algorithm => algorithm.algorithmId === hashAlgorithmOID)).length === 0)\r\n\t\t{\r\n\t\t\tthis.digestAlgorithms.push(new AlgorithmIdentifier({\r\n\t\t\t\talgorithmId: hashAlgorithmOID,\r\n\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tthis.signerInfos[signerIndex].digestAlgorithm = new AlgorithmIdentifier({\r\n\t\t\talgorithmId: hashAlgorithmOID,\r\n\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.signerInfos[signerIndex].signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tif(\"signedAttrs\" in this.signerInfos[signerIndex])\r\n\t\t\t{\r\n\t\t\t\tif(this.signerInfos[signerIndex].signedAttrs.encodedValue.byteLength !== 0)\r\n\t\t\t\t\tdata = this.signerInfos[signerIndex].signedAttrs.encodedValue;\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tdata = this.signerInfos[signerIndex].signedAttrs.toSchema(true).toBER(false);\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Change type from \"[0]\" to \"SET\" acordingly to standard\r\n\t\t\t\t\tconst view = new Uint8Array(data);\r\n\t\t\t\t\tview[0] = 0x31;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif(\"eContent\" in this.encapContentInfo) // Attached data\r\n\t\t\t\t{\r\n\t\t\t\t\tif((this.encapContentInfo.eContent.idBlock.tagClass === 1) &&\r\n\t\t\t\t\t\t(this.encapContentInfo.eContent.idBlock.tagNumber === 4))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(this.encapContentInfo.eContent.idBlock.isConstructed === false)\r\n\t\t\t\t\t\t\tdata = this.encapContentInfo.eContent.valueBlock.valueHex;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfor(const content of this.encapContentInfo.eContent.valueBlock.value)\r\n\t\t\t\t\t\t\t\tdata = utilConcatBuf(data, content.valueBlock.valueHex);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tdata = this.encapContentInfo.eContent.valueBlock.valueBeforeDecode;\r\n\t\t\t\t}\r\n\t\t\t\telse // Detached data\r\n\t\t\t\t{\r\n\t\t\t\t\tif(data.byteLength === 0) // Check that \"data\" already provided by function parameter\r\n\t\t\t\t\t\treturn Promise.reject(\"Missed detached data input array\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn Promise.resolve();\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(data, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.signerInfos[signerIndex].signature = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}