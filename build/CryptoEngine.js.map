{"version":3,"sources":["../src/CryptoEngine.js"],"names":["asn1js","makePKCS12B2Key","cryptoEngine","hashAlgorithm","keyLength","password","salt","iterationCount","u","v","result","toUpperCase","Error","passwordViewInitial","Uint8Array","passwordTransformed","ArrayBuffer","byteLength","passwordTransformedView","i","length","slice","D","dView","saltLength","sLen","Math","ceil","S","sView","saltView","passwordLength","pLen","P","pView","passwordView","sPlusPLength","I","iView","set","c","internalSequence","Promise","resolve","then","_I","dAndI","dAndIView","j","roundBuffer","digest","name","B","bView","k","iRound","sliceStart","sliceLength","chunk","Array","from","x","l","push","resultBuffer","resultView","CryptoEngine","constructor","parameters","crypto","subtle","importKey","format","keyData","algorithm","extractable","keyUsages","jwk","buffer","toLowerCase","asn1","fromBER","offset","reject","publicKeyInfo","PublicKeyInfo","fromSchema","ex","hash","alg","kty","ext","key_ops","algorithmId","publicKeyJSON","toJSON","Object","keys","key","privateKeyInfo","PrivateKeyInfo","privateKeyAlgorithm","privateKeyJSON","JSON","stringify","exportKey","sequence","parse","fromJSON","toSchema","toBER","convert","inputFormat","outputFormat","encrypt","args","decrypt","sign","verify","generateKey","deriveKey","deriveBits","wrapKey","unwrapKey","getRandomValues","view","getAlgorithmByOID","oid","kdf","getOIDByAlgorithm","getAlgorithmParameters","algorithmName","operation","usages","modulusLength","publicExponent","namedCurve","public","counter","iv","info","iterations","getHashAlgorithm","signatureAlgorithm","params","RSASSAPSSParams","schema","algorithmParams","encryptEncryptedContentInfo","contentEncryptionOID","contentEncryptionAlgorithm","pbkdf2OID","hmacOID","hmacHashAlgorithm","ivBuffer","ivView","saltBuffer","contentView","contentToEncrypt","pbkdf2Params","PBKDF2Params","OctetString","valueHex","prf","AlgorithmIdentifier","Null","error","pbes2Parameters","PBES2Params","keyDerivationFunc","encryptionScheme","EncryptedContentInfo","contentType","encryptedContent","decryptEncryptedContentInfo","encryptedContentInfo","valueBlock","dataBuffer","idBlock","isConstructed","value","content","stampDataWithPassword","hmacAlgorithm","contentToStamp","verifyDataStampedWithPassword","signatureToVerify","contentToVerify","getSignatureParameters","privateKey","paramsObject","hashAlgorithmOID","maskGenAlgorithm","pssParameters","signWithPrivateKey","data","fillPublicKeyParameters","shaAlgorithm","algorithmObject","algorithmParamsChecked","tagClass","tagNumber","curveObject","toString","getPublicKey","publicKeyInfoSchema","publicKeyInfoBuffer","publicKeyInfoView","verifyWithPublicKey","signature","publicKey","signatureValue","hashAlgo"],"mappings":"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","file":"CryptoEngine.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, stringToArrayBuffer, arrayBufferToString, utilConcatBuf } from \"pvutils\";\r\nimport { createCMSECDSASignature, createECDSASignatureFromCMS } from \"./common.js\";\r\nimport PublicKeyInfo from \"./PublicKeyInfo.js\";\r\nimport PrivateKeyInfo from \"./PrivateKeyInfo.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\r\nimport RSASSAPSSParams from \"./RSASSAPSSParams.js\";\r\nimport PBKDF2Params from \"./PBKDF2Params.js\";\r\nimport PBES2Params from \"./PBES2Params.js\";\r\n//**************************************************************************************\r\n/**\r\n * Making MAC key using algorithm described in B.2 of PKCS#12 standard.\r\n */\r\nfunction makePKCS12B2Key(cryptoEngine, hashAlgorithm, keyLength, password, salt, iterationCount)\r\n{\r\n\t//region Initial variables\r\n\tlet u;\r\n\tlet v;\r\n\t\r\n\tconst result = [];\r\n\t//endregion\r\n\t\r\n\t//region Get \"u\" and \"v\" values\r\n\tswitch(hashAlgorithm.toUpperCase())\r\n\t{\r\n\t\tcase \"SHA-1\":\r\n\t\t\tu = 20; // 160\r\n\t\t\tv = 64; // 512\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-256\":\r\n\t\t\tu = 32; // 256\r\n\t\t\tv = 64; // 512\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-384\":\r\n\t\t\tu = 48; // 384\r\n\t\t\tv = 128; // 1024\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-512\":\r\n\t\t\tu = 64; // 512\r\n\t\t\tv = 128; // 1024\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tthrow new Error(\"Unsupported hashing algorithm\");\r\n\t}\r\n\t//endregion\r\n\t\r\n\t//region Main algorithm making key\r\n\t//region Transform password to UTF-8 like string\r\n\tconst passwordViewInitial = new Uint8Array(password);\r\n\t\r\n\tconst passwordTransformed = new ArrayBuffer((password.byteLength * 2) + 2);\r\n\tconst passwordTransformedView = new Uint8Array(passwordTransformed);\r\n\t\r\n\tfor(let i = 0; i < passwordViewInitial.length; i++)\r\n\t{\r\n\t\tpasswordTransformedView[i * 2] = 0x00;\r\n\t\tpasswordTransformedView[i * 2 + 1] = passwordViewInitial[i];\r\n\t}\r\n\t\r\n\tpasswordTransformedView[passwordTransformedView.length - 2] = 0x00;\r\n\tpasswordTransformedView[passwordTransformedView.length - 1] = 0x00;\r\n\t\r\n\tpassword = passwordTransformed.slice(0);\r\n\t//endregion\r\n\t\r\n\t//region Construct a string D (the \"diversifier\") by concatenating v/8 copies of ID\r\n\tconst D = new ArrayBuffer(v);\r\n\tconst dView = new Uint8Array(D);\r\n\t\r\n\tfor(let i = 0; i < D.byteLength; i++)\r\n\t\tdView[i] = 3; // The ID value equal to \"3\" for MACing (see B.3 of standard)\r\n\t//endregion\r\n\t\r\n\t//region Concatenate copies of the salt together to create a string S of length v * ceil(s / v) bytes (the final copy of the salt may be trunacted to create S)\r\n\tconst saltLength = salt.byteLength;\r\n\t\r\n\tconst sLen = v * Math.ceil(saltLength / v);\r\n\tconst S = new ArrayBuffer(sLen);\r\n\tconst sView = new Uint8Array(S);\r\n\t\r\n\tconst saltView = new Uint8Array(salt);\r\n\t\r\n\tfor(let i = 0; i < sLen; i++)\r\n\t\tsView[i] = saltView[i % saltLength];\r\n\t//endregion\r\n\t\r\n\t//region Concatenate copies of the password together to create a string P of length v * ceil(p / v) bytes (the final copy of the password may be truncated to create P)\r\n\tconst passwordLength = password.byteLength;\r\n\t\r\n\tconst pLen = v * Math.ceil(passwordLength / v);\r\n\tconst P = new ArrayBuffer(pLen);\r\n\tconst pView = new Uint8Array(P);\r\n\t\r\n\tconst passwordView = new Uint8Array(password);\r\n\t\r\n\tfor(let i = 0; i < pLen; i++)\r\n\t\tpView[i] = passwordView[i % passwordLength];\r\n\t//endregion\r\n\t\r\n\t//region Set I=S||P to be the concatenation of S and P\r\n\tconst sPlusPLength = S.byteLength + P.byteLength;\r\n\t\r\n\tlet I = new ArrayBuffer(sPlusPLength);\r\n\tlet iView = new Uint8Array(I);\r\n\t\r\n\tiView.set(sView);\r\n\tiView.set(pView, sView.length);\r\n\t//endregion\r\n\t\r\n\t//region Set c=ceil(n / u)\r\n\tconst c = Math.ceil((keyLength >> 3) / u);\r\n\t//endregion\r\n\t\r\n\t//region Initial variables\r\n\tlet internalSequence = Promise.resolve(I);\r\n\t//endregion\r\n\t\r\n\t//region For i=1, 2, ..., c, do the following:\r\n\tfor(let i = 0; i <= c; i++)\r\n\t{\r\n\t\tinternalSequence = internalSequence.then(_I =>\r\n\t\t{\r\n\t\t\t//region Create contecanetion of D and I\r\n\t\t\tconst dAndI = new ArrayBuffer(D.byteLength + _I.byteLength);\r\n\t\t\tconst dAndIView = new Uint8Array(dAndI);\r\n\t\t\t\r\n\t\t\tdAndIView.set(dView);\r\n\t\t\tdAndIView.set(iView, dView.length);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn dAndI;\r\n\t\t});\r\n\t\t\r\n\t\t//region Make \"iterationCount\" rounds of hashing\r\n\t\tfor(let j = 0; j < iterationCount; j++)\r\n\t\t\tinternalSequence = internalSequence.then(roundBuffer => cryptoEngine.digest({ name: hashAlgorithm }, new Uint8Array(roundBuffer)));\r\n\t\t//endregion\r\n\t\t\r\n\t\tinternalSequence = internalSequence.then(roundBuffer =>\r\n\t\t{\r\n\t\t\t//region Concatenate copies of Ai to create a string B of length v bits (the final copy of Ai may be truncated to create B)\r\n\t\t\tconst B = new ArrayBuffer(v);\r\n\t\t\tconst bView = new Uint8Array(B);\r\n\t\t\t\r\n\t\t\tfor(let j = 0; j < B.byteLength; j++)\r\n\t\t\t\tbView[j] = roundBuffer[j % roundBuffer.length];\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Make new I value\r\n\t\t\tconst k = Math.ceil(saltLength / v) + Math.ceil(passwordLength / v);\r\n\t\t\tconst iRound = [];\r\n\t\t\t\r\n\t\t\tlet sliceStart = 0;\r\n\t\t\tlet sliceLength = v;\r\n\t\t\t\r\n\t\t\tfor(let j = 0; j < k; j++)\r\n\t\t\t{\r\n\t\t\t\tconst chunk = Array.from(new Uint8Array(I.slice(sliceStart, sliceStart + sliceLength)));\r\n\t\t\t\tsliceStart += v;\r\n\t\t\t\tif((sliceStart + v) > I.byteLength)\r\n\t\t\t\t\tsliceLength = I.byteLength - sliceStart;\r\n\t\t\t\t\r\n\t\t\t\tlet x = 0x1ff;\r\n\t\t\t\t\r\n\t\t\t\tfor(let l = (B.byteLength - 1); l >= 0; l--)\r\n\t\t\t\t{\r\n\t\t\t\t\tx >>= 8;\r\n\t\t\t\t\tx += bView[l] + chunk[l];\r\n\t\t\t\t\tchunk[l] = (x & 0xff);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tiRound.push(...chunk);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tI = new ArrayBuffer(iRound.length);\r\n\t\t\tiView = new Uint8Array(I);\r\n\t\t\t\r\n\t\t\tiView.set(iRound);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tresult.push(...(new Uint8Array(roundBuffer)));\r\n\t\t\t\r\n\t\t\treturn I;\r\n\t\t});\r\n\t}\r\n\t//endregion\r\n\t\r\n\t//region Initialize final key\r\n\tinternalSequence = internalSequence.then(() =>\r\n\t{\r\n\t\tconst resultBuffer = new ArrayBuffer(keyLength >> 3);\r\n\t\tconst resultView = new Uint8Array(resultBuffer);\r\n\t\t\r\n\t\tresultView.set((new Uint8Array(result)).slice(0, keyLength >> 3));\r\n\t\t\r\n\t\treturn resultBuffer;\r\n\t});\r\n\t//endregion\r\n\t//endregion\r\n\t\r\n\treturn internalSequence;\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Default cryptographic engine for Web Cryptography API\r\n */\r\nexport default class CryptoEngine\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CryptoEngine class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc Usually here we are expecting \"window.crypto\" or an equivalent from custom \"crypto engine\"\r\n\t\t */\r\n\t\tthis.crypto = getParametersValue(parameters, \"crypto\", {});\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc Usually here we are expecting \"window.crypto.subtle\" or an equivalent from custom \"crypto engine\"\r\n\t\t */\r\n\t\tthis.subtle = getParametersValue(parameters, \"subtle\", {});\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc Name of the \"crypto engine\"\r\n\t\t */\r\n\t\tthis.name = getParametersValue(parameters, \"name\", \"\");\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Import WebCrypto keys from different formats\r\n\t * @param {string} format\r\n\t * @param {ArrayBuffer|Uint8Array} keyData\r\n\t * @param {Object} algorithm\r\n\t * @param {boolean} extractable\r\n\t * @param {Array} keyUsages\r\n\t * @returns {Promise}\r\n\t */\r\n\timportKey(format, keyData, algorithm, extractable, keyUsages)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet jwk = {};\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Change \"keyData\" type if needed\r\n\t\tif(keyData instanceof Uint8Array)\r\n\t\t\tkeyData = keyData.buffer;\r\n\t\t//endregion\r\n\t\t\r\n\t\tswitch(format.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"raw\":\r\n\t\t\t\treturn this.subtle.importKey(\"raw\", keyData, algorithm, extractable, keyUsages);\r\n\t\t\tcase \"spki\":\r\n\t\t\t\t{\r\n\t\t\t\t\tconst asn1 = asn1js.fromBER(keyData);\r\n\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\r\n\t\t\t\t\tconst publicKeyInfo = new PublicKeyInfo();\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpublicKeyInfo.fromSchema(asn1.result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t// noinspection FallThroughInSwitchStatementJS\r\n\t\t\t\t\tswitch(algorithm.name.toUpperCase())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS1\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS256\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS384\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS512\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// break omitted\r\n\t\t\t\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeyUsages = [\"verify\"]; // Override existing keyUsages value since the key is a public key\r\n\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\r\n\t\t\t\t\t\t\t\tif(publicKeyInfo.algorithm.algorithmId !== \"1.2.840.113549.1.1.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif((\"alg\" in jwk) === false)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS1\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create RSA Public Key elements\r\n\t\t\t\t\t\t\t\tconst publicKeyJSON = publicKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(publicKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = publicKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"ECDSA\":\r\n\t\t\t\t\t\t\tkeyUsages = [\"verify\"]; // Override existing keyUsages value since the key is a public key\r\n\t\t\t\t\t\t\t// break omitted\r\n\t\t\t\t\t\tcase \"ECDH\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\t\t\tjwk = {\r\n\t\t\t\t\t\t\t\t\tkty: \"EC\",\r\n\t\t\t\t\t\t\t\t\text: extractable,\r\n\t\t\t\t\t\t\t\t\tkey_ops: keyUsages\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about algorithm\r\n\t\t\t\t\t\t\t\tif(publicKeyInfo.algorithm.algorithmId !== \"1.2.840.10045.2.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create ECDSA Public Key elements\r\n\t\t\t\t\t\t\t\tconst publicKeyJSON = publicKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(publicKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = publicKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Create ECDSA Public Key elements\r\n\t\t\t\t\t\t\t\tconst publicKeyJSON = publicKeyInfo.toJSON();\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(publicKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = publicKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\treturn Promise.reject(`Incorrect algorithm name: ${algorithm.name.toUpperCase()}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pkcs8\":\r\n\t\t\t\t{\r\n\t\t\t\t\tconst privateKeyInfo = new PrivateKeyInfo();\r\n\r\n\t\t\t\t\t//region Parse \"PrivateKeyInfo\" object\r\n\t\t\t\t\tconst asn1 = asn1js.fromBER(keyData);\r\n\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprivateKeyInfo.fromSchema(asn1.result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((\"parsedKey\" in privateKeyInfo) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t// noinspection FallThroughInSwitchStatementJS\r\n\t\t\t\t\t// noinspection FallThroughInSwitchStatementJS\r\n\t\t\t\t\tswitch(algorithm.name.toUpperCase())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS1\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS256\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS384\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS512\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// break omitted\r\n\t\t\t\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeyUsages = [\"sign\"]; // Override existing keyUsages value since the key is a private key\r\n\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif(privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.113549.1.1.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect private key algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif((\"alg\" in jwk) === false)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS1\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create RSA Private Key elements\r\n\t\t\t\t\t\t\t\tconst privateKeyJSON = privateKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(privateKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = privateKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"ECDSA\":\r\n\t\t\t\t\t\t\tkeyUsages = [\"sign\"]; // Override existing keyUsages value since the key is a private key\r\n\t\t\t\t\t\t\t// break omitted\r\n\t\t\t\t\t\tcase \"ECDH\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\t\t\tjwk = {\r\n\t\t\t\t\t\t\t\t\tkty: \"EC\",\r\n\t\t\t\t\t\t\t\t\text: extractable,\r\n\t\t\t\t\t\t\t\t\tkey_ops: keyUsages\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif(privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.10045.2.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create ECDSA Private Key elements\r\n\t\t\t\t\t\t\t\tconst privateKeyJSON = privateKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(privateKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = privateKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Create RSA Private Key elements\r\n\t\t\t\t\t\t\t\tconst privateKeyJSON = privateKeyInfo.toJSON();\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(privateKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = privateKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\treturn Promise.reject(`Incorrect algorithm name: ${algorithm.name.toUpperCase()}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"jwk\":\r\n\t\t\t\tjwk = keyData;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect format: ${format}`);\r\n\t\t}\r\n\t\t\r\n\t\t//region Special case for Safari browser (since its acting not as WebCrypto standard describes)\r\n\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t{\r\n\t\t\t// Try to use both ways - import using ArrayBuffer and pure JWK (for Safari Technology Preview)\r\n\t\t\treturn Promise.resolve().then(() => this.subtle.importKey(\"jwk\", stringToArrayBuffer(JSON.stringify(jwk)), algorithm, extractable, keyUsages))\r\n\t\t\t\t.then(result => result, () => this.subtle.importKey(\"jwk\", jwk, algorithm, extractable, keyUsages));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn this.subtle.importKey(\"jwk\", jwk, algorithm, extractable, keyUsages);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Export WebCrypto keys to different formats\r\n\t * @param {string} format\r\n\t * @param {Object} key\r\n\t * @returns {Promise}\r\n\t */\r\n\texportKey(format, key)\r\n\t{\r\n\t\tlet sequence = this.subtle.exportKey(\"jwk\", key);\r\n\t\t\r\n\t\t//region Currently Safari returns ArrayBuffer as JWK thus we need an additional transformation\r\n\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t{\r\n\t\t\tsequence = sequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t// Some additional checks for Safari Technology Preview\r\n\t\t\t\tif(result instanceof ArrayBuffer)\r\n\t\t\t\t\treturn JSON.parse(arrayBufferToString(result));\r\n\t\t\t\t\r\n\t\t\t\treturn result;\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\tswitch(format.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"raw\":\r\n\t\t\t\treturn this.subtle.exportKey(\"raw\", key);\r\n\t\t\tcase \"spki\":\r\n\t\t\t\tsequence = sequence.then(result =>\r\n\t\t\t\t{\r\n\t\t\t\t\tconst publicKeyInfo = new PublicKeyInfo();\r\n\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpublicKeyInfo.fromJSON(result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect key data\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn publicKeyInfo.toSchema().toBER(false);\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pkcs8\":\r\n\t\t\t\tsequence = sequence.then(result =>\r\n\t\t\t\t{\r\n\t\t\t\t\tconst privateKeyInfo = new PrivateKeyInfo();\r\n\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprivateKeyInfo.fromJSON(result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect key data\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn privateKeyInfo.toSchema().toBER(false);\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"jwk\":\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect format: ${format}`);\r\n\t\t}\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert WebCrypto keys between different export formats\r\n\t * @param {string} inputFormat\r\n\t * @param {string} outputFormat\r\n\t * @param {ArrayBuffer|Object} keyData\r\n\t * @param {Object} algorithm\r\n\t * @param {boolean} extractable\r\n\t * @param {Array} keyUsages\r\n\t * @returns {Promise}\r\n\t */\r\n\tconvert(inputFormat, outputFormat, keyData, algorithm, extractable, keyUsages)\r\n\t{\r\n\t\tswitch(inputFormat.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"raw\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"raw\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"spki\", result));\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"raw\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"pkcs8\", result));\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"raw\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"jwk\", result));\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tcase \"spki\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"spki\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"raw\", result));\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.reject(\"Impossible to convert between SPKI/PKCS8\");\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"spki\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"jwk\", result));\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tcase \"pkcs8\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"pkcs8\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"raw\", result));\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.reject(\"Impossible to convert between SPKI/PKCS8\");\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"pkcs8\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"jwk\", result));\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tcase \"jwk\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"raw\", result));\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"spki\", result));\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"pkcs8\", result));\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect inputFormat: ${inputFormat}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"encrypt\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tencrypt(...args)\r\n\t{\r\n\t\treturn this.subtle.encrypt(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"decrypt\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tdecrypt(...args)\r\n\t{\r\n\t\treturn this.subtle.decrypt(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"sign\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(...args)\r\n\t{\r\n\t\treturn this.subtle.sign(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"verify\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(...args)\r\n\t{\r\n\t\treturn this.subtle.verify(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"digest\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tdigest(...args)\r\n\t{\r\n\t\treturn this.subtle.digest(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"generateKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tgenerateKey(...args)\r\n\t{\r\n\t\treturn this.subtle.generateKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"deriveKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tderiveKey(...args)\r\n\t{\r\n\t\treturn this.subtle.deriveKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"deriveBits\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tderiveBits(...args)\r\n\t{\r\n\t\treturn this.subtle.deriveBits(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"wrapKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\twrapKey(...args)\r\n\t{\r\n\t\treturn this.subtle.wrapKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"unwrapKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tunwrapKey(...args)\r\n\t{\r\n\t\treturn this.subtle.unwrapKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Initialize input Uint8Array by random values (with help from current \"crypto engine\")\r\n\t * @param {!Uint8Array} view\r\n\t * @returns {*}\r\n\t */\r\n\tgetRandomValues(view)\r\n\t{\r\n\t\tif((\"getRandomValues\" in this.crypto) === false)\r\n\t\t\tthrow new Error(\"No support for getRandomValues\");\r\n\t\t\r\n\t\treturn this.crypto.getRandomValues(view);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get WebCrypto algorithm by wel-known OID\r\n\t * @param {string} oid well-known OID to search for\r\n\t * @returns {Object}\r\n\t */\r\n\tgetAlgorithmByOID(oid)\r\n\t{\r\n\t\tswitch(oid)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.113549.1.1.1\":\r\n\t\t\tcase \"1.2.840.113549.1.1.5\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.11\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.12\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.13\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.10\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSA-PSS\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.7\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.10045.2.1\":\r\n\t\t\tcase \"1.2.840.10045.4.1\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.10045.4.3.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.10045.4.3.3\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.10045.4.3.4\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.133.16.840.63.0.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tkdf: \"SHA-1\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.1.11.1\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tkdf: \"SHA-256\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.1.11.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tkdf: \"SHA-384\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.1.11.3\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tkdf: \"SHA-512\"\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\tlength: 128\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.22\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\tlength: 192\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.42\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\tlength: 256\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.6\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\tlength: 128\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.26\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\tlength: 192\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.46\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\tlength: 256\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.4\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CFB\",\r\n\t\t\t\t\tlength: 128\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.24\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CFB\",\r\n\t\t\t\t\tlength: 192\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.44\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CFB\",\r\n\t\t\t\t\tlength: 256\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.5\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\tlength: 128\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.25\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\tlength: 192\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.45\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\tlength: 256\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.2.7\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.2.9\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.2.10\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.2.11\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.9.16.3.5\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"DH\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.14.3.2.26\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.2.1\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.2.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.2.3\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.5.12\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"PBKDF2\"\r\n\t\t\t\t};\r\n\t\t\t//region Special case - OIDs for ECC curves\r\n\t\t\tcase \"1.2.840.10045.3.1.7\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"P-256\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.0.34\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"P-384\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.0.35\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"P-521\"\r\n\t\t\t\t};\r\n\t\t\t//endregion\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\treturn {};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get OID for each specific algorithm\r\n\t * @param {Object} algorithm\r\n\t * @returns {string}\r\n\t */\r\n\tgetOIDByAlgorithm(algorithm)\r\n\t{\r\n\t\tlet result = \"\";\r\n\t\t\r\n\t\tswitch(algorithm.name.toUpperCase())\r\n\t\t{\r\n\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.5\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.11\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.12\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.13\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.1.10\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.1.7\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ECDSA\":\r\n\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.1\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.3.2\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.3.3\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.3.4\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ECDH\":\r\n\t\t\t\tswitch(algorithm.kdf.toUpperCase()) // Non-standard addition - hash algorithm of KDF function\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\tresult = \"1.3.133.16.840.63.0.2\"; // dhSinglePass-stdDH-sha1kdf-scheme\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\tresult = \"1.3.132.1.11.1\"; // dhSinglePass-stdDH-sha256kdf-scheme\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\tresult = \"1.3.132.1.11.2\"; // dhSinglePass-stdDH-sha384kdf-scheme\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\tresult = \"1.3.132.1.11.3\"; // dhSinglePass-stdDH-sha512kdf-scheme\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CTR\":\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CBC\":\r\n\t\t\t\tswitch(algorithm.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 128:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.2\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 192:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.22\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 256:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.42\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CMAC\":\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-GCM\":\r\n\t\t\t\tswitch(algorithm.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 128:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.6\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 192:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.26\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 256:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.46\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CFB\":\r\n\t\t\t\tswitch(algorithm.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 128:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.4\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 192:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.24\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 256:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.44\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-KW\":\r\n\t\t\t\tswitch(algorithm.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 128:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.5\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 192:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.25\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 256:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.45\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"HMAC\":\r\n\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.7\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.9\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.10\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.11\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"DH\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.9.16.3.5\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SHA-1\":\r\n\t\t\t\tresult = \"1.3.14.3.2.26\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SHA-256\":\r\n\t\t\t\tresult = \"2.16.840.1.101.3.4.2.1\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SHA-384\":\r\n\t\t\t\tresult = \"2.16.840.1.101.3.4.2.2\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SHA-512\":\r\n\t\t\t\tresult = \"2.16.840.1.101.3.4.2.3\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"CONCAT\":\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"HKDF\":\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"PBKDF2\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.5.12\";\r\n\t\t\t\tbreak;\r\n\t\t\t//region Special case - OIDs for ECC curves\r\n\t\t\tcase \"P-256\":\r\n\t\t\t\tresult = \"1.2.840.10045.3.1.7\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"P-384\":\r\n\t\t\t\tresult = \"1.3.132.0.34\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"P-521\":\r\n\t\t\t\tresult = \"1.3.132.0.35\";\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get default algorithm parameters for each kind of operation\r\n\t * @param {string} algorithmName Algorithm name to get common parameters for\r\n\t * @param {string} operation Kind of operation: \"sign\", \"encrypt\", \"generatekey\", \"importkey\", \"exportkey\", \"verify\"\r\n\t * @returns {*}\r\n\t */\r\n\tgetAlgorithmParameters(algorithmName, operation)\r\n\t{\r\n\t\tlet result = {\r\n\t\t\talgorithm: {},\r\n\t\t\tusages: []\r\n\t\t};\r\n\t\t\r\n\t\tswitch(algorithmName.toUpperCase())\r\n\t\t{\r\n\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\t\t\t\tmodulusLength: 2048,\r\n\t\t\t\t\t\t\t\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"verify\":\r\n\t\t\t\t\tcase \"sign\":\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"verify\"] // For importKey(\"pkcs8\") usage must be \"sign\" only\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"sign\":\r\n\t\t\t\t\tcase \"verify\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tsaltLength: 20\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\",\r\n\t\t\t\t\t\t\t\tmodulusLength: 2048,\r\n\t\t\t\t\t\t\t\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"verify\"] // For importKey(\"pkcs8\") usage must be \"sign\" only\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\tcase \"decrypt\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\",\r\n\t\t\t\t\t\t\t\tmodulusLength: 2048,\r\n\t\t\t\t\t\t\t\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\"] // encrypt for \"spki\" and decrypt for \"pkcs8\"\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ECDSA\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"verify\"] // \"sign\" for \"pkcs8\"\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"verify\":\r\n\t\t\t\t\tcase \"sign\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDSA\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ECDH\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"deriveKey\", \"deriveBits\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"derivekey\":\r\n\t\t\t\t\tcase \"derivebits\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\",\r\n\t\t\t\t\t\t\t\tpublic: [] // Must be a \"publicKey\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDH\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CTR\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CTR\",\r\n\t\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"decrypt\":\r\n\t\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CTR\",\r\n\t\t\t\t\t\t\t\tcounter: new Uint8Array(16),\r\n\t\t\t\t\t\t\t\tlength: 10\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CTR\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CBC\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"decrypt\":\r\n\t\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\t\t\t\tiv: this.getRandomValues(new Uint8Array(16)) // For \"decrypt\" the value should be replaced with value got on \"encrypt\" step\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CBC\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-GCM\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"decrypt\":\r\n\t\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\t\t\t\tiv: this.getRandomValues(new Uint8Array(16)) // For \"decrypt\" the value should be replaced with value got on \"encrypt\" step\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-GCM\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-KW\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\tcase \"wrapkey\":\r\n\t\t\t\t\tcase \"unwrapkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-KW\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"HMAC\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"sign\":\r\n\t\t\t\t\tcase \"verify\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HMAC\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\t\t\t\tlength: 32,\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HMAC\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"HKDF\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"derivekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HKDF\",\r\n\t\t\t\t\t\t\t\thash: \"SHA-256\",\r\n\t\t\t\t\t\t\t\tsalt: new Uint8Array([]),\r\n\t\t\t\t\t\t\t\tinfo: new Uint8Array([])\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HKDF\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"PBKDF2\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"derivekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\t\t\t\t\thash: { name: \"SHA-256\" },\r\n\t\t\t\t\t\t\t\tsalt: new Uint8Array([]),\r\n\t\t\t\t\t\t\t\titerations: 10000\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"PBKDF2\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Getting hash algorithm by signature algorithm\r\n\t * @param {AlgorithmIdentifier} signatureAlgorithm Signature algorithm\r\n\t * @returns {string}\r\n\t */\r\n\tgetHashAlgorithm(signatureAlgorithm)\r\n\t{\r\n\t\tlet result = \"\";\r\n\t\t\r\n\t\tswitch(signatureAlgorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.4.1\": // ecdsa-with-SHA1\r\n\t\t\tcase \"1.2.840.113549.1.1.5\":\r\n\t\t\t\tresult = \"SHA-1\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.10045.4.3.2\": // ecdsa-with-SHA256\r\n\t\t\tcase \"1.2.840.113549.1.1.11\":\r\n\t\t\t\tresult = \"SHA-256\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.10045.4.3.3\": // ecdsa-with-SHA384\r\n\t\t\tcase \"1.2.840.113549.1.1.12\":\r\n\t\t\t\tresult = \"SHA-384\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.10045.4.3.4\": // ecdsa-with-SHA512\r\n\t\t\tcase \"1.2.840.113549.1.1.13\":\r\n\t\t\t\tresult = \"SHA-512\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.1.10\": // RSA-PSS\r\n\t\t\t\t{\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst params = new RSASSAPSSParams({ schema: signatureAlgorithm.algorithmParams });\r\n\t\t\t\t\t\tif(\"hashAlgorithm\" in params)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tconst algorithm = this.getAlgorithmByOID(params.hashAlgorithm.algorithmId);\r\n\t\t\t\t\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\t\t\t\t\treturn \"\";\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tresult = algorithm.name;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tresult = \"SHA-1\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Specialized function encrypting \"EncryptedContentInfo\" object using parameters\r\n\t * @param {Object} parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tencryptEncryptedContentInfo(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\r\n\t\tif((\"contentEncryptionAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentEncryptionAlgorithm\\\"\");\r\n\t\t\r\n\t\tif((\"hmacHashAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hmacHashAlgorithm\\\"\");\r\n\t\t\r\n\t\tif((\"iterationCount\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\r\n\t\t\r\n\t\tif((\"contentToEncrypt\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentToEncrypt\\\"\");\r\n\t\t\r\n\t\tif((\"contentType\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentType\\\"\");\r\n\r\n\t\tconst contentEncryptionOID = this.getOIDByAlgorithm(parameters.contentEncryptionAlgorithm);\r\n\t\tif(contentEncryptionOID === \"\")\r\n\t\t\treturn Promise.reject(\"Wrong \\\"contentEncryptionAlgorithm\\\" value\");\r\n\t\t\r\n\t\tconst pbkdf2OID = this.getOIDByAlgorithm({\r\n\t\t\tname: \"PBKDF2\"\r\n\t\t});\r\n\t\tif(pbkdf2OID === \"\")\r\n\t\t\treturn Promise.reject(\"Can not find OID for PBKDF2\");\r\n\t\t\r\n\t\tconst hmacOID = this.getOIDByAlgorithm({\r\n\t\t\tname: \"HMAC\",\r\n\t\t\thash: {\r\n\t\t\t\tname: parameters.hmacHashAlgorithm\r\n\t\t\t}\r\n\t\t});\r\n\t\tif(hmacOID === \"\")\r\n\t\t\treturn Promise.reject(`Incorrect value for \"hmacHashAlgorithm\": ${parameters.hmacHashAlgorithm}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst ivBuffer = new ArrayBuffer(16); // For AES we need IV 16 bytes long\r\n\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\tthis.getRandomValues(ivView);\r\n\t\t\r\n\t\tconst saltBuffer = new ArrayBuffer(64);\r\n\t\tconst saltView = new Uint8Array(saltBuffer);\r\n\t\tthis.getRandomValues(saltView);\r\n\t\t\r\n\t\tconst contentView = new Uint8Array(parameters.contentToEncrypt);\r\n\t\t\r\n\t\tconst pbkdf2Params = new PBKDF2Params({\r\n\t\t\tsalt: new asn1js.OctetString({ valueHex: saltBuffer }),\r\n\t\t\titerationCount: parameters.iterationCount,\r\n\t\t\tprf: new AlgorithmIdentifier({\r\n\t\t\t\talgorithmId: hmacOID,\r\n\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t})\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tconst passwordView = new Uint8Array(parameters.password);\r\n\t\t\t\r\n\t\t\treturn this.importKey(\"raw\",\r\n\t\t\t\tpasswordView,\r\n\t\t\t\t\"PBKDF2\",\r\n\t\t\t\tfalse,\r\n\t\t\t\t[\"deriveKey\"]);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Derive key for \"contentEncryptionAlgorithm\"\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tthis.deriveKey({\r\n\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\thash: {\r\n\t\t\t\t\tname: parameters.hmacHashAlgorithm\r\n\t\t\t\t},\r\n\t\t\t\tsalt: saltView,\r\n\t\t\t\titerations: parameters.iterationCount\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tparameters.contentEncryptionAlgorithm,\r\n\t\t\tfalse,\r\n\t\t\t[\"encrypt\"]),\r\n\t\terror =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Encrypt content\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tthis.encrypt({\r\n\t\t\t\tname: parameters.contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tcontentView),\r\n\t\terror =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Store all parameters in EncryptedData object\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tconst pbes2Parameters = new PBES2Params({\r\n\t\t\t\tkeyDerivationFunc: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: pbkdf2OID,\r\n\t\t\t\t\talgorithmParams: pbkdf2Params.toSchema()\r\n\t\t\t\t}),\r\n\t\t\t\tencryptionScheme: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: contentEncryptionOID,\r\n\t\t\t\t\talgorithmParams: new asn1js.OctetString({ valueHex: ivBuffer })\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\treturn new EncryptedContentInfo({\r\n\t\t\t\tcontentType: parameters.contentType,\r\n\t\t\t\tcontentEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: \"1.2.840.113549.1.5.13\", // pkcs5PBES2\r\n\t\t\t\t\talgorithmParams: pbes2Parameters.toSchema()\r\n\t\t\t\t}),\r\n\t\t\t\tencryptedContent: new asn1js.OctetString({ valueHex: result })\r\n\t\t\t});\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Decrypt data stored in \"EncryptedContentInfo\" object using parameters\r\n\t * @param parameters\r\n\t * @return {Promise}\r\n\t */\r\n\tdecryptEncryptedContentInfo(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\r\n\t\tif((\"encryptedContentInfo\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"encryptedContentInfo\\\"\");\r\n\r\n\t\tif(parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId !== \"1.2.840.113549.1.5.13\") // pkcs5PBES2\r\n\t\t\treturn Promise.reject(`Unknown \"contentEncryptionAlgorithm\": ${parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet pbes2Parameters;\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tpbes2Parameters = new PBES2Params({ schema: parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams });\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"pbes2Parameters\\\"\");\r\n\t\t}\r\n\t\t\r\n\t\tlet pbkdf2Params;\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tpbkdf2Params = new PBKDF2Params({ schema: pbes2Parameters.keyDerivationFunc.algorithmParams });\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"pbkdf2Params\\\"\");\r\n\t\t}\r\n\t\t\r\n\t\tconst contentEncryptionAlgorithm = this.getAlgorithmByOID(pbes2Parameters.encryptionScheme.algorithmId);\r\n\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\treturn Promise.reject(`Incorrect OID for \"contentEncryptionAlgorithm\": ${pbes2Parameters.encryptionScheme.algorithmId}`);\r\n\t\t\r\n\t\tconst ivBuffer = pbes2Parameters.encryptionScheme.algorithmParams.valueBlock.valueHex;\r\n\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\t\r\n\t\tconst saltBuffer = pbkdf2Params.salt.valueBlock.valueHex;\r\n\t\tconst saltView = new Uint8Array(saltBuffer);\r\n\t\t\r\n\t\tconst iterationCount = pbkdf2Params.iterationCount;\r\n\t\t\r\n\t\tlet hmacHashAlgorithm = \"SHA-1\";\r\n\t\t\r\n\t\tif(\"prf\" in pbkdf2Params)\r\n\t\t{\r\n\t\t\tconst algorithm = this.getAlgorithmByOID(pbkdf2Params.prf.algorithmId);\r\n\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\treturn Promise.reject(\"Incorrect OID for HMAC hash algorithm\");\r\n\t\t\t\r\n\t\t\thmacHashAlgorithm = algorithm.hash.name;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tthis.importKey(\"raw\",\r\n\t\t\t\tparameters.password,\r\n\t\t\t\t\"PBKDF2\",\r\n\t\t\t\tfalse,\r\n\t\t\t\t[\"deriveKey\"]),\r\n\t\terror =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Derive key for \"contentEncryptionAlgorithm\"\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tthis.deriveKey({\r\n\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\thash: {\r\n\t\t\t\t\tname: hmacHashAlgorithm\r\n\t\t\t\t},\r\n\t\t\t\tsalt: saltView,\r\n\t\t\t\titerations: iterationCount\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\tfalse,\r\n\t\t\t[\"decrypt\"]),\r\n\t\terror =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Decrypt internal content using derived key\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Create correct data block for decryption\r\n\t\t\tlet dataBuffer = new ArrayBuffer(0);\r\n\t\t\t\r\n\t\t\tif(parameters.encryptedContentInfo.encryptedContent.idBlock.isConstructed === false)\r\n\t\t\t\tdataBuffer = parameters.encryptedContentInfo.encryptedContent.valueBlock.valueHex;\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tfor(const content of parameters.encryptedContentInfo.encryptedContent.valueBlock.value)\r\n\t\t\t\t\tdataBuffer = utilConcatBuf(dataBuffer, content.valueBlock.valueHex);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn this.decrypt({\r\n\t\t\t\tname: contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tdataBuffer);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Stamping (signing) data using algorithm simular to HMAC\r\n\t * @param {Object} parameters\r\n\t * @return {Promise.<T>|Promise}\r\n\t */\r\n\tstampDataWithPassword(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\r\n\t\tif((\"hashAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hashAlgorithm\\\"\");\r\n\t\t\r\n\t\tif((\"salt\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\r\n\t\t\r\n\t\tif((\"iterationCount\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"salt\\\"\");\r\n\t\t\r\n\t\tif((\"contentToStamp\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentToStamp\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Choose correct length for HMAC key\r\n\t\tlet length;\r\n\t\t\r\n\t\tswitch(parameters.hashAlgorithm.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"sha-1\":\r\n\t\t\t\tlength = 160;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-256\":\r\n\t\t\t\tlength = 256;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-384\":\r\n\t\t\t\tlength = 384;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-512\":\r\n\t\t\t\tlength = 512;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect \"parameters.hashAlgorithm\" parameter: ${parameters.hashAlgorithm}`);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst hmacAlgorithm = {\r\n\t\t\tname: \"HMAC\",\r\n\t\t\tlength,\r\n\t\t\thash: {\r\n\t\t\t\tname: parameters.hashAlgorithm\r\n\t\t\t}\r\n\t\t};\r\n\t\t//endregion\r\n\r\n\t\t//region Create PKCS#12 key for integrity checking\r\n\t\tsequence = sequence.then(() => makePKCS12B2Key(this, parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Import HMAC key\r\n\t\t// noinspection JSCheckFunctionSignatures\r\n\t\tsequence = sequence.then(\r\n\t\t\tresult =>\r\n\t\t\t\tthis.importKey(\"raw\",\r\n\t\t\t\t\tnew Uint8Array(result),\r\n\t\t\t\t\thmacAlgorithm,\r\n\t\t\t\t\tfalse,\r\n\t\t\t\t\t[\"sign\"])\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make signed HMAC value\r\n\t\tsequence = sequence.then(\r\n\t\t\tresult =>\r\n\t\t\t\tthis.sign(hmacAlgorithm, result, new Uint8Array(parameters.contentToStamp)),\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tverifyDataStampedWithPassword(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\r\n\t\tif((\"hashAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hashAlgorithm\\\"\");\r\n\t\t\r\n\t\tif((\"salt\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\r\n\t\t\r\n\t\tif((\"iterationCount\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"salt\\\"\");\r\n\t\t\r\n\t\tif((\"contentToVerify\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentToVerify\\\"\");\r\n\t\t\r\n\t\tif((\"signatureToVerify\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"signatureToVerify\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Choose correct length for HMAC key\r\n\t\tlet length;\r\n\t\t\r\n\t\tswitch(parameters.hashAlgorithm.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"sha-1\":\r\n\t\t\t\tlength = 160;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-256\":\r\n\t\t\t\tlength = 256;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-384\":\r\n\t\t\t\tlength = 384;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-512\":\r\n\t\t\t\tlength = 512;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect \"parameters.hashAlgorithm\" parameter: ${parameters.hashAlgorithm}`);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst hmacAlgorithm = {\r\n\t\t\tname: \"HMAC\",\r\n\t\t\tlength,\r\n\t\t\thash: {\r\n\t\t\t\tname: parameters.hashAlgorithm\r\n\t\t\t}\r\n\t\t};\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create PKCS#12 key for integrity checking\r\n\t\tsequence = sequence.then(() => makePKCS12B2Key(this, parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Import HMAC key\r\n\t\t// noinspection JSCheckFunctionSignatures\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tthis.importKey(\"raw\",\r\n\t\t\t\tnew Uint8Array(result),\r\n\t\t\t\thmacAlgorithm,\r\n\t\t\t\tfalse,\r\n\t\t\t\t[\"verify\"])\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make signed HMAC value\r\n\t\tsequence = sequence.then(\r\n\t\t\tresult =>\r\n\t\t\t\tthis.verify(hmacAlgorithm, result, new Uint8Array(parameters.signatureToVerify), new Uint8Array(parameters.contentToVerify)),\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get signature parameters by analyzing private key algorithm\r\n\t * @param {Object} privateKey The private key user would like to use\r\n\t * @param {string} [hashAlgorithm=\"SHA-1\"] Hash algorithm user would like to use\r\n\t * @return {Promise.<T>|Promise}\r\n\t */\r\n\tgetSignatureParameters(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Check hashing algorithm\r\n\t\tconst oid = this.getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\tif(oid === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tconst signatureAlgorithm = new AlgorithmIdentifier();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm\r\n\t\tconst parameters = this.getAlgorithmParameters(privateKey.algorithm.name, \"sign\");\r\n\t\tparameters.algorithm.hash.name = hashAlgorithm;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Fill internal structures base on \"privateKey\" and \"hashAlgorithm\"\r\n\t\tswitch(privateKey.algorithm.name.toUpperCase())\r\n\t\t{\r\n\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\tcase \"ECDSA\":\r\n\t\t\t\tsignatureAlgorithm.algorithmId = this.getOIDByAlgorithm(parameters.algorithm);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Set \"saltLength\" as a length (in octets) of hash function result\r\n\t\t\t\t\tswitch(hashAlgorithm.toUpperCase())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\tparameters.algorithm.saltLength = 32;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\tparameters.algorithm.saltLength = 48;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\tparameters.algorithm.saltLength = 64;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Fill \"RSASSA_PSS_params\" object\r\n\t\t\t\t\tconst paramsObject = {};\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(hashAlgorithm.toUpperCase() !== \"SHA-1\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst hashAlgorithmOID = this.getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\t\t\t\t\tif(hashAlgorithmOID === \"\")\r\n\t\t\t\t\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tparamsObject.hashAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: hashAlgorithmOID,\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tparamsObject.maskGenAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.8\", // MGF1\r\n\t\t\t\t\t\t\talgorithmParams: paramsObject.hashAlgorithm.toSchema()\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(parameters.algorithm.saltLength !== 20)\r\n\t\t\t\t\t\tparamsObject.saltLength = parameters.algorithm.saltLength;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst pssParameters = new RSASSAPSSParams(paramsObject);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Automatically set signature algorithm\r\n\t\t\t\t\tsignatureAlgorithm.algorithmId = \"1.2.840.113549.1.1.10\";\r\n\t\t\t\t\tsignatureAlgorithm.algorithmParams = pssParameters.toSchema();\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${privateKey.algorithm.name}`);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\treturn Promise.resolve().then(() => ({\r\n\t\t\tsignatureAlgorithm,\r\n\t\t\tparameters\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Sign data with pre-defined private key\r\n\t * @param {ArrayBuffer} data Data to be signed\r\n\t * @param {Object} privateKey Private key to use\r\n\t * @param {Object} parameters Parameters for used algorithm\r\n\t * @return {Promise.<T>|Promise}\r\n\t */\r\n\tsignWithPrivateKey(data, privateKey, parameters)\r\n\t{\r\n\t\treturn this.sign(parameters.algorithm,\r\n\t\t\tprivateKey,\r\n\t\t\tnew Uint8Array(data))\r\n\t\t\t.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Special case for ECDSA algorithm\r\n\t\t\t\tif(parameters.algorithm.name === \"ECDSA\")\r\n\t\t\t\t\tresult = createCMSECDSASignature(result);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\treturn result;\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(`Signing error: ${error}`)\r\n\t\t\t);\r\n\t}\r\n\t//**********************************************************************************\r\n\tfillPublicKeyParameters(publicKeyInfo, signatureAlgorithm)\r\n\t{\r\n\t\tconst parameters = {};\r\n\t\t\r\n\t\t//region Find signer's hashing algorithm\r\n\t\tconst shaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);\r\n\t\tif(shaAlgorithm === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get information about public key algorithm and default parameters for import\r\n\t\tlet algorithmId;\r\n\t\tif(signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\")\r\n\t\t\talgorithmId = signatureAlgorithm.algorithmId;\r\n\t\telse\r\n\t\t\talgorithmId = publicKeyInfo.algorithm.algorithmId;\r\n\t\t\r\n\t\tconst algorithmObject = this.getAlgorithmByOID(algorithmId);\r\n\t\tif((\"name\" in algorithmObject) === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported public key algorithm: ${signatureAlgorithm.algorithmId}`);\r\n\t\t\r\n\t\tparameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, \"importkey\");\r\n\t\tif(\"hash\" in parameters.algorithm.algorithm)\r\n\t\t\tparameters.algorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\r\n\t\t//region Special case for ECDSA\r\n\t\tif(algorithmObject.name === \"ECDSA\")\r\n\t\t{\r\n\t\t\t//region Get information about named curve\r\n\t\t\tlet algorithmParamsChecked = false;\r\n\t\t\t\r\n\t\t\tif((\"algorithmParams\" in publicKeyInfo.algorithm) === true)\r\n\t\t\t{\r\n\t\t\t\tif(\"idBlock\" in publicKeyInfo.algorithm.algorithmParams)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((publicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1) && (publicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6))\r\n\t\t\t\t\t\talgorithmParamsChecked = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(algorithmParamsChecked === false)\r\n\t\t\t\treturn Promise.reject(\"Incorrect type for ECDSA public key parameters\");\r\n\t\t\t\r\n\t\t\tconst curveObject = this.getAlgorithmByOID(publicKeyInfo.algorithm.algorithmParams.valueBlock.toString());\r\n\t\t\tif((\"name\" in curveObject) === false)\r\n\t\t\t\treturn Promise.reject(`Unsupported named curve algorithm: ${publicKeyInfo.algorithm.algorithmParams.valueBlock.toString()}`);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tparameters.algorithm.algorithm.namedCurve = curveObject.name;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn parameters;\r\n\t}\r\n\t//**********************************************************************************\r\n\tgetPublicKey(publicKeyInfo, signatureAlgorithm, parameters = null)\r\n\t{\r\n\t\tif(parameters === null)\r\n\t\t\tparameters = this.fillPublicKeyParameters(publicKeyInfo, signatureAlgorithm);\r\n\t\t\r\n\t\tconst publicKeyInfoSchema = publicKeyInfo.toSchema();\r\n\t\tconst publicKeyInfoBuffer = publicKeyInfoSchema.toBER(false);\r\n\t\tconst publicKeyInfoView = new Uint8Array(publicKeyInfoBuffer);\r\n\t\t\r\n\t\treturn this.importKey(\"spki\",\r\n\t\t\tpublicKeyInfoView,\r\n\t\t\tparameters.algorithm.algorithm,\r\n\t\t\ttrue,\r\n\t\t\tparameters.algorithm.usages\r\n\t\t);\r\n\t}\r\n\t//**********************************************************************************\r\n\tverifyWithPublicKey(data, signature, publicKeyInfo, signatureAlgorithm, shaAlgorithm = null)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find signer's hashing algorithm\r\n\t\tif(shaAlgorithm === null)\r\n\t\t{\r\n\t\t\tshaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);\r\n\t\t\tif(shaAlgorithm === \"\")\r\n\t\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);\r\n\t\t\t\r\n\t\t\t//region Import public key\r\n\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\tthis.getPublicKey(publicKeyInfo, signatureAlgorithm));\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tconst parameters = {};\r\n\t\t\t\r\n\t\t\t//region Get information about public key algorithm and default parameters for import\r\n\t\t\tlet algorithmId;\r\n\t\t\tif(signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\")\r\n\t\t\t\talgorithmId = signatureAlgorithm.algorithmId;\r\n\t\t\telse\r\n\t\t\t\talgorithmId = publicKeyInfo.algorithm.algorithmId;\r\n\t\t\t\r\n\t\t\tconst algorithmObject = this.getAlgorithmByOID(algorithmId);\r\n\t\t\tif((\"name\" in algorithmObject) === \"\")\r\n\t\t\t\treturn Promise.reject(`Unsupported public key algorithm: ${signatureAlgorithm.algorithmId}`);\r\n\t\t\t\r\n\t\t\tparameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, \"importkey\");\r\n\t\t\tif(\"hash\" in parameters.algorithm.algorithm)\r\n\t\t\t\tparameters.algorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\t\r\n\t\t\t//region Special case for ECDSA\r\n\t\t\tif(algorithmObject.name === \"ECDSA\")\r\n\t\t\t{\r\n\t\t\t\t//region Get information about named curve\r\n\t\t\t\tlet algorithmParamsChecked = false;\r\n\t\t\t\t\r\n\t\t\t\tif((\"algorithmParams\" in publicKeyInfo.algorithm) === true)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(\"idBlock\" in publicKeyInfo.algorithm.algorithmParams)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif((publicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1) && (publicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6))\r\n\t\t\t\t\t\t\talgorithmParamsChecked = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(algorithmParamsChecked === false)\r\n\t\t\t\t\treturn Promise.reject(\"Incorrect type for ECDSA public key parameters\");\r\n\t\t\t\t\r\n\t\t\t\tconst curveObject = this.getAlgorithmByOID(publicKeyInfo.algorithm.algorithmParams.valueBlock.toString());\r\n\t\t\t\tif((\"name\" in curveObject) === false)\r\n\t\t\t\t\treturn Promise.reject(`Unsupported named curve algorithm: ${publicKeyInfo.algorithm.algorithmParams.valueBlock.toString()}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tparameters.algorithm.algorithm.namedCurve = curveObject.name;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Import public key\r\n\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\tthis.getPublicKey(publicKeyInfo, null, parameters));\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Verify signature\r\n\t\tsequence = sequence.then(publicKey =>\r\n\t\t{\r\n\t\t\t//region Get default algorithm parameters for verification\r\n\t\t\tconst algorithm = this.getAlgorithmParameters(publicKey.algorithm.name, \"verify\");\r\n\t\t\tif(\"hash\" in algorithm.algorithm)\r\n\t\t\t\talgorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Special case for ECDSA signatures\r\n\t\t\tlet signatureValue = signature.valueBlock.valueHex;\r\n\t\t\t\r\n\t\t\tif(publicKey.algorithm.name === \"ECDSA\")\r\n\t\t\t{\r\n\t\t\t\tconst asn1 = asn1js.fromBER(signatureValue);\r\n\t\t\t\t// noinspection JSCheckFunctionSignatures\r\n\t\t\t\tsignatureValue = createECDSASignatureFromCMS(asn1.result);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Special case for RSA-PSS\r\n\t\t\tif(publicKey.algorithm.name === \"RSA-PSS\")\r\n\t\t\t{\r\n\t\t\t\tlet pssParameters;\r\n\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tpssParameters = new RSASSAPSSParams({ schema: signatureAlgorithm.algorithmParams });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject(ex);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(\"saltLength\" in pssParameters)\r\n\t\t\t\t\talgorithm.algorithm.saltLength = pssParameters.saltLength;\r\n\t\t\t\telse\r\n\t\t\t\t\talgorithm.algorithm.saltLength = 20;\r\n\t\t\t\t\r\n\t\t\t\tlet hashAlgo = \"SHA-1\";\r\n\t\t\t\t\r\n\t\t\t\tif(\"hashAlgorithm\" in pssParameters)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst hashAlgorithm = this.getAlgorithmByOID(pssParameters.hashAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Unrecognized hash algorithm: ${pssParameters.hashAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\r\n\t\t\t\t\thashAlgo = hashAlgorithm.name;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\talgorithm.algorithm.hash.name = hashAlgo;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn this.verify(algorithm.algorithm,\r\n\t\t\t\tpublicKey,\r\n\t\t\t\tnew Uint8Array(signatureValue),\r\n\t\t\t\tnew Uint8Array(data)\r\n\t\t\t);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}