{"version":3,"sources":["../src/EncryptedData.js"],"names":["asn1js","EncryptedData","constructor","parameters","version","defaultValues","encryptedContentInfo","unprotectedAttrs","fromSchema","schema","memberName","EncryptedContentInfo","Error","compareWithDefault","memberValue","contentType","contentEncryptionAlgorithm","encryptedContent","length","names","Sequence","name","blockName","value","Integer","Constructed","optional","idBlock","tagClass","tagNumber","Repeated","Attribute","asn1","compareSchema","verified","result","valueBlock","valueDec","Array","from","element","toSchema","outputArray","push","toJSON","_object","encrypt","Object","Promise","reject","engine","subtle","encryptEncryptedContentInfo","then","decrypt","decryptEncryptedContentInfo"],"mappings":"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","file":"EncryptedData.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport { getEngine } from \"./common.js\";\r\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\r\nimport Attribute from \"./Attribute.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class EncryptedData\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for EncryptedData class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", EncryptedData.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {EncryptedContentInfo}\r\n\t\t * @desc encryptedContentInfo\r\n\t\t */\r\n\t\tthis.encryptedContentInfo = getParametersValue(parameters, \"encryptedContentInfo\", EncryptedData.defaultValues(\"encryptedContentInfo\"));\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Attribute>}\r\n\t\t\t * @desc unprotectedAttrs\r\n\t\t\t */\r\n\t\t\tthis.unprotectedAttrs = getParametersValue(parameters, \"unprotectedAttrs\", EncryptedData.defaultValues(\"unprotectedAttrs\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"encryptedContentInfo\":\r\n\t\t\t\treturn new EncryptedContentInfo();\r\n\t\t\tcase \"unprotectedAttrs\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncryptedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === 0);\r\n\t\t\tcase \"encryptedContentInfo\":\r\n\t\t\t\treturn ((EncryptedContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\r\n\t\t\t\t(EncryptedContentInfo.compareWithDefault(\"contentEncryptionAlgorithm\", memberValue.contentEncryptionAlgorithm)) &&\r\n\t\t\t\t(EncryptedContentInfo.compareWithDefault(\"encryptedContent\", memberValue.encryptedContent)));\r\n\t\t\tcase \"unprotectedAttrs\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncryptedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * EncryptedData ::= SEQUENCE {\r\n\t *    version CMSVersion,\r\n\t *    encryptedContentInfo EncryptedContentInfo,\r\n\t *    unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [encryptedContentInfo]\r\n\t\t * @property {string} [unprotectedAttrs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tEncryptedContentInfo.schema(names.encryptedContentInfo || {}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.unprotectedAttrs || \"\"),\r\n\t\t\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"encryptedContentInfo\",\r\n\t\t\t\"unprotectedAttrs\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tEncryptedData.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tencryptedContentInfo: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"encryptedContentInfo\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tunprotectedAttrs: \"unprotectedAttrs\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for EncryptedData\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.encryptedContentInfo = new EncryptedContentInfo({ schema: asn1.result.encryptedContentInfo });\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in asn1.result)\r\n\t\t\tthis.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, element => new Attribute({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\toutputArray.push(this.encryptedContentInfo.toSchema());\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.unprotectedAttrs, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version,\r\n\t\t\tencryptedContentInfo: this.encryptedContentInfo.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in this)\r\n\t\t\t_object.unprotectedAttrs = Array.from(this.unprotectedAttrs, element => element.toJSON());\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create a new CMS Encrypted Data content\r\n\t * @param {Object} parameters Parameters neccessary for encryption\r\n\t * @returns {Promise}\r\n\t */\r\n\tencrypt(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get cryptographic engine\r\n\t\tconst engine = getEngine();\r\n\t\tif(typeof engine === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to initialize cryptographic engine\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Set \"contentType\" parameter\r\n\t\tparameters.contentType = \"1.2.840.113549.1.7.1\"; // \"data\"\r\n\t\t//endregion\r\n\t\t\r\n\t\tif(\"encryptEncryptedContentInfo\" in engine.subtle)\r\n\t\t{\r\n\t\t\treturn engine.subtle.encryptEncryptedContentInfo(parameters).then(result =>\r\n\t\t\t{\r\n\t\t\t\tthis.encryptedContentInfo = result;\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\treturn Promise.reject(`No support for \"encryptEncryptedContentInfo\" in current crypto engine ${engine.name}`);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create a new CMS Encrypted Data content\r\n\t * @param {Object} parameters Parameters neccessary for encryption\r\n\t */\r\n\tdecrypt(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get cryptographic engine\r\n\t\tconst engine = getEngine();\r\n\t\tif(typeof engine === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to initialize cryptographic engine\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Set \"encryptedContentInfo\" value\r\n\t\tparameters.encryptedContentInfo = this.encryptedContentInfo;\r\n\t\t//endregion\r\n\t\t\r\n\t\tif(\"decryptEncryptedContentInfo\" in engine.subtle)\r\n\t\t\treturn engine.subtle.decryptEncryptedContentInfo(parameters);\r\n\t\t\r\n\t\treturn Promise.reject(`No support for \"decryptEncryptedContentInfo\" in current crypto engine ${engine.name}`);\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}