{"version":3,"sources":["../src/PBKDF2Params.js"],"names":["asn1js","PBKDF2Params","constructor","parameters","salt","defaultValues","iterationCount","keyLength","prf","fromSchema","schema","memberName","AlgorithmIdentifier","algorithmId","algorithmParams","Null","Error","names","Sequence","name","blockName","value","Choice","OctetString","saltPrimitive","saltConstructed","Integer","optional","asn1","compareSchema","verified","result","valueBlock","valueDec","toSchema","outputArray","push","isEqual","toJSON","_object"],"mappings":"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","file":"PBKDF2Params.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC2898\r\n */\r\nexport default class PBKDF2Params\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PBKDF2Params class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc salt\r\n\t\t */\r\n\t\tthis.salt = getParametersValue(parameters, \"salt\", PBKDF2Params.defaultValues(\"salt\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc iterationCount\r\n\t\t */\r\n\t\tthis.iterationCount = getParametersValue(parameters, \"iterationCount\", PBKDF2Params.defaultValues(\"iterationCount\"));\r\n\t\t\r\n\t\tif(\"keyLength\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number}\r\n\t\t\t * @desc keyLength\r\n\t\t\t */\r\n\t\t\tthis.keyLength = getParametersValue(parameters, \"keyLength\", PBKDF2Params.defaultValues(\"keyLength\"));\r\n\t\t\r\n\t\tif(\"prf\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {AlgorithmIdentifier}\r\n\t\t\t * @desc prf\r\n\t\t\t */\r\n\t\t\tthis.prf = getParametersValue(parameters, \"prf\", PBKDF2Params.defaultValues(\"prf\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"salt\":\r\n\t\t\t\treturn {};\r\n\t\t\tcase \"iterationCount\":\r\n\t\t\t\treturn (-1);\r\n\t\t\tcase \"keyLength\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"prf\":\r\n\t\t\t\treturn new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: \"1.3.14.3.2.26\", // SHA-1\r\n\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t});\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PBKDF2Params class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PBKDF2-params ::= SEQUENCE {\r\n\t *    salt CHOICE {\r\n\t *        specified OCTET STRING,\r\n\t *        otherSource AlgorithmIdentifier },\r\n\t *  iterationCount INTEGER (1..MAX),\r\n\t *  keyLength INTEGER (1..MAX) OPTIONAL,\r\n\t *  prf AlgorithmIdentifier\r\n\t *    DEFAULT { algorithm hMAC-SHA1, parameters NULL } }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [saltPrimitive]\r\n\t\t * @property {string} [saltConstructed]\r\n\t\t * @property {string} [iterationCount]\r\n\t\t * @property {string} [keyLength]\r\n\t\t * @property {string} [prf]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.OctetString({ name: (names.saltPrimitive || \"\") }),\r\n\t\t\t\t\t\tAlgorithmIdentifier.schema(names.saltConstructed || {})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.iterationCount || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({\r\n\t\t\t\t\tname: (names.keyLength || \"\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.prf || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"salt\",\r\n\t\t\t\"iterationCount\",\r\n\t\t\t\"keyLength\",\r\n\t\t\t\"prf\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPBKDF2Params.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tsaltPrimitive: \"salt\",\r\n\t\t\t\t\tsaltConstructed: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"salt\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\titerationCount: \"iterationCount\",\r\n\t\t\t\t\tkeyLength: \"keyLength\",\r\n\t\t\t\t\tprf: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"prf\",\r\n\t\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PBKDF2Params\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.salt = asn1.result.salt;\r\n\t\tthis.iterationCount = asn1.result.iterationCount.valueBlock.valueDec;\r\n\r\n\t\tif(\"keyLength\" in asn1.result)\r\n\t\t\tthis.keyLength = asn1.result.keyLength.valueBlock.valueDec;\r\n\r\n\t\tif(\"prf\" in asn1.result)\r\n\t\t\tthis.prf = new AlgorithmIdentifier({ schema: asn1.result.prf });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence \r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(this.salt);\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.iterationCount }));\r\n\t\t\r\n\t\tif(\"keyLength\" in this)\r\n\t\t{\r\n\t\t\tif(PBKDF2Params.defaultValues(\"keyLength\") !== this.keyLength)\r\n\t\t\t\toutputArray.push(new asn1js.Integer({ value: this.keyLength }));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"prf\" in this)\r\n\t\t{\r\n\t\t\tif(PBKDF2Params.defaultValues(\"prf\").isEqual(this.prf) === false)\r\n\t\t\t\toutputArray.push(this.prf.toSchema());\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object \r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tsalt: this.salt.toJSON(),\r\n\t\t\titerationCount: this.iterationCount\r\n\t\t};\r\n\t\t\r\n\t\tif(\"keyLength\" in this)\r\n\t\t{\r\n\t\t\tif(PBKDF2Params.defaultValues(\"keyLength\") !== this.keyLength)\r\n\t\t\t\t_object.keyLength = this.keyLength;\r\n\t\t}\r\n\t\t\r\n\t\tif(\"prf\" in this)\r\n\t\t{\r\n\t\t\tif(PBKDF2Params.defaultValues(\"prf\").isEqual(this.prf) === false)\r\n\t\t\t\t_object.prf = this.prf.toJSON();\r\n\t\t}\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}