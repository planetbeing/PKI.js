{"version":3,"sources":["../src/MacData.js"],"names":["asn1js","MacData","constructor","parameters","mac","defaultValues","macSalt","iterations","fromSchema","schema","memberName","DigestInfo","OctetString","Error","compareWithDefault","memberValue","digestAlgorithm","digest","isEqual","names","Sequence","name","blockName","optional","value","Integer","asn1","compareSchema","verified","result","valueBlock","valueDec","toSchema","outputArray","push","toJSON","output"],"mappings":"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","file":"MacData.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport DigestInfo from \"./DigestInfo.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class MacData \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for MacData class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {DigestInfo}\r\n\t\t * @desc mac\r\n\t\t */\r\n\t\tthis.mac = getParametersValue(parameters, \"mac\", MacData.defaultValues(\"mac\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc macSalt\r\n\t\t */\r\n\t\tthis.macSalt = getParametersValue(parameters, \"macSalt\", MacData.defaultValues(\"macSalt\"));\r\n\t\t\r\n\t\tif(\"iterations\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number}\r\n\t\t\t * @desc iterations\r\n\t\t\t */\r\n\t\t\tthis.iterations = getParametersValue(parameters, \"iterations\", MacData.defaultValues(\"iterations\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"mac\":\r\n\t\t\t\treturn new DigestInfo();\r\n\t\t\tcase \"macSalt\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"iterations\":\r\n\t\t\t\treturn 1;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for MacData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"mac\":\r\n\t\t\t\treturn ((DigestInfo.compareWithDefault(\"digestAlgorithm\", memberValue.digestAlgorithm)) &&\r\n\t\t\t\t(DigestInfo.compareWithDefault(\"digest\", memberValue.digest)));\r\n\t\t\tcase \"macSalt\":\r\n\t\t\t\treturn (memberValue.isEqual(MacData.defaultValues(memberName)));\r\n\t\t\tcase \"iterations\":\r\n\t\t\t\treturn (memberValue === MacData.defaultValues(memberName));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for MacData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * MacData ::= SEQUENCE {\r\n\t *    mac \t\tDigestInfo,\r\n\t *    macSalt       OCTET STRING,\r\n\t *    iterations\tINTEGER DEFAULT 1\r\n\t *    -- Note: The default is for historical reasons and its use is\r\n\t *    -- deprecated. A higher value, like 1024 is recommended.\r\n\t *    }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [optional]\r\n\t\t * @property {string} [mac]\r\n\t\t * @property {string} [macSalt]\r\n\t\t * @property {string} [iterations]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\toptional: (names.optional || true),\r\n\t\t\tvalue: [\r\n\t\t\t\tDigestInfo.schema(names.mac || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"mac\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.macSalt || \"macSalt\") }),\r\n\t\t\t\tnew asn1js.Integer({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.iterations || \"iterations\")\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"mac\",\r\n\t\t\t\"macSalt\",\r\n\t\t\t\"iterations\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tMacData.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tmac: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"mac\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmacSalt: \"macSalt\",\r\n\t\t\t\t\titerations: \"iterations\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for MacData\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.mac = new DigestInfo({ schema: asn1.result.mac });\r\n\t\tthis.macSalt = asn1.result.macSalt;\r\n\t\t\r\n\t\tif(\"iterations\" in asn1.result)\r\n\t\t\tthis.iterations = asn1.result.iterations.valueBlock.valueDec;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tconst outputArray = [\r\n\t\t\tthis.mac.toSchema(),\r\n\t\t\tthis.macSalt\r\n\t\t];\r\n\t\t\r\n\t\tif(\"iterations\" in this)\r\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.iterations }));\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst output = {\r\n\t\t\tmac: this.mac.toJSON(),\r\n\t\t\tmacSalt: this.macSalt.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"iterations\" in this)\r\n\t\t\toutput.iterations = this.iterations.toJSON();\r\n\t\t\r\n\t\treturn output;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}