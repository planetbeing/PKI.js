{"version":3,"sources":["../src/KEKRecipientInfo.js"],"names":["asn1js","KEKRecipientInfo","constructor","parameters","version","defaultValues","kekid","keyEncryptionAlgorithm","encryptedKey","preDefinedKEK","fromSchema","schema","memberName","KEKIdentifier","AlgorithmIdentifier","OctetString","ArrayBuffer","Error","compareWithDefault","memberValue","keyIdentifier","algorithmId","isEqual","byteLength","names","Sequence","name","blockName","value","Integer","asn1","compareSchema","verified","result","valueBlock","valueDec","toSchema","toJSON"],"mappings":"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","file":"KEKRecipientInfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport KEKIdentifier from \"./KEKIdentifier.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class KEKRecipientInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for KEKRecipientInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", KEKRecipientInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {KEKIdentifier}\r\n\t\t * @desc kekid\r\n\t\t */\r\n\t\tthis.kekid = getParametersValue(parameters, \"kekid\", KEKRecipientInfo.defaultValues(\"kekid\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc keyEncryptionAlgorithm\r\n\t\t */\r\n\t\tthis.keyEncryptionAlgorithm = getParametersValue(parameters, \"keyEncryptionAlgorithm\", KEKRecipientInfo.defaultValues(\"keyEncryptionAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc encryptedKey\r\n\t\t */\r\n\t\tthis.encryptedKey = getParametersValue(parameters, \"encryptedKey\", KEKRecipientInfo.defaultValues(\"encryptedKey\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc preDefinedKEK KEK using to encrypt CEK\r\n\t\t */\r\n\t\tthis.preDefinedKEK = getParametersValue(parameters, \"preDefinedKEK\", KEKRecipientInfo.defaultValues(\"preDefinedKEK\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"kekid\":\r\n\t\t\t\treturn new KEKIdentifier();\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"preDefinedKEK\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KEKRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"KEKRecipientInfo\":\r\n\t\t\t\treturn (memberValue === KEKRecipientInfo.defaultValues(\"version\"));\r\n\t\t\tcase \"kekid\":\r\n\t\t\t\treturn ((memberValue.compareWithDefault(\"keyIdentifier\", memberValue.keyIdentifier)) &&\r\n\t\t\t\t\t\t((\"date\" in memberValue) === false) &&\r\n\t\t\t\t\t\t((\"other\" in memberValue) === false));\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn (memberValue.isEqual(KEKRecipientInfo.defaultValues(\"encryptedKey\")));\r\n\t\t\tcase \"preDefinedKEK\":\r\n\t\t\t\treturn (memberValue.byteLength === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KEKRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * KEKRecipientInfo ::= SEQUENCE {\r\n\t *    version CMSVersion,  -- always set to 4\r\n\t *    kekid KEKIdentifier,\r\n\t *    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\r\n\t *    encryptedKey EncryptedKey }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [kekid]\r\n\t\t * @property {string} [keyEncryptionAlgorithm]\r\n\t\t * @property {string} [encryptedKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tKEKIdentifier.schema(names.kekid || {}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.encryptedKey || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"kekid\",\r\n\t\t\t\"keyEncryptionAlgorithm\",\r\n\t\t\t\"encryptedKey\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tKEKRecipientInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tkekid: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"kekid\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tkeyEncryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"keyEncryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedKey: \"encryptedKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for KEKRecipientInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.kekid = new KEKIdentifier({ schema: asn1.result.kekid });\r\n\t\tthis.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\r\n\t\tthis.encryptedKey = asn1.result.encryptedKey;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\t\tthis.kekid.toSchema(),\r\n\t\t\t\tthis.keyEncryptionAlgorithm.toSchema(),\r\n\t\t\t\tthis.encryptedKey\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tversion: this.version,\r\n\t\t\tkekid: this.kekid.toJSON(),\r\n\t\t\tkeyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\r\n\t\t\tencryptedKey: this.encryptedKey.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}