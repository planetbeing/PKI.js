{"version":3,"sources":["../src/Certificate.js"],"names":["asn1js","tbsCertificate","parameters","names","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","Integer","tbsCertificateVersion","tbsCertificateSerialNumber","AlgorithmIdentifier","schema","signature","RelativeDistinguishedNames","issuer","tbsCertificateValidity","Time","notBefore","utcTimeName","generalTimeName","notAfter","subject","PublicKeyInfo","subjectPublicKeyInfo","Primitive","tbsCertificateIssuerUniqueID","tbsCertificateSubjectUniqueID","Extensions","extensions","Certificate","constructor","tbs","defaultValues","version","serialNumber","issuerUniqueID","subjectUniqueID","signatureAlgorithm","signatureValue","fromSchema","memberName","ArrayBuffer","BitString","Error","asn1","compareSchema","verified","result","valueBeforeDecode","valueBlock","valueDec","valueHex","Array","from","element","Extension","encodeTBS","outputArray","push","toSchema","encodeFlag","tbsSchema","length","fromBER","toJSON","object","byteLength","getPublicKey","subtle","getKeyHash","hashAlgorithm","crypto","Promise","reject","digest","Uint8Array","subjectPublicKey","sign","privateKey","sequence","resolve","engine","then","getSignatureParameters","toBER","signWithPrivateKey","verify","issuerCertificate","isEqual","verifyWithPublicKey"],"mappings":"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","file":"Certificate.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, bufferToHexCodes, clearProps } from \"pvutils\";\r\nimport { getCrypto, getEngine } from \"./common.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\r\nimport Time from \"./Time.js\";\r\nimport PublicKeyInfo from \"./PublicKeyInfo.js\";\r\nimport Extension from \"./Extension.js\";\r\nimport Extensions from \"./Extensions.js\";\r\n//**************************************************************************************\r\nfunction tbsCertificate(parameters = {})\r\n{\r\n\t//TBSCertificate  ::=  SEQUENCE  {\r\n\t//    version         [0]  EXPLICIT Version DEFAULT v1,\r\n\t//    serialNumber         CertificateSerialNumber,\r\n\t//    signature            AlgorithmIdentifier,\r\n\t//    issuer               Name,\r\n\t//    validity             Validity,\r\n\t//    subject              Name,\r\n\t//    subjectPublicKeyInfo SubjectPublicKeyInfo,\r\n\t//    issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,\r\n\t//                         -- If present, version MUST be v2 or v3\r\n\t//    subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,\r\n\t//                         -- If present, version MUST be v2 or v3\r\n\t//    extensions      [3]  EXPLICIT Extensions OPTIONAL\r\n\t//    -- If present, version MUST be v3\r\n\t//}\r\n\t\r\n\t/**\r\n\t * @type {Object}\r\n\t * @property {string} [blockName]\r\n\t * @property {string} [tbsCertificateVersion]\r\n\t * @property {string} [tbsCertificateSerialNumber]\r\n\t * @property {string} [signature]\r\n\t * @property {string} [issuer]\r\n\t * @property {string} [tbsCertificateValidity]\r\n\t * @property {string} [notBefore]\r\n\t * @property {string} [notAfter]\r\n\t * @property {string} [subject]\r\n\t * @property {string} [subjectPublicKeyInfo]\r\n\t * @property {string} [tbsCertificateIssuerUniqueID]\r\n\t * @property {string} [tbsCertificateSubjectUniqueID]\r\n\t * @property {string} [extensions]\r\n\t */\r\n\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\r\n\treturn (new asn1js.Sequence({\r\n\t\tname: (names.blockName || \"tbsCertificate\"),\r\n\t\tvalue: [\r\n\t\t\tnew asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Integer({ name: (names.tbsCertificateVersion || \"tbsCertificate.version\") }) // EXPLICIT integer value\r\n\t\t\t\t]\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Integer({ name: (names.tbsCertificateSerialNumber || \"tbsCertificate.serialNumber\") }),\r\n\t\t\tAlgorithmIdentifier.schema(names.signature || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertificate.signature\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tRelativeDistinguishedNames.schema(names.issuer || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertificate.issuer\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Sequence({\r\n\t\t\t\tname: (names.tbsCertificateValidity || \"tbsCertificate.validity\"),\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tTime.schema(names.notBefore || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tutcTimeName: \"tbsCertificate.notBefore\",\r\n\t\t\t\t\t\t\tgeneralTimeName: \"tbsCertificate.notBefore\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tTime.schema(names.notAfter || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tutcTimeName: \"tbsCertificate.notAfter\",\r\n\t\t\t\t\t\t\tgeneralTimeName: \"tbsCertificate.notAfter\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}),\r\n\t\t\tRelativeDistinguishedNames.schema(names.subject || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertificate.subject\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tPublicKeyInfo.schema(names.subjectPublicKeyInfo || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertificate.subjectPublicKeyInfo\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Primitive({\r\n\t\t\t\tname: (names.tbsCertificateIssuerUniqueID || \"tbsCertificate.issuerUniqueID\"),\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t}\r\n\t\t\t}), // IMPLICIT bistring value\r\n\t\t\tnew asn1js.Primitive({\r\n\t\t\t\tname: (names.tbsCertificateSubjectUniqueID || \"tbsCertificate.subjectUniqueID\"),\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t}\r\n\t\t\t}), // IMPLICIT bistring value\r\n\t\t\tnew asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [Extensions.schema(names.extensions || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"tbsCertificate.extensions\"\r\n\t\t\t\t\t}\r\n\t\t\t\t})]\r\n\t\t\t}) // EXPLICIT SEQUENCE value\r\n\t\t]\r\n\t}));\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class Certificate\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Certificate class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc ToBeSigned (TBS) part of the certificate\r\n\t\t */\r\n\t\tthis.tbs = getParametersValue(parameters, \"tbs\", Certificate.defaultValues(\"tbs\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc Version number\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", Certificate.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc Serial number of the certificate\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", Certificate.defaultValues(\"serialNumber\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc This field contains the algorithm identifier for the algorithm used by the CA to sign the certificate\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", Certificate.defaultValues(\"signature\"));\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @desc The issuer field identifies the entity that has signed and issued the certificate\r\n\t\t */\r\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", Certificate.defaultValues(\"issuer\"));\r\n\t\t/**\r\n\t\t * @type {Time}\r\n\t\t * @desc The date on which the certificate validity period begins\r\n\t\t */\r\n\t\tthis.notBefore = getParametersValue(parameters, \"notBefore\", Certificate.defaultValues(\"notBefore\"));\r\n\t\t/**\r\n\t\t * @type {Time}\r\n\t\t * @desc The date on which the certificate validity period ends\r\n\t\t */\r\n\t\tthis.notAfter = getParametersValue(parameters, \"notAfter\", Certificate.defaultValues(\"notAfter\"));\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @desc The subject field identifies the entity associated with the public key stored in the subject public key field\r\n\t\t */\r\n\t\tthis.subject = getParametersValue(parameters, \"subject\", Certificate.defaultValues(\"subject\"));\r\n\t\t/**\r\n\t\t * @type {PublicKeyInfo}\r\n\t\t * @desc This field is used to carry the public key and identify the algorithm with which the key is used\r\n\t\t */\r\n\t\tthis.subjectPublicKeyInfo = getParametersValue(parameters, \"subjectPublicKeyInfo\", Certificate.defaultValues(\"subjectPublicKeyInfo\"));\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ArrayBuffer}\r\n\t\t\t * @desc The subject and issuer unique identifiers are present in the certificate to handle the possibility of reuse of subject and/or issuer names over time\r\n\t\t\t */\r\n\t\t\tthis.issuerUniqueID = getParametersValue(parameters, \"issuerUniqueID\", Certificate.defaultValues(\"issuerUniqueID\"));\r\n\t\t\r\n\t\tif(\"subjectUniqueID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ArrayBuffer}\r\n\t\t\t * @desc The subject and issuer unique identifiers are present in the certificate to handle the possibility of reuse of subject and/or issuer names over time\r\n\t\t\t */\r\n\t\t\tthis.subjectUniqueID = getParametersValue(parameters, \"subjectUniqueID\", Certificate.defaultValues(\"subjectUniqueID\"));\r\n\t\t\r\n\t\tif(\"extensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array}\r\n\t\t\t * @desc If present, this field is a SEQUENCE of one or more certificate extensions\r\n\t\t\t */\r\n\t\t\tthis.extensions = getParametersValue(parameters, \"extensions\", Certificate.defaultValues(\"extensions\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc The signatureAlgorithm field contains the identifier for the cryptographic algorithm used by the CA to sign this certificate\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", Certificate.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @desc The signatureValue field contains a digital signature computed upon the ASN.1 DER encoded tbsCertificate\r\n\t\t */\r\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", Certificate.defaultValues(\"signatureValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"issuer\":\r\n\t\t\t\treturn new RelativeDistinguishedNames();\r\n\t\t\tcase \"notBefore\":\r\n\t\t\t\treturn new Time();\r\n\t\t\tcase \"notAfter\":\r\n\t\t\t\treturn new Time();\r\n\t\t\tcase \"subject\":\r\n\t\t\t\treturn new RelativeDistinguishedNames();\r\n\t\t\tcase \"subjectPublicKeyInfo\":\r\n\t\t\t\treturn new PublicKeyInfo();\r\n\t\t\tcase \"issuerUniqueID\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"subjectUniqueID\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signatureValue\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Certificate class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * Certificate  ::=  SEQUENCE  {\r\n\t *    tbsCertificate       TBSCertificate,\r\n\t *    signatureAlgorithm   AlgorithmIdentifier,\r\n\t *    signatureValue       BIT STRING  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [tbsCertificate]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signatureValue]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\ttbsCertificate(names.tbsCertificate),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"signatureValue\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"tbsCertificate\",\r\n\t\t\t\"tbsCertificate.extensions\",\r\n\t\t\t\"tbsCertificate.version\",\r\n\t\t\t\"tbsCertificate.serialNumber\",\r\n\t\t\t\"tbsCertificate.signature\",\r\n\t\t\t\"tbsCertificate.issuer\",\r\n\t\t\t\"tbsCertificate.notBefore\",\r\n\t\t\t\"tbsCertificate.notAfter\",\r\n\t\t\t\"tbsCertificate.subject\",\r\n\t\t\t\"tbsCertificate.subjectPublicKeyInfo\",\r\n\t\t\t\"tbsCertificate.issuerUniqueID\",\r\n\t\t\t\"tbsCertificate.subjectUniqueID\",\r\n\t\t\t\"signatureAlgorithm\",\r\n\t\t\t\"signatureValue\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertificate.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\ttbsCertificate: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\textensions: {\r\n\t\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\t\textensions: \"tbsCertificate.extensions\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Certificate\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbs = asn1.result.tbsCertificate.valueBeforeDecode;\r\n\t\t\r\n\t\tif(\"tbsCertificate.version\" in asn1.result)\r\n\t\t\tthis.version = asn1.result[\"tbsCertificate.version\"].valueBlock.valueDec;\r\n\t\tthis.serialNumber = asn1.result[\"tbsCertificate.serialNumber\"];\r\n\t\tthis.signature = new AlgorithmIdentifier({ schema: asn1.result[\"tbsCertificate.signature\"] });\r\n\t\tthis.issuer = new RelativeDistinguishedNames({ schema: asn1.result[\"tbsCertificate.issuer\"] });\r\n\t\tthis.notBefore = new Time({ schema: asn1.result[\"tbsCertificate.notBefore\"] });\r\n\t\tthis.notAfter = new Time({ schema: asn1.result[\"tbsCertificate.notAfter\"] });\r\n\t\tthis.subject = new RelativeDistinguishedNames({ schema: asn1.result[\"tbsCertificate.subject\"] });\r\n\t\tthis.subjectPublicKeyInfo = new PublicKeyInfo({ schema: asn1.result[\"tbsCertificate.subjectPublicKeyInfo\"] });\r\n\t\tif(\"tbsCertificate.issuerUniqueID\" in asn1.result)\r\n\t\t\tthis.issuerUniqueID = asn1.result[\"tbsCertificate.issuerUniqueID\"].valueBlock.valueHex;\r\n\t\tif(\"tbsCertificate.subjectUniqueID\" in asn1.result)\r\n\t\t\tthis.subjectUniqueID = asn1.result[\"tbsCertificate.subjectUniqueID\"].valueBlock.valueHex;\r\n\t\tif(\"tbsCertificate.extensions\" in asn1.result)\r\n\t\t\tthis.extensions = Array.from(asn1.result[\"tbsCertificate.extensions\"], element => new Extension({ schema: element }));\r\n\t\t\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n\t\tthis.signatureValue = asn1.result.signatureValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create ASN.1 schema for existing values of TBS part for the certificate\r\n\t */\r\n\tencodeTBS()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif((\"version\" in this) && (this.version !== Certificate.defaultValues(\"version\")))\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Integer({ value: this.version }) // EXPLICIT integer value\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\toutputArray.push(this.serialNumber);\r\n\t\toutputArray.push(this.signature.toSchema());\r\n\t\toutputArray.push(this.issuer.toSchema());\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.notBefore.toSchema(),\r\n\t\t\t\tthis.notAfter.toSchema()\r\n\t\t\t]\r\n\t\t}));\r\n\t\t\r\n\t\toutputArray.push(this.subject.toSchema());\r\n\t\toutputArray.push(this.subjectPublicKeyInfo.toSchema());\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalueHex: this.issuerUniqueID\r\n\t\t\t}));\r\n\t\t}\r\n\t\tif(\"subjectUniqueID\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t},\r\n\t\t\t\tvalueHex: this.subjectUniqueID\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"extensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [new asn1js.Sequence({\r\n\t\t\t\t\tvalue: Array.from(this.extensions, element => element.toSchema())\r\n\t\t\t\t})]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create and return output sequence\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\tlet tbsSchema = {};\r\n\t\t\r\n\t\t//region Decode stored TBS value\r\n\t\tif(encodeFlag === false)\r\n\t\t{\r\n\t\t\tif(this.tbs.length === 0) // No stored certificate TBS part\r\n\t\t\t\treturn Certificate.schema().value[0];\r\n\t\t\t\r\n\t\t\ttbsSchema = asn1js.fromBER(this.tbs).result;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create TBS schema via assembling from TBS parts\r\n\t\telse\r\n\t\t\ttbsSchema = this.encodeTBS();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\ttbsSchema,\r\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\r\n\t\t\t\tthis.signatureValue\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\ttbs: bufferToHexCodes(this.tbs, 0, this.tbs.byteLength),\r\n\t\t\tserialNumber: this.serialNumber.toJSON(),\r\n\t\t\tsignature: this.signature.toJSON(),\r\n\t\t\tissuer: this.issuer.toJSON(),\r\n\t\t\tnotBefore: this.notBefore.toJSON(),\r\n\t\t\tnotAfter: this.notAfter.toJSON(),\r\n\t\t\tsubject: this.subject.toJSON(),\r\n\t\t\tsubjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignatureValue: this.signatureValue.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif((\"version\" in this) && (this.version !== Certificate.defaultValues(\"version\")))\r\n\t\t\tobject.version = this.version;\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in this)\r\n\t\t\tobject.issuerUniqueID = bufferToHexCodes(this.issuerUniqueID, 0, this.issuerUniqueID.byteLength);\r\n\t\t\r\n\t\tif(\"subjectUniqueID\" in this)\r\n\t\t\tobject.subjectUniqueID = bufferToHexCodes(this.subjectUniqueID, 0, this.subjectUniqueID.byteLength);\r\n\t\t\r\n\t\tif(\"extensions\" in this)\r\n\t\t\tobject.extensions = Array.from(this.extensions, element => element.toJSON());\r\n\t\t\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Importing public key for current certificate\r\n\t */\r\n\tgetPublicKey(parameters = null)\r\n\t{\r\n\t\treturn getEngine().subtle.getPublicKey(this.subjectPublicKeyInfo, this.signatureAlgorithm, parameters);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get hash value for subject public key (default SHA-1)\r\n\t * @param {String} [hashAlgorithm=SHA-1] Hashing algorithm name\r\n\t */\r\n\tgetKeyHash(hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn crypto.digest({ name: hashAlgorithm }, new Uint8Array(this.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make a signature for current value from TBS section\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm=\"SHA-1\"] Hashing algorithm\r\n\t */\r\n\tsign(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Initial checking\r\n\t\t//region Check private key\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.signature = result.signatureAlgorithm;\r\n\t\t\tthis.signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.tbs = this.encodeTBS().toBER(false);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(this.tbs, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.signatureValue = new asn1js.BitString({ valueHex: result });\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tverify(issuerCertificate = null)\r\n\t{\r\n\t\t//region Global variables\r\n\t\tlet subjectPublicKeyInfo = {};\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Set correct \"subjectPublicKeyInfo\" value\r\n\t\tif(issuerCertificate !== null)\r\n\t\t\tsubjectPublicKeyInfo = issuerCertificate.subjectPublicKeyInfo;\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(this.issuer.isEqual(this.subject)) // Self-signed certificate\r\n\t\t\t\tsubjectPublicKeyInfo = this.subjectPublicKeyInfo;\r\n\t\t}\r\n\t\t\r\n\t\tif((subjectPublicKeyInfo instanceof PublicKeyInfo) === false)\r\n\t\t\treturn Promise.reject(\"Please provide issuer certificate as a parameter\");\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn getEngine().subtle.verifyWithPublicKey(this.tbs, this.signatureValue, subjectPublicKeyInfo, this.signatureAlgorithm);\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}