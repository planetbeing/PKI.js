{"version":3,"sources":["../src/AttributeCertificateV2.js"],"names":["asn1js","ObjectDigestInfo","constructor","parameters","digestedObjectType","defaultValues","otherObjectTypeID","digestAlgorithm","objectDigest","fromSchema","schema","memberName","Enumerated","ObjectIdentifier","AlgorithmIdentifier","BitString","Error","names","Sequence","name","blockName","value","optional","asn1","compareSchema","verified","result","toSchema","push","toJSON","V2Form","issuerName","baseCertificateID","objectDigestInfo","GeneralNames","IssuerSerial","Constructed","idBlock","tagClass","tagNumber","valueBlock","Holder","entityName","AttributeCertificateInfoV2","version","holder","issuer","signature","serialNumber","attrCertValidityPeriod","attributes","issuerUniqueID","extensions","Integer","AttCertValidityPeriod","Extensions","Choice","Repeated","Attribute","valueDec","Array","from","element","AttributeCertificateV2","acinfo","signatureAlgorithm","signatureValue"],"mappings":"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","file":"AttributeCertificateV2.js","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport GeneralNames from \"./GeneralNames.js\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport Attribute from \"./Attribute.js\";\nimport Extensions from \"./Extensions.js\";\nimport { AttCertValidityPeriod, IssuerSerial } from \"./AttributeCertificateV1.js\";\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport class ObjectDigestInfo\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for ObjectDigestInfo class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {Enumerated}\n\t\t * @desc digestedObjectType\n\t\t */\n\t\tthis.digestedObjectType = getParametersValue(parameters, \"digestedObjectType\", ObjectDigestInfo.defaultValues(\"digestedObjectType\"));\n\t\t\n\t\tif(\"otherObjectTypeID\" in parameters)\n\t\t\t/**\n\t\t\t * @type {ObjectIdentifier}\n\t\t\t * @desc otherObjectTypeID\n\t\t\t */\n\t\t\tthis.otherObjectTypeID = getParametersValue(parameters, \"otherObjectTypeID\", ObjectDigestInfo.defaultValues(\"otherObjectTypeID\"));\n\t\t\n\t\t/**\n\t\t * @type {AlgorithmIdentifier}\n\t\t * @desc digestAlgorithm\n\t\t */\n\t\tthis.digestAlgorithm = getParametersValue(parameters, \"digestAlgorithm\", ObjectDigestInfo.defaultValues(\"digestAlgorithm\"));\n\t\t/**\n\t\t * @type {BitString}\n\t\t * @desc objectDigest\n\t\t */\n\t\tthis.objectDigest = getParametersValue(parameters, \"objectDigest\", ObjectDigestInfo.defaultValues(\"objectDigest\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"digestedObjectType\":\n\t\t\t\treturn new asn1js.Enumerated();\n\t\t\tcase \"otherObjectTypeID\":\n\t\t\t\treturn new asn1js.ObjectIdentifier();\n\t\t\tcase \"digestAlgorithm\":\n\t\t\t\treturn new AlgorithmIdentifier();\n\t\t\tcase \"objectDigest\":\n\t\t\t\treturn new asn1js.BitString();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for ObjectDigestInfo class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * ObjectDigestInfo ::= SEQUENCE {\n\t *   digestedObjectType  ENUMERATED {\n\t *     publicKey            (0),\n\t *     publicKeyCert        (1),\n\t *     otherObjectTypes     (2) },\n\t *   -- otherObjectTypes MUST NOT\n\t *   -- be used in this profile\n\t *   otherObjectTypeID   OBJECT IDENTIFIER OPTIONAL,\n\t *   digestAlgorithm     AlgorithmIdentifier,\n\t *   objectDigest        BIT STRING\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [digestedObjectType]\n\t\t * @property {string} [otherObjectTypeID]\n\t\t * @property {string} [digestAlgorithm]\n\t\t * @property {string} [objectDigest]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Enumerated({ name: (names.digestedObjectType || \"\") }),\n\t\t\t\tnew asn1js.ObjectIdentifier({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.otherObjectTypeID || \"\")\n\t\t\t\t}),\n\t\t\t\tAlgorithmIdentifier.schema(names.digestAlgorithm || {}),\n\t\t\t\tnew asn1js.BitString({ name: (names.objectDigest || \"\") }),\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"digestedObjectType\",\n\t\t\t\"otherObjectTypeID\",\n\t\t\t\"digestAlgorithm\",\n\t\t\t\"objectDigest\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tObjectDigestInfo.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tdigestedObjectType: \"digestedObjectType\",\n\t\t\t\t\totherObjectTypeID: \"otherObjectTypeID\",\n\t\t\t\t\tdigestAlgorithm: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"digestAlgorithm\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tobjectDigest: \"objectDigest\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ObjectDigestInfo\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tthis.digestedObjectType = asn1.result.digestedObjectType;\n\t\t\n\t\tif(\"otherObjectTypeID\" in asn1.result)\n\t\t\tthis.otherObjectTypeID = asn1.result.otherObjectTypeID;\n\t\t\n\t\tthis.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.digestAlgorithm });\n\t\tthis.objectDigest = asn1.result.objectDigest;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst result = new asn1js.Sequence({\n\t\t\tvalue: [this.digestedObjectType]\n\t\t});\n\t\t\n\t\tif(\"otherObjectTypeID\" in this)\n\t\t\tresult.value.push(this.otherObjectTypeID);\n\t\t\n\t\tresult.value.push(this.digestAlgorithm.toSchema());\n\t\tresult.value.push(this.objectDigest);\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst result = {\n\t\t\tdigestedObjectType: this.digestedObjectType.toJSON()\n\t\t};\n\t\t\n\t\tif(\"otherObjectTypeID\" in this)\n\t\t\tresult.otherObjectTypeID = this.otherObjectTypeID.toJSON();\n\t\t\n\t\tresult.digestAlgorithm = this.digestAlgorithm.toJSON();\n\t\tresult.objectDigest = this.objectDigest.toJSON();\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport class V2Form\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for V2Form class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\tif(\"issuerName\" in parameters)\n\t\t\t/**\n\t\t\t * @type {GeneralNames}\n\t\t\t * @desc issuerName\n\t\t\t */\n\t\t\tthis.issuerName = getParametersValue(parameters, \"issuerName\", V2Form.defaultValues(\"issuerName\"));\n\t\t\n\t\tif(\"baseCertificateID\" in parameters)\n\t\t\t/**\n\t\t\t * @type {IssuerSerial}\n\t\t\t * @desc baseCertificateID\n\t\t\t */\n\t\t\tthis.baseCertificateID = getParametersValue(parameters, \"baseCertificateID\", V2Form.defaultValues(\"baseCertificateID\"));\n\t\t\n\t\tif(\"objectDigestInfo\" in parameters)\n\t\t\t/**\n\t\t\t * @type {ObjectDigestInfo}\n\t\t\t * @desc objectDigestInfo\n\t\t\t */\n\t\t\tthis.objectDigestInfo = getParametersValue(parameters, \"objectDigestInfo\", V2Form.defaultValues(\"objectDigestInfo\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"issuerName\":\n\t\t\t\treturn new GeneralNames();\n\t\t\tcase \"baseCertificateID\":\n\t\t\t\treturn new IssuerSerial();\n\t\t\tcase \"objectDigestInfo\":\n\t\t\t\treturn new ObjectDigestInfo();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for V2Form class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * V2Form ::= SEQUENCE {\n\t *   issuerName            GeneralNames  OPTIONAL,\n\t *   baseCertificateID     [0] IssuerSerial  OPTIONAL,\n\t *   objectDigestInfo      [1] ObjectDigestInfo  OPTIONAL\n\t *     -- issuerName MUST be present in this profile\n\t *     -- baseCertificateID and objectDigestInfo MUST NOT\n\t *     -- be present in this profile\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [issuerName]\n\t\t * @property {string} [baseCertificateID]\n\t\t * @property {string} [objectDigestInfo]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tGeneralNames.schema({\n\t\t\t\t\tnames: {\n\t\t\t\t\t\tblockName: names.issuerName\n\t\t\t\t\t}\n\t\t\t\t}, true),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.baseCertificateID || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: IssuerSerial.schema().valueBlock.value\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.objectDigestInfo || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: ObjectDigestInfo.schema().valueBlock.value\n\t\t\t\t})\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"issuerName\",\n\t\t\t\"baseCertificateID\",\n\t\t\t\"objectDigestInfo\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tV2Form.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tissuerName: \"issuerName\",\n\t\t\t\t\tbaseCertificateID: \"baseCertificateID\",\n\t\t\t\t\tobjectDigestInfo: \"objectDigestInfo\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for V2Form\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tif(\"issuerName\" in asn1.result)\n\t\t\tthis.issuerName = new GeneralNames({ schema: asn1.result.issuerName });\n\t\t\n\t\tif(\"baseCertificateID\" in asn1.result)\n\t\t{\n\t\t\tthis.baseCertificateID = new IssuerSerial({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.baseCertificateID.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t\n\t\tif(\"objectDigestInfo\" in asn1.result)\n\t\t{\n\t\t\tthis.objectDigestInfo = new ObjectDigestInfo({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.objectDigestInfo.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst result = new asn1js.Sequence();\n\t\t\n\t\tif(\"issuerName\" in this)\n\t\t\tresult.valueBlock.value.push(this.issuerName.toSchema());\n\t\t\n\t\tif(\"baseCertificateID\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: this.baseCertificateID.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(\"objectDigestInfo\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalue: this.objectDigestInfo.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn result;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst result = {};\n\t\t\n\t\tif(\"issuerName\" in this)\n\t\t\tresult.issuerName = this.issuerName.toJSON();\n\t\t\n\t\tif(\"baseCertificateID\" in this)\n\t\t\tresult.baseCertificateID = this.baseCertificateID.toJSON();\n\t\t\n\t\tif(\"objectDigestInfo\" in this)\n\t\t\tresult.objectDigestInfo = this.objectDigestInfo.toJSON();\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport class Holder\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for Holder class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\tif(\"baseCertificateID\" in parameters)\n\t\t\t/**\n\t\t\t * @type {IssuerSerial}\n\t\t\t * @desc baseCertificateID\n\t\t\t */\n\t\t\tthis.baseCertificateID = getParametersValue(parameters, \"baseCertificateID\", Holder.defaultValues(\"baseCertificateID\"));\n\t\t\n\t\tif(\"entityName\" in parameters)\n\t\t\t/**\n\t\t\t * @type {GeneralNames}\n\t\t\t * @desc entityName\n\t\t\t */\n\t\t\tthis.entityName = getParametersValue(parameters, \"entityName\", Holder.defaultValues(\"entityName\"));\n\t\t\n\t\tif(\"objectDigestInfo\" in parameters)\n\t\t\t/**\n\t\t\t * @type {ObjectDigestInfo}\n\t\t\t * @desc objectDigestInfo\n\t\t\t */\n\t\t\tthis.objectDigestInfo = getParametersValue(parameters, \"objectDigestInfo\", Holder.defaultValues(\"objectDigestInfo\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"baseCertificateID\":\n\t\t\t\treturn new IssuerSerial();\n\t\t\tcase \"entityName\":\n\t\t\t\treturn new GeneralNames();\n\t\t\tcase \"objectDigestInfo\":\n\t\t\t\treturn new ObjectDigestInfo();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for Holder class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * Holder ::= SEQUENCE {\n\t *   baseCertificateID   [0] IssuerSerial OPTIONAL,\n\t *       -- the issuer and serial number of\n\t *       -- the holder's Public Key Certificate\n\t *   entityName          [1] GeneralNames OPTIONAL,\n\t *       -- the name of the claimant or role\n\t *   objectDigestInfo    [2] ObjectDigestInfo OPTIONAL\n\t *       -- used to directly authenticate the holder,\n\t *       -- for example, an executable\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [baseCertificateID]\n\t\t * @property {string} [entityName]\n\t\t * @property {string} [objectDigestInfo]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.baseCertificateID || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: IssuerSerial.schema().valueBlock.value\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.entityName || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\ttagNumber: 1 // [2]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: GeneralNames.schema().valueBlock.value\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.objectDigestInfo || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3,\n\t\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: ObjectDigestInfo.schema().valueBlock.value\n\t\t\t\t})\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"baseCertificateID\",\n\t\t\t\"entityName\",\n\t\t\t\"objectDigestInfo\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tHolder.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tbaseCertificateID: \"baseCertificateID\",\n\t\t\t\t\tentityName: \"entityName\",\n\t\t\t\t\tobjectDigestInfo: \"objectDigestInfo\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Holder\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tif(\"baseCertificateID\" in asn1.result)\n\t\t{\n\t\t\tthis.baseCertificateID = new IssuerSerial({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.baseCertificateID.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t\n\t\tif(\"entityName\" in asn1.result)\n\t\t{\n\t\t\tthis.entityName = new GeneralNames({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.entityName.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t\n\t\tif(\"objectDigestInfo\" in asn1.result)\n\t\t{\n\t\t\tthis.objectDigestInfo = new ObjectDigestInfo({\n\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\tvalue: asn1.result.objectDigestInfo.valueBlock.value\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst result = new asn1js.Sequence();\n\t\t\n\t\tif(\"baseCertificateID\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: this.baseCertificateID.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(\"entityName\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalue: this.entityName.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(\"objectDigestInfo\" in this)\n\t\t{\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3,\n\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t},\n\t\t\t\tvalue: this.objectDigestInfo.toSchema().valueBlock.value\n\t\t\t}));\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst result = {};\n\t\t\n\t\tif(\"baseCertificateID\" in this)\n\t\t\tresult.baseCertificateID = this.baseCertificateID.toJSON();\n\t\t\n\t\tif(\"entityName\" in this)\n\t\t\tresult.entityName = this.entityName.toJSON();\n\t\t\n\t\tif(\"objectDigestInfo\" in this)\n\t\t\tresult.objectDigestInfo = this.objectDigestInfo.toJSON();\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport class AttributeCertificateInfoV2\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for AttributeCertificateInfoV2 class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {Number}\n\t\t * @desc version\n\t\t */\n\t\tthis.version = getParametersValue(parameters, \"version\", AttributeCertificateInfoV2.defaultValues(\"version\"));\n\t\t/**\n\t\t * @type {Holder}\n\t\t * @desc holder\n\t\t */\n\t\tthis.holder = getParametersValue(parameters, \"holder\", AttributeCertificateInfoV2.defaultValues(\"holder\"));\n\t\t/**\n\t\t * @type {GeneralNames|V2Form}\n\t\t * @desc issuer\n\t\t */\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", AttributeCertificateInfoV2.defaultValues(\"issuer\"));\n\t\t/**\n\t\t * @type {AlgorithmIdentifier}\n\t\t * @desc signature\n\t\t */\n\t\tthis.signature = getParametersValue(parameters, \"signature\", AttributeCertificateInfoV2.defaultValues(\"signature\"));\n\t\t/**\n\t\t * @type {Integer}\n\t\t * @desc serialNumber\n\t\t */\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", AttributeCertificateInfoV2.defaultValues(\"serialNumber\"));\n\t\t/**\n\t\t * @type {AttCertValidityPeriod}\n\t\t * @desc attrCertValidityPeriod\n\t\t */\n\t\tthis.attrCertValidityPeriod = getParametersValue(parameters, \"attrCertValidityPeriod\", AttributeCertificateInfoV2.defaultValues(\"attrCertValidityPeriod\"));\n\t\t/**\n\t\t * @type {Array.<Attribute>}\n\t\t * @desc attributes\n\t\t */\n\t\tthis.attributes = getParametersValue(parameters, \"attributes\", AttributeCertificateInfoV2.defaultValues(\"attributes\"));\n\t\t\n\t\tif(\"issuerUniqueID\" in parameters)\n\t\t\t/**\n\t\t\t * @type {BitString}\n\t\t\t * @desc issuerUniqueID\n\t\t\t */\n\t\t\tthis.issuerUniqueID = getParametersValue(parameters, \"issuerUniqueID\", AttributeCertificateInfoV2.defaultValues(\"issuerUniqueID\"));\n\t\t\n\t\tif(\"extensions\" in parameters)\n\t\t\t/**\n\t\t\t * @type {Extensions}\n\t\t\t * @desc extensions\n\t\t\t */\n\t\t\tthis.extensions = getParametersValue(parameters, \"extensions\", AttributeCertificateInfoV2.defaultValues(\"extensions\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"version\":\n\t\t\t\treturn 1;\n\t\t\tcase \"holder\":\n\t\t\t\treturn new Holder();\n\t\t\tcase \"issuer\":\n\t\t\t\treturn {};\n\t\t\tcase \"signature\":\n\t\t\t\treturn new AlgorithmIdentifier();\n\t\t\tcase \"serialNumber\":\n\t\t\t\treturn new asn1js.Integer();\n\t\t\tcase \"attrCertValidityPeriod\":\n\t\t\t\treturn new AttCertValidityPeriod();\n\t\t\tcase \"attributes\":\n\t\t\t\treturn [];\n\t\t\tcase \"issuerUniqueID\":\n\t\t\t\treturn new asn1js.BitString();\n\t\t\tcase \"extensions\":\n\t\t\t\treturn new Extensions();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for AttributeCertificateInfoV2 class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * AttributeCertificateInfoV2 ::= SEQUENCE {\n\t *   version                 AttCertVersion, -- version is v2\n\t *   holder                  Holder,\n\t *   issuer                  AttCertIssuer,\n\t *   signature               AlgorithmIdentifier,\n\t *   serialNumber            CertificateSerialNumber,\n\t *   attrCertValidityPeriod  AttCertValidityPeriod,\n\t *   attributes              SEQUENCE OF Attribute,\n\t *   issuerUniqueID          UniqueIdentifier OPTIONAL,\n\t *   extensions              Extensions OPTIONAL\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [issuer]\n\t\t * @property {string} [serialNumber]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\n\t\t\t\tHolder.schema(names.holder || {}),\n\t\t\t\tnew asn1js.Choice({\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tGeneralNames.schema({\n\t\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\t\tblockName: (names.issuer || \"\")\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\t\t\tname: (names.issuer || \"\"),\n\t\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tvalue: V2Form.schema().valueBlock.value\n\t\t\t\t\t\t})\n\t\t\t\t\t]\n\t\t\t\t}),\n\t\t\t\tAlgorithmIdentifier.schema(names.signature || {}),\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") }),\n\t\t\t\tAttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}),\n\t\t\t\tnew asn1js.Sequence({\n\t\t\t\t\tname: (names.attributes || \"\"),\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tnew asn1js.Repeated({\n\t\t\t\t\t\t\tvalue: Attribute.schema()\n\t\t\t\t\t\t})\n\t\t\t\t\t]\n\t\t\t\t}),\n\t\t\t\tnew asn1js.BitString({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tname: (names.issuerUniqueID || \"\")\n\t\t\t\t}),\n\t\t\t\tExtensions.schema(names.extensions || {}, true)\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"version\",\n\t\t\t\"holder\",\n\t\t\t\"issuer\",\n\t\t\t\"signature\",\n\t\t\t\"serialNumber\",\n\t\t\t\"attrCertValidityPeriod\",\n\t\t\t\"attributes\",\n\t\t\t\"issuerUniqueID\",\n\t\t\t\"extensions\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tAttributeCertificateInfoV2.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tversion: \"version\",\n\t\t\t\t\tholder: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"holder\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tissuer: \"issuer\",\n\t\t\t\t\tsignature: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"signature\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tserialNumber: \"serialNumber\",\n\t\t\t\t\tattrCertValidityPeriod: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"attrCertValidityPeriod\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tattributes: \"attributes\",\n\t\t\t\t\tissuerUniqueID: \"issuerUniqueID\",\n\t\t\t\t\textensions: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"extensions\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeCertificateInfoV2\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\n\t\tthis.holder = new Holder({ schema: asn1.result.holder });\n\t\t\n\t\tswitch(asn1.result.issuer.idBlock.tagClass)\n\t\t{\n\t\t\tcase 3: // V2Form\n\t\t\t\tthis.issuer = new V2Form({\n\t\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\t\tvalue: asn1.result.issuer.valueBlock.value\n\t\t\t\t\t})\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 1: // GeneralNames (should not be used)\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Incorect value for 'issuer' in AttributeCertificateInfoV2\");\n\t\t}\n\t\t\n\t\tthis.signature = new AlgorithmIdentifier({ schema: asn1.result.signature });\n\t\tthis.serialNumber = asn1.result.serialNumber;\n\t\tthis.attrCertValidityPeriod = new AttCertValidityPeriod({ schema: asn1.result.attrCertValidityPeriod });\n\t\tthis.attributes = Array.from(asn1.result.attributes.valueBlock.value, element => new Attribute({ schema: element }));\n\t\t\n\t\tif(\"issuerUniqueID\" in asn1.result)\n\t\t\tthis.issuerUniqueID = asn1.result.issuerUniqueID;\n\t\t\n\t\tif(\"extensions\" in asn1.result)\n\t\t\tthis.extensions = new Extensions({ schema: asn1.result.extensions });\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst result = new asn1js.Sequence({\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Integer({ value: this.version }),\n\t\t\t\tthis.holder.toSchema(),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: this.issuer.toSchema().valueBlock.value\n\t\t\t\t}),\n\t\t\t\tthis.signature.toSchema(),\n\t\t\t\tthis.serialNumber,\n\t\t\t\tthis.attrCertValidityPeriod.toSchema(),\n\t\t\t\tnew asn1js.Sequence({\n\t\t\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\n\t\t\t\t})\n\t\t\t]\n\t\t});\n\t\t\n\t\tif(\"issuerUniqueID\" in this)\n\t\t\tresult.valueBlock.value.push(this.issuerUniqueID);\n\t\t\n\t\tif(\"extensions\" in this)\n\t\t\tresult.valueBlock.value.push(this.extensions.toSchema());\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst result = {\n\t\t\tversion: this.version,\n\t\t\tholder: this.holder.toJSON(),\n\t\t\tissuer: this.issuer.toJSON(),\n\t\t\tsignature: this.signature.toJSON(),\n\t\t\tserialNumber: this.serialNumber.toJSON(),\n\t\t\tattrCertValidityPeriod: this.attrCertValidityPeriod.toJSON(),\n\t\t\tattributes: Array.from(this.attributes, element => element.toJSON())\n\t\t};\n\t\t\n\t\tif(\"issuerUniqueID\" in this)\n\t\t\tresult.issuerUniqueID = this.issuerUniqueID.toJSON();\n\t\t\n\t\tif(\"extensions\" in this)\n\t\t\tresult.extensions = this.extensions.toJSON();\n\t\t\n\t\treturn result;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC5755\n */\nexport default class AttributeCertificateV2\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for AttributeCertificateV2 class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {AttributeCertificateInfoV2}\n\t\t * @desc acinfo\n\t\t */\n\t\tthis.acinfo = getParametersValue(parameters, \"acinfo\", AttributeCertificateV2.defaultValues(\"acinfo\"));\n\t\t/**\n\t\t * @type {AlgorithmIdentifier}\n\t\t * @desc signatureAlgorithm\n\t\t */\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", AttributeCertificateV2.defaultValues(\"signatureAlgorithm\"));\n\t\t/**\n\t\t * @type {BitString}\n\t\t * @desc signatureValue\n\t\t */\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", AttributeCertificateV2.defaultValues(\"signatureValue\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"acinfo\":\n\t\t\t\treturn new AttributeCertificateInfoV2();\n\t\t\tcase \"signatureAlgorithm\":\n\t\t\t\treturn new AlgorithmIdentifier();\n\t\t\tcase \"signatureValue\":\n\t\t\t\treturn new asn1js.BitString();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for AttributeCertificateV2 class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * AttributeCertificate ::= SEQUENCE {\n\t *   acinfo               AttributeCertificateInfoV2,\n\t *   signatureAlgorithm   AlgorithmIdentifier,\n\t *   signatureValue       BIT STRING\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {Object} [acinfo]\n\t\t * @property {Object} [signatureAlgorithm]\n\t\t * @property {string} [signatureValue]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tAttributeCertificateInfoV2.schema(names.acinfo || {}),\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"\") })\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"acinfo\",\n\t\t\t\"signatureAlgorithm\",\n\t\t\t\"signatureValue\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tAttributeCertificateV2.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tacinfo: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"acinfo\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tsignatureAlgorithm: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tsignatureValue: \"signatureValue\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeCertificateV2\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tthis.acinfo = new AttributeCertificateInfoV2({ schema: asn1.result.acinfo });\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\n\t\tthis.signatureValue = asn1.result.signatureValue;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: [\n\t\t\t\tthis.acinfo.toSchema(),\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\n\t\t\t\tthis.signatureValue\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\treturn {\n\t\t\tacinfo: this.acinfo.toJSON(),\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\n\t\t\tsignatureValue: this.signatureValue.toJSON()\n\t\t};\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n"]}