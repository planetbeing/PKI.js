{"version":3,"sources":["../src/CertificateRevocationList.js"],"names":["asn1js","tbsCertList","parameters","names","Sequence","name","blockName","value","Integer","optional","tbsCertListVersion","AlgorithmIdentifier","schema","signature","RelativeDistinguishedNames","issuer","Time","tbsCertListThisUpdate","utcTimeName","generalTimeName","tbsCertListNextUpdate","Repeated","tbsCertListRevokedCertificates","Extensions","Constructed","idBlock","tagClass","tagNumber","crlExtensions","CertificateRevocationList","constructor","tbs","defaultValues","version","thisUpdate","nextUpdate","revokedCertificates","signatureAlgorithm","signatureValue","fromSchema","memberName","ArrayBuffer","BitString","Error","asn1","compareSchema","verified","result","valueBeforeDecode","valueBlock","valueDec","Array","from","element","RevokedCertificate","encodeTBS","outputArray","push","toSchema","encodeFlag","tbsSchema","length","fromBER","toJSON","object","byteLength","isCertificateRevoked","certificate","isEqual","revokedCertificate","userCertificate","serialNumber","sign","privateKey","hashAlgorithm","Promise","reject","sequence","resolve","engine","then","subtle","getSignatureParameters","toBER","signWithPrivateKey","valueHex","verify","subjectPublicKeyInfo","issuerCertificate","subject","publicKeyInfo","extensions","extension","critical","verifyWithPublicKey"],"mappings":"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","file":"CertificateRevocationList.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, bufferToHexCodes, clearProps } from \"pvutils\";\r\nimport { getEngine } from \"./common.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\r\nimport Time from \"./Time.js\";\r\nimport RevokedCertificate from \"./RevokedCertificate.js\";\r\nimport Extensions from \"./Extensions.js\";\r\n//**************************************************************************************\r\nfunction tbsCertList(parameters = {})\r\n{\r\n\t//TBSCertList  ::=  SEQUENCE  {\r\n\t//    version                 Version OPTIONAL,\r\n\t//                                 -- if present, MUST be v2\r\n\t//    signature               AlgorithmIdentifier,\r\n\t//    issuer                  Name,\r\n\t//    thisUpdate              Time,\r\n\t//    nextUpdate              Time OPTIONAL,\r\n\t//    revokedCertificates     SEQUENCE OF SEQUENCE  {\r\n\t//        userCertificate         CertificateSerialNumber,\r\n\t//        revocationDate          Time,\r\n\t//        crlEntryExtensions      Extensions OPTIONAL\r\n\t//        -- if present, version MUST be v2\r\n\t//    }  OPTIONAL,\r\n\t//    crlExtensions           [0]  EXPLICIT Extensions OPTIONAL\r\n\t//    -- if present, version MUST be v2\r\n\t//}\r\n\t\r\n\t/**\r\n\t * @type {Object}\r\n\t * @property {string} [blockName]\r\n\t * @property {string} [tbsCertListVersion]\r\n\t * @property {string} [signature]\r\n\t * @property {string} [issuer]\r\n\t * @property {string} [tbsCertListThisUpdate]\r\n\t * @property {string} [tbsCertListNextUpdate]\r\n\t * @property {string} [tbsCertListRevokedCertificates]\r\n\t * @property {string} [crlExtensions]\r\n\t */\r\n\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\r\n\treturn (new asn1js.Sequence({\r\n\t\tname: (names.blockName || \"tbsCertList\"),\r\n\t\tvalue: [\r\n\t\t\tnew asn1js.Integer({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tname: (names.tbsCertListVersion || \"tbsCertList.version\"),\r\n\t\t\t\tvalue: 2\r\n\t\t\t}), // EXPLICIT integer value (v2)\r\n\t\t\tAlgorithmIdentifier.schema(names.signature || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertList.signature\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tRelativeDistinguishedNames.schema(names.issuer || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertList.issuer\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tTime.schema(names.tbsCertListThisUpdate || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tutcTimeName: \"tbsCertList.thisUpdate\",\r\n\t\t\t\t\tgeneralTimeName: \"tbsCertList.thisUpdate\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tTime.schema(names.tbsCertListNextUpdate || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tutcTimeName: \"tbsCertList.nextUpdate\",\r\n\t\t\t\t\tgeneralTimeName: \"tbsCertList.nextUpdate\"\r\n\t\t\t\t}\r\n\t\t\t}, true),\r\n\t\t\tnew asn1js.Sequence({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\tname: (names.tbsCertListRevokedCertificates || \"tbsCertList.revokedCertificates\"),\r\n\t\t\t\t\t\tvalue: new asn1js.Sequence({\r\n\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\tnew asn1js.Integer(),\r\n\t\t\t\t\t\t\t\tTime.schema(),\r\n\t\t\t\t\t\t\t\tExtensions.schema({}, true)\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [Extensions.schema(names.crlExtensions || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"tbsCertList.extensions\"\r\n\t\t\t\t\t}\r\n\t\t\t\t})]\r\n\t\t\t}) // EXPLICIT SEQUENCE value\r\n\t\t]\r\n\t}));\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class CertificateRevocationList {\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Attribute class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc tbs\r\n\t\t */\r\n\t\tthis.tbs = getParametersValue(parameters, \"tbs\", CertificateRevocationList.defaultValues(\"tbs\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", CertificateRevocationList.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", CertificateRevocationList.defaultValues(\"signature\"));\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @desc issuer\r\n\t\t */\r\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", CertificateRevocationList.defaultValues(\"issuer\"));\r\n\t\t/**\r\n\t\t * @type {Time}\r\n\t\t * @desc thisUpdate\r\n\t\t */\r\n\t\tthis.thisUpdate = getParametersValue(parameters, \"thisUpdate\", CertificateRevocationList.defaultValues(\"thisUpdate\"));\r\n\t\t\r\n\t\tif(\"nextUpdate\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Time}\r\n\t\t\t * @desc nextUpdate\r\n\t\t\t */\r\n\t\t\tthis.nextUpdate = getParametersValue(parameters, \"nextUpdate\", CertificateRevocationList.defaultValues(\"nextUpdate\"));\r\n\t\t\r\n\t\tif(\"revokedCertificates\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<RevokedCertificate>}\r\n\t\t\t * @desc revokedCertificates\r\n\t\t\t */\r\n\t\t\tthis.revokedCertificates = getParametersValue(parameters, \"revokedCertificates\", CertificateRevocationList.defaultValues(\"revokedCertificates\"));\r\n\t\t\r\n\t\tif(\"crlExtensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Extensions}\r\n\t\t\t * @desc crlExtensions\r\n\t\t\t */\r\n\t\t\tthis.crlExtensions = getParametersValue(parameters, \"crlExtensions\", CertificateRevocationList.defaultValues(\"crlExtensions\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", CertificateRevocationList.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @desc signatureValue\r\n\t\t */\r\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", CertificateRevocationList.defaultValues(\"signatureValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 1;\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"issuer\":\r\n\t\t\t\treturn new RelativeDistinguishedNames();\r\n\t\t\tcase \"thisUpdate\":\r\n\t\t\t\treturn new Time();\r\n\t\t\tcase \"nextUpdate\":\r\n\t\t\t\treturn new Time();\r\n\t\t\tcase \"revokedCertificates\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"crlExtensions\":\r\n\t\t\t\treturn new Extensions();\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signatureValue\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertificateRevocationList class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * CertificateList  ::=  SEQUENCE  {\r\n\t *    tbsCertList          TBSCertList,\r\n\t *    signatureAlgorithm   AlgorithmIdentifier,\r\n\t *    signatureValue       BIT STRING  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signatureValue]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"CertificateList\"),\r\n\t\t\tvalue: [\r\n\t\t\t\ttbsCertList(parameters),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"signatureValue\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"tbsCertList\",\r\n\t\t\t\"tbsCertList.version\",\r\n\t\t\t\"tbsCertList.signature\",\r\n\t\t\t\"tbsCertList.issuer\",\r\n\t\t\t\"tbsCertList.thisUpdate\",\r\n\t\t\t\"tbsCertList.nextUpdate\",\r\n\t\t\t\"tbsCertList.revokedCertificates\",\r\n\t\t\t\"tbsCertList.extensions\",\r\n\t\t\t\"signatureAlgorithm\",\r\n\t\t\t\"signatureValue\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertificateRevocationList.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertificateRevocationList\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\t// noinspection JSUnresolvedVariable\r\n\t\tthis.tbs = asn1.result.tbsCertList.valueBeforeDecode;\r\n\t\t\r\n\t\tif(\"tbsCertList.version\" in asn1.result)\r\n\t\t\tthis.version = asn1.result[\"tbsCertList.version\"].valueBlock.valueDec;\r\n\t\tthis.signature = new AlgorithmIdentifier({ schema: asn1.result[\"tbsCertList.signature\"] });\r\n\t\tthis.issuer = new RelativeDistinguishedNames({ schema: asn1.result[\"tbsCertList.issuer\"] });\r\n\t\tthis.thisUpdate = new Time({ schema: asn1.result[\"tbsCertList.thisUpdate\"] });\r\n\t\tif(\"tbsCertList.nextUpdate\" in asn1.result)\r\n\t\t\tthis.nextUpdate = new Time({ schema: asn1.result[\"tbsCertList.nextUpdate\"] });\r\n\t\tif(\"tbsCertList.revokedCertificates\" in asn1.result)\r\n\t\t\tthis.revokedCertificates = Array.from(asn1.result[\"tbsCertList.revokedCertificates\"], element => new RevokedCertificate({ schema: element }));\r\n\t\tif(\"tbsCertList.extensions\" in asn1.result)\r\n\t\t\tthis.crlExtensions = new Extensions({ schema: asn1.result[\"tbsCertList.extensions\"] });\r\n\t\t\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n\t\tthis.signatureValue = asn1.result.signatureValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\tencodeTBS()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(this.version !== CertificateRevocationList.defaultValues(\"version\"))\r\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\r\n\t\toutputArray.push(this.signature.toSchema());\r\n\t\toutputArray.push(this.issuer.toSchema());\r\n\t\toutputArray.push(this.thisUpdate.toSchema());\r\n\t\t\r\n\t\tif(\"nextUpdate\" in this)\r\n\t\t\toutputArray.push(this.nextUpdate.toSchema());\r\n\t\t\r\n\t\tif(\"revokedCertificates\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.revokedCertificates, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"crlExtensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tthis.crlExtensions.toSchema()\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Decode stored TBS value\r\n\t\tlet tbsSchema;\r\n\t\t\r\n\t\tif(encodeFlag === false)\r\n\t\t{\r\n\t\t\tif(this.tbs.length === 0) // No stored TBS part\r\n\t\t\t\treturn CertificateRevocationList.schema();\r\n\t\t\t\r\n\t\t\ttbsSchema = asn1js.fromBER(this.tbs).result;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create TBS schema via assembling from TBS parts\r\n\t\telse\r\n\t\t\ttbsSchema = this.encodeTBS();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\ttbsSchema,\r\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\r\n\t\t\t\tthis.signatureValue\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\ttbs: bufferToHexCodes(this.tbs, 0, this.tbs.byteLength),\r\n\t\t\tsignature: this.signature.toJSON(),\r\n\t\t\tissuer: this.issuer.toJSON(),\r\n\t\t\tthisUpdate: this.thisUpdate.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignatureValue: this.signatureValue.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(this.version !== CertificateRevocationList.defaultValues(\"version\"))\r\n\t\t\tobject.version = this.version;\r\n\t\t\r\n\t\tif(\"nextUpdate\" in this)\r\n\t\t\tobject.nextUpdate = this.nextUpdate.toJSON();\r\n\t\t\r\n\t\tif(\"revokedCertificates\" in this)\r\n\t\t\tobject.revokedCertificates = Array.from(this.revokedCertificates, element => element.toJSON());\r\n\t\t\r\n\t\tif(\"crlExtensions\" in this)\r\n\t\t\tobject.crlExtensions = this.crlExtensions.toJSON();\r\n\t\t\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n\tisCertificateRevoked(certificate)\r\n\t{\r\n\t\t//region Check that issuer of the input certificate is the same with issuer of this CRL\r\n\t\tif(this.issuer.isEqual(certificate.issuer) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check that there are revoked certificates in this CRL\r\n\t\tif((\"revokedCertificates\" in this) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search for input certificate in revoked certificates array\r\n\t\tfor(const revokedCertificate of this.revokedCertificates)\r\n\t\t{\r\n\t\t\tif(revokedCertificate.userCertificate.isEqual(certificate.serialNumber))\r\n\t\t\t\treturn true;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn false;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make a signature for existing CRL data\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n\t */\r\n\tsign(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Initial checking\r\n\t\t//region Get a private key from function parameter\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.signature = result.signatureAlgorithm;\r\n\t\t\tthis.signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.tbs = this.encodeTBS().toBER(false);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(this.tbs, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.signatureValue = new asn1js.BitString({ valueHex: result });\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify existing signature\r\n\t * @param {{[issuerCertificate]: Object, [publicKeyInfo]: Object}} parameters\r\n\t * @returns {*}\r\n\t */\r\n\tverify(parameters = {})\r\n\t{\r\n\t\t//region Global variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet subjectPublicKeyInfo = -1;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get information about CRL issuer certificate\r\n\t\tif(\"issuerCertificate\" in parameters) // \"issuerCertificate\" must be of type \"Certificate\"\r\n\t\t{\r\n\t\t\tsubjectPublicKeyInfo = parameters.issuerCertificate.subjectPublicKeyInfo;\r\n\t\t\t\r\n\t\t\t// The CRL issuer name and \"issuerCertificate\" subject name are not equal\r\n\t\t\tif(this.issuer.isEqual(parameters.issuerCertificate.subject) === false)\r\n\t\t\t\treturn Promise.resolve(false);\r\n\t\t}\r\n\t\t\r\n\t\t//region In case if there is only public key during verification\r\n\t\tif(\"publicKeyInfo\" in parameters)\r\n\t\t\tsubjectPublicKeyInfo = parameters.publicKeyInfo; // Must be of type \"PublicKeyInfo\"\r\n\t\t//endregion\r\n\t\t\r\n\t\tif((\"subjectPublicKey\" in subjectPublicKeyInfo) === false)\r\n\t\t\treturn Promise.reject(\"Issuer's certificate must be provided as an input parameter\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the CRL for unknown critical extensions\r\n\t\tif(\"crlExtensions\" in this)\r\n\t\t{\r\n\t\t\tfor(const extension of this.crlExtensions.extensions)\r\n\t\t\t{\r\n\t\t\t\tif(extension.critical)\r\n\t\t\t\t{\r\n\t\t\t\t\t// We can not be sure that unknown extension has no value for CRL signature\r\n\t\t\t\t\tif((\"parsedValue\" in extension) === false)\r\n\t\t\t\t\t\treturn Promise.resolve(false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\tsequence = sequence.then(() => engine.subtle.verifyWithPublicKey(this.tbs, this.signatureValue, subjectPublicKeyInfo, this.signatureAlgorithm));\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}