{"version":3,"sources":["../src/BasicOCSPResponse.js"],"names":["asn1js","BasicOCSPResponse","constructor","parameters","tbsResponseData","defaultValues","signatureAlgorithm","signature","certs","fromSchema","schema","memberName","ResponseData","AlgorithmIdentifier","BitString","Error","compareWithDefault","memberValue","comparisonResult","tbs","responderID","producedAt","responses","responseExtensions","algorithmId","isEqual","length","names","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","Repeated","Certificate","asn1","compareSchema","verified","result","Array","from","element","toSchema","outputArray","push","toJSON","_object","getCertificateStatus","certificate","issuerCertificate","sequence","Promise","resolve","isForCertificate","status","hashesObject","certIDs","certIDPromises","response","hashAlgorithm","certID","reject","CertID","createForCertificate","then","all","id","certStatus","isConstructed","ex","sign","privateKey","engine","subtle","getSignatureParameters","toBER","signWithPrivateKey","valueHex","verify","signerCert","certIndex","trustedCerts","_this","checkCA","cert","issuer","serialNumber","isCA","extensions","extension","extnID","parsedValue","cA","crypto","RelativeDistinguishedNames","entries","index","subject","OctetString","digest","Uint8Array","subjectPublicKeyInfo","subjectPublicKey","valueBlock","results","promiseResults","additionalCerts","promiseResult","certChain","CertificateChainValidationEngine","verificationResult","error","Object","resultMessage","promiseError","verifyWithPublicKey"],"mappings":"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","file":"BasicOCSPResponse.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport { getAlgorithmByOID, getCrypto, getEngine } from \"./common.js\";\r\nimport ResponseData from \"./ResponseData.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Certificate from \"./Certificate.js\";\r\nimport CertID from \"./CertID.js\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\r\nimport CertificateChainValidationEngine from \"./CertificateChainValidationEngine.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class BasicOCSPResponse\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for BasicOCSPResponse class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ResponseData}\r\n\t\t * @desc tbsResponseData\r\n\t\t */\r\n\t\tthis.tbsResponseData = getParametersValue(parameters, \"tbsResponseData\", BasicOCSPResponse.defaultValues(\"tbsResponseData\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", BasicOCSPResponse.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @desc signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", BasicOCSPResponse.defaultValues(\"signature\"));\r\n\t\t\r\n\t\tif(\"certs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Certificate>}\r\n\t\t\t * @desc certs\r\n\t\t\t */\r\n\t\t\tthis.certs = getParametersValue(parameters, \"certs\", BasicOCSPResponse.defaultValues(\"certs\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbsResponseData\":\r\n\t\t\t\treturn new ResponseData();\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for BasicOCSPResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\t{\r\n\t\t\t\t\t// noinspection OverlyComplexBooleanExpressionJS\r\n\t\t\t\t\tlet comparisonResult = ((ResponseData.compareWithDefault(\"tbs\", memberValue.tbs)) &&\r\n\t\t\t\t\t(ResponseData.compareWithDefault(\"responderID\", memberValue.responderID)) &&\r\n\t\t\t\t\t(ResponseData.compareWithDefault(\"producedAt\", memberValue.producedAt)) &&\r\n\t\t\t\t\t(ResponseData.compareWithDefault(\"responses\", memberValue.responses)));\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(\"responseExtensions\" in memberValue)\r\n\t\t\t\t\t\tcomparisonResult = comparisonResult && (ResponseData.compareWithDefault(\"responseExtensions\", memberValue.responseExtensions));\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn comparisonResult;\r\n\t\t\t\t}\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn (memberValue.isEqual(BasicOCSPResponse.defaultValues(memberName)));\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for BasicOCSPResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * BasicOCSPResponse       ::= SEQUENCE {\r\n\t *    tbsResponseData      ResponseData,\r\n\t *    signatureAlgorithm   AlgorithmIdentifier,\r\n\t *    signature            BIT STRING,\r\n\t *    certs            [0] EXPLICIT SEQUENCE OF Certificate OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [tbsResponseData]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signature]\r\n\t\t * @property {string} [certs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"BasicOCSPResponse\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tResponseData.schema(names.tbsResponseData || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"BasicOCSPResponse.tbsResponseData\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"BasicOCSPResponse.signatureAlgorithm\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signature || \"BasicOCSPResponse.signature\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\t\tvalue: [new asn1js.Repeated({\r\n\t\t\t\t\t\t\t\tname: \"BasicOCSPResponse.certs\",\r\n\t\t\t\t\t\t\t\tvalue: Certificate.schema(names.certs || {})\r\n\t\t\t\t\t\t\t})]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"BasicOCSPResponse.tbsResponseData\",\r\n\t\t\t\"BasicOCSPResponse.signatureAlgorithm\",\r\n\t\t\t\"BasicOCSPResponse.signature\",\r\n\t\t\t\"BasicOCSPResponse.certs\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tBasicOCSPResponse.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for BasicOCSPResponse\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbsResponseData = new ResponseData({ schema: asn1.result[\"BasicOCSPResponse.tbsResponseData\"] });\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[\"BasicOCSPResponse.signatureAlgorithm\"] });\r\n\t\tthis.signature = asn1.result[\"BasicOCSPResponse.signature\"];\r\n\t\t\r\n\t\tif(\"BasicOCSPResponse.certs\" in asn1.result)\r\n\t\t\tthis.certs = Array.from(asn1.result[\"BasicOCSPResponse.certs\"], element => new Certificate({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(this.tbsResponseData.toSchema());\r\n\t\toutputArray.push(this.signatureAlgorithm.toSchema());\r\n\t\toutputArray.push(this.signature);\r\n\t\t\r\n\t\t//region Create array of certificates\r\n\t\tif(\"certs\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\tvalue: Array.from(this.certs, element => element.toSchema())\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\ttbsResponseData: this.tbsResponseData.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignature: this.signature.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"certs\" in this)\r\n\t\t\t_object.certs = Array.from(this.certs, element => element.toJSON());\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get OCSP response status for specific certificate\r\n\t * @param {Certificate} certificate Certificate to be checked\r\n\t * @param {Certificate} issuerCertificate Certificate of issuer for certificate to be checked\r\n\t * @returns {Promise}\r\n\t */\r\n\tgetCertificateStatus(certificate, issuerCertificate)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst result = {\r\n\t\t\tisForCertificate: false,\r\n\t\t\tstatus: 2 // 0 = good, 1 = revoked, 2 = unknown\r\n\t\t};\r\n\t\t\r\n\t\tconst hashesObject = {};\r\n\t\t\r\n\t\tconst certIDs = [];\r\n\t\tconst certIDPromises = [];\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create all \"certIDs\" for input certificates\r\n\t\tfor(const response of this.tbsResponseData.responses)\r\n\t\t{\r\n\t\t\tconst hashAlgorithm = getAlgorithmByOID(response.certID.hashAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\treturn Promise.reject(`Wrong CertID hashing algorithm: ${response.certID.hashAlgorithm.algorithmId}`);\r\n\t\t\t\r\n\t\t\tif((hashAlgorithm.name in hashesObject) === false)\r\n\t\t\t{\r\n\t\t\t\thashesObject[hashAlgorithm.name] = 1;\r\n\t\t\t\t\r\n\t\t\t\tconst certID = new CertID();\r\n\t\t\t\t\r\n\t\t\t\tcertIDs.push(certID);\r\n\t\t\t\tcertIDPromises.push(certID.createForCertificate(certificate, {\r\n\t\t\t\t\thashAlgorithm: hashAlgorithm.name,\r\n\t\t\t\t\tissuerCertificate\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tPromise.all(certIDPromises)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Compare all response's \"certIDs\" with identifiers for input certificate\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tfor(const response of this.tbsResponseData.responses)\r\n\t\t\t{\r\n\t\t\t\tfor(const id of certIDs)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(response.certID.isEqual(id))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult.isForCertificate = true;\r\n\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tswitch(response.certStatus.idBlock.isConstructed)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcase true:\r\n\t\t\t\t\t\t\t\t\tif(response.certStatus.idBlock.tagNumber === 1)\r\n\t\t\t\t\t\t\t\t\t\tresult.status = 1; // revoked\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tcase false:\r\n\t\t\t\t\t\t\t\t\tswitch(response.certStatus.idBlock.tagNumber)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase 0: // good\r\n\t\t\t\t\t\t\t\t\t\t\tresult.status = 0;\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase 2: // unknown\r\n\t\t\t\t\t\t\t\t\t\t\tresult.status = 2;\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make signature for current OCSP Basic Response\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm=\"SHA-1\"] Hashing algorithm. Default SHA-1\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Initial checking\r\n\t\t//region Get a private key from function parameter\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.tbsResponseData.tbs = this.tbsResponseData.toSchema(true).toBER(false);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(this.tbsResponseData.tbs, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.signature = new asn1js.BitString({ valueHex: result });\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify existing OCSP Basic Response\r\n\t * @param {Object} parameters Additional parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(parameters = {})\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet signerCert = null;\r\n\t\t\r\n\t\tlet certIndex = -1;\r\n\t\t\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet trustedCerts = [];\r\n\t\t\r\n\t\tconst _this = this;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check amount of certificates\r\n\t\tif((\"certs\" in this) === false)\r\n\t\t\treturn Promise.reject(\"No certificates attached to the BasicOCSPResponce\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get input values\r\n\t\tif(\"trustedCerts\" in parameters)\r\n\t\t\ttrustedCerts = parameters.trustedCerts;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Aux functions\r\n\t\t/**\r\n\t\t * Check CA flag for the certificate\r\n\t\t * @param {Certificate} cert Certificate to find CA flag for\r\n\t\t * @returns {*}\r\n\t\t */\r\n\t\tfunction checkCA(cert)\r\n\t\t{\r\n\t\t\t//region Do not include signer's certificate\r\n\t\t\tif((cert.issuer.isEqual(signerCert.issuer) === true) && (cert.serialNumber.isEqual(signerCert.serialNumber) === true))\r\n\t\t\t\treturn null;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tlet isCA = false;\r\n\t\t\t\r\n\t\t\tfor(const extension of cert.extensions)\r\n\t\t\t{\r\n\t\t\t\tif(extension.extnID === \"2.5.29.19\") // BasicConstraints\r\n\t\t\t\t{\r\n\t\t\t\t\tif(\"cA\" in extension.parsedValue)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(extension.parsedValue.cA === true)\r\n\t\t\t\t\t\t\tisCA = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(isCA)\r\n\t\t\t\treturn cert;\r\n\t\t\t\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find correct value for \"responderID\"\r\n\t\tswitch(true)\r\n\t\t{\r\n\t\t\tcase (this.tbsResponseData.responderID instanceof RelativeDistinguishedNames): // [1] Name\r\n\t\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(const [index, certificate] of _this.certs.entries())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(certificate.subject.isEqual(_this.tbsResponseData.responderID))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcertIndex = index;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tcase (this.tbsResponseData.responderID instanceof asn1js.OctetString): // [2] KeyHash\r\n\t\t\t\tsequence = sequence.then(() => Promise.all(Array.from(_this.certs, element =>\r\n\t\t\t\t\tcrypto.digest({ name: \"sha-1\" }, new Uint8Array(element.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex)))).then(results =>\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(const [index, ] of _this.certs.entries())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(isEqualBuffer(results[index], _this.tbsResponseData.responderID.valueBlock.valueHex))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcertIndex = index;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}));\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(\"Wrong value for responderID\");\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make additional verification for signer's certificate\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tif(certIndex === (-1))\r\n\t\t\t\treturn Promise.reject(\"Correct certificate was not found in OCSP response\");\r\n\t\t\t\r\n\t\t\tsignerCert = this.certs[certIndex];\r\n\t\t\t\r\n\t\t\treturn Promise.all(Array.from(_this.certs, element => checkCA(element))).then(promiseResults =>\r\n\t\t\t{\r\n\t\t\t\tconst additionalCerts = [];\r\n\t\t\t\tadditionalCerts.push(signerCert);\r\n\t\t\t\t\r\n\t\t\t\tfor(const promiseResult of promiseResults)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(promiseResult !== null)\r\n\t\t\t\t\t\tadditionalCerts.push(promiseResult);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst certChain = new CertificateChainValidationEngine({\r\n\t\t\t\t\tcerts: additionalCerts,\r\n\t\t\t\t\ttrustedCerts\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\treturn certChain.verify().then(verificationResult =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(verificationResult.result === true)\r\n\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Validation of signer's certificate failed\");\r\n\t\t\t\t}, error =>\r\n\t\t\t\t\tPromise.reject(`Validation of signer's certificate failed with error: ${((error instanceof Object) ? error.resultMessage : error)}`)\r\n\t\t\t\t);\r\n\t\t\t}, promiseError =>\r\n\t\t\t\tPromise.reject(`Error during checking certificates for CA flag: ${promiseError}`)\r\n\t\t\t);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\tsequence = sequence.then(() => engine.subtle.verifyWithPublicKey(this.tbsResponseData.tbs, this.signature, this.certs[certIndex].subjectPublicKeyInfo, this.signatureAlgorithm));\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}