{"version":3,"sources":["../src/OriginatorPublicKey.js"],"names":["asn1js","OriginatorPublicKey","constructor","parameters","algorithm","defaultValues","publicKey","fromSchema","schema","memberName","AlgorithmIdentifier","BitString","Error","compareWithDefault","memberValue","isEqual","names","Sequence","name","blockName","value","asn1","compareSchema","verified","result","toSchema","toJSON"],"mappings":"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","file":"OriginatorPublicKey.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class OriginatorPublicKey\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OriginatorPublicKey class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc algorithm\r\n\t\t */\r\n\t\tthis.algorithm = getParametersValue(parameters, \"algorithm\", OriginatorPublicKey.defaultValues(\"algorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @desc publicKey\r\n\t\t */\r\n\t\tthis.publicKey = getParametersValue(parameters, \"publicKey\", OriginatorPublicKey.defaultValues(\"publicKey\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"algorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"publicKey\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OriginatorPublicKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"algorithm\":\r\n\t\t\tcase \"publicKey\":\r\n\t\t\t\treturn (memberValue.isEqual(OriginatorPublicKey.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OriginatorPublicKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * OriginatorPublicKey ::= SEQUENCE {\r\n\t *    algorithm AlgorithmIdentifier,\r\n\t *    publicKey BIT STRING }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [algorithm]\r\n\t\t * @property {string} [publicKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.algorithm || {}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.publicKey || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"algorithm\",\r\n\t\t\t\"publicKey\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOriginatorPublicKey.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"algorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tpublicKey: \"publicKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OriginatorPublicKey\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.algorithm = new AlgorithmIdentifier({ schema: asn1.result.algorithm });\r\n\t\tthis.publicKey = asn1.result.publicKey;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.algorithm.toSchema(),\r\n\t\t\t\tthis.publicKey\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\talgorithm: this.algorithm.toJSON(),\r\n\t\t\tpublicKey: this.publicKey.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}