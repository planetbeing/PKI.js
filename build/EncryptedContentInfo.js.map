{"version":3,"sources":["../src/EncryptedContentInfo.js"],"names":["asn1js","EncryptedContentInfo","constructor","parameters","contentType","defaultValues","contentEncryptionAlgorithm","encryptedContent","idBlock","tagClass","tagNumber","isConstructed","constrString","OctetString","offset","length","valueBlock","valueHex","byteLength","pieceView","Uint8Array","_array","ArrayBuffer","_view","i","value","push","fromSchema","schema","memberName","AlgorithmIdentifier","Error","compareWithDefault","memberValue","algorithmId","isEqual","names","Sequence","name","blockName","ObjectIdentifier","Choice","Constructed","Repeated","Primitive","asn1","compareSchema","verified","result","toString","toSchema","sequenceLengthBlock","isIndefiniteForm","outputArray","encryptedValue","lenBlock","toJSON","_object"],"mappings":"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","file":"EncryptedContentInfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class EncryptedContentInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for EncryptedContentInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc contentType\r\n\t\t */\r\n\t\tthis.contentType = getParametersValue(parameters, \"contentType\", EncryptedContentInfo.defaultValues(\"contentType\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc contentEncryptionAlgorithm\r\n\t\t */\r\n\t\tthis.contentEncryptionAlgorithm = getParametersValue(parameters, \"contentEncryptionAlgorithm\", EncryptedContentInfo.defaultValues(\"contentEncryptionAlgorithm\"));\r\n\r\n\t\tif(\"encryptedContent\" in parameters)\r\n\t\t{\r\n\t\t\t/**\r\n\t\t\t * @type {OctetString}\r\n\t\t\t * @desc encryptedContent (!!!) could be contructive or primitive value (!!!)\r\n\t\t\t */\r\n\t\t\tthis.encryptedContent = parameters.encryptedContent;\r\n\t\t\t\r\n\t\t\tif((this.encryptedContent.idBlock.tagClass === 1) &&\r\n\t\t\t\t(this.encryptedContent.idBlock.tagNumber === 4))\r\n\t\t\t{\r\n\t\t\t\t//region Divide OCTETSTRING value down to small pieces\r\n\t\t\t\tif(this.encryptedContent.idBlock.isConstructed === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst constrString = new asn1js.OctetString({\r\n\t\t\t\t\t\tidBlock: { isConstructed: true },\r\n\t\t\t\t\t\tisConstructed: true\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet offset = 0;\r\n\t\t\t\t\tlet length = this.encryptedContent.valueBlock.valueHex.byteLength;\r\n\t\t\t\t\t\r\n\t\t\t\t\twhile(length > 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst pieceView = new Uint8Array(this.encryptedContent.valueBlock.valueHex, offset, ((offset + 1024) > this.encryptedContent.valueBlock.valueHex.byteLength) ? (this.encryptedContent.valueBlock.valueHex.byteLength - offset) : 1024);\r\n\t\t\t\t\t\tconst _array = new ArrayBuffer(pieceView.length);\r\n\t\t\t\t\t\tconst _view = new Uint8Array(_array);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor(let i = 0; i < _view.length; i++)\r\n\t\t\t\t\t\t\t_view[i] = pieceView[i];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconstrString.valueBlock.value.push(new asn1js.OctetString({ valueHex: _array }));\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlength -= pieceView.length;\r\n\t\t\t\t\t\toffset += pieceView.length;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.encryptedContent = constrString;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"contentType\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"contentEncryptionAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"encryptedContent\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncryptedContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"contentType\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"contentEncryptionAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"encryptedContent\":\r\n\t\t\t\treturn (memberValue.isEqual(EncryptedContentInfo.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncryptedContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * EncryptedContentInfo ::= SEQUENCE {\r\n\t *    contentType ContentType,\r\n\t *    contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier,\r\n\t *    encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL }\r\n\t *\r\n\t * Comment: Strange, but modern crypto engines create \"encryptedContent\" as \"[0] EXPLICIT EncryptedContent\"\r\n\t *\r\n\t * EncryptedContent ::= OCTET STRING\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [contentType]\r\n\t\t * @property {string} [contentEncryptionAlgorithm]\r\n\t\t * @property {string} [encryptedContent]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.contentType || \"\") }),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.contentEncryptionAlgorithm || {}),\r\n\t\t\t\t// The CHOICE we need because \"EncryptedContent\" could have either \"constructive\"\r\n\t\t\t\t// or \"primitive\" form of encoding and we need to handle both variants\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\tname: (names.encryptedContent || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\t\t\tvalue: new asn1js.OctetString()\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\t\t\tname: (names.encryptedContent || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"contentType\",\r\n\t\t\t\"contentEncryptionAlgorithm\",\r\n\t\t\t\"encryptedContent\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tEncryptedContentInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcontentType: \"contentType\",\r\n\t\t\t\t\tcontentEncryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"contentEncryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedContent: \"encryptedContent\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for EncryptedContentInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.contentType = asn1.result.contentType.valueBlock.toString();\r\n\t\tthis.contentEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.contentEncryptionAlgorithm });\r\n\r\n\t\tif(\"encryptedContent\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.encryptedContent = asn1.result.encryptedContent;\r\n\r\n\t\t\tthis.encryptedContent.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\t\tthis.encryptedContent.idBlock.tagNumber = 4; // OCTETSTRING (!!!) The value still has instance of \"in_window.org.pkijs.asn1.ASN1_CONSTRUCTED / ASN1_PRIMITIVE\"\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst sequenceLengthBlock = {\r\n\t\t\tisIndefiniteForm: false\r\n\t\t};\r\n\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.contentType }));\r\n\t\toutputArray.push(this.contentEncryptionAlgorithm.toSchema());\r\n\r\n\t\tif(\"encryptedContent\" in this)\r\n\t\t{\r\n\t\t\tsequenceLengthBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;\r\n\r\n\t\t\tconst encryptedValue = this.encryptedContent;\r\n\r\n\t\t\tencryptedValue.idBlock.tagClass = 3; // CONTEXT-SPECIFIC\r\n\t\t\tencryptedValue.idBlock.tagNumber = 0; // [0]\r\n\r\n\t\t\tencryptedValue.lenBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;\r\n\r\n\t\t\toutputArray.push(encryptedValue);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tlenBlock: sequenceLengthBlock,\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tcontentType: this.contentType,\r\n\t\t\tcontentEncryptionAlgorithm: this.contentEncryptionAlgorithm.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"encryptedContent\" in this)\r\n\t\t\t_object.encryptedContent = this.encryptedContent.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}