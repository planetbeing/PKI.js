{"version":3,"sources":["../src/RecipientIdentifier.js"],"names":["asn1js","RecipientIdentifier","constructor","parameters","variant","defaultValues","value","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","Object","keys","length","names","Choice","IssuerAndSerialNumber","blockName","Constructed","name","idBlock","tagClass","tagNumber","OctetString","asn1","compareSchema","verified","result","valueBlock","toSchema","Any","toJSON","_object"],"mappings":"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","file":"RecipientIdentifier.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class RecipientIdentifier\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RecipientIdentifier class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc variant\r\n\t\t */\r\n\t\tthis.variant = getParametersValue(parameters, \"variant\", RecipientIdentifier.defaultValues(\"variant\"));\r\n\r\n\t\tif(\"value\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @desc value\r\n\t\t\t */\r\n\t\t\tthis.value = getParametersValue(parameters, \"value\", RecipientIdentifier.defaultValues(\"value\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"variant\":\r\n\t\t\t\treturn (-1);\r\n\t\t\tcase \"value\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RecipientIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"variant\":\r\n\t\t\t\treturn (memberValue === (-1));\r\n\t\t\tcase \"values\":\r\n\t\t\t\treturn (Object.keys(memberValue).length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RecipientIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * RecipientIdentifier ::= CHOICE {\r\n\t *    issuerAndSerialNumber IssuerAndSerialNumber,\r\n\t *    subjectKeyIdentifier [0] SubjectKeyIdentifier }\r\n\t *\r\n\t * SubjectKeyIdentifier ::= OCTET STRING\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Choice({\r\n\t\t\tvalue: [\r\n\t\t\t\tIssuerAndSerialNumber.schema({\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: (names.blockName || \"\")\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.blockName || \"\"),\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.OctetString()]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"blockName\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRecipientIdentifier.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"blockName\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RecipientIdentifier\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(asn1.result.blockName.idBlock.tagClass === 1)\r\n\t\t{\r\n\t\t\tthis.variant = 1;\r\n\t\t\tthis.value = new IssuerAndSerialNumber({ schema: asn1.result.blockName });\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.variant = 2;\r\n\t\t\tthis.value = asn1.result.blockName.valueBlock.value[0];\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tswitch(this.variant)\r\n\t\t{\r\n\t\t\tcase 1:\r\n\t\t\t\treturn this.value.toSchema();\r\n\t\t\tcase 2:\r\n\t\t\t\treturn new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [this.value]\r\n\t\t\t\t});\r\n\t\t\tdefault:\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tvariant: this.variant\r\n\t\t};\r\n\r\n\t\tif((this.variant === 1) || (this.variant === 2))\r\n\t\t\t_object.value = this.value.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}