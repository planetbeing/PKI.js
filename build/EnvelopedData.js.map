{"version":3,"sources":["../src/EnvelopedData.js"],"names":["asn1js","EnvelopedData","constructor","parameters","version","defaultValues","originatorInfo","recipientInfos","encryptedContentInfo","unprotectedAttrs","fromSchema","schema","memberName","OriginatorInfo","EncryptedContentInfo","Error","compareWithDefault","memberValue","certs","certificates","length","crls","contentType","contentEncryptionAlgorithm","encryptedContent","names","Sequence","name","blockName","value","Integer","Constructed","optional","idBlock","tagClass","tagNumber","valueBlock","Set","Repeated","RecipientInfo","Attribute","asn1","compareSchema","verified","result","valueDec","Array","from","element","toSchema","outputArray","push","toJSON","_object","addRecipientByCertificate","certificate","variant","encryptionParameters","subjectPublicKeyInfo","algorithm","algorithmId","indexOf","oaepHashAlgorithm","kdfAlgorithm","kekEncryptionLength","oaepOID","hashOID","hashAlgorithm","AlgorithmIdentifier","algorithmParams","Null","rsaOAEPParams","RSAESOAEPParams","maskGenAlgorithm","keyInfo","KeyTransRecipientInfo","rid","IssuerAndSerialNumber","issuer","serialNumber","keyEncryptionAlgorithm","recipientCertificate","encryptedKey","RecipientEncryptedKey","KeyAgreeRecipientIdentifier","aesKWoid","aesKW","ecdhOID","kdf","ukmBuffer","ArrayBuffer","ukmView","Uint8Array","KeyAgreeRecipientInfo","ukm","OctetString","valueHex","recipientEncryptedKeys","RecipientEncryptedKeys","encryptedKeys","addRecipientByPreDefinedData","preDefinedData","byteLength","keyIdentifierBuffer","keyIdentifierView","keyIdentifier","hmacHashAlgorithm","iterationCount","keyEncryptionAlgorithmParams","kekOID","KEKRecipientInfo","kekid","KEKIdentifier","preDefinedKEK","pbkdf2OID","saltBuffer","saltView","hmacOID","hash","pbkdf2Params","PBKDF2Params","salt","prf","PasswordRecipientinfo","keyDerivationAlgorithm","password","encrypt","contentToEncrypt","sequence","Promise","resolve","ivBuffer","ivView","contentView","sessionKey","exportedSessionKey","recipientsPromises","_this","contentEncryptionOID","reject","crypto","then","generateKey","iv","error","exportKey","SubKeyAgreeRecipientInfo","index","currentSequence","ecdhPublicKey","ecdhPrivateKey","recipientCurve","recipientCurveLength","exportedECDHPublicKey","curveObject","ObjectIdentifier","curveOID","toString","namedCurve","publicKey","privateKey","getPublicKey","usages","deriveBits","public","aesKWAlgorithm","KWalgorithm","kwLength","kwLengthBuffer","kwLengthView","j","eccInfo","ECCCMSSharedInfo","entityUInfo","suppPubInfo","encodedInfo","toBER","ecdhAlgorithm","importKey","wrapKey","fromBER","originator","OriginatorIdentifierOrKey","OriginatorPublicKey","SubKeyTransRecipientInfo","SubKEKRecipientInfo","kekAlgorithm","SubPasswordRecipientinfo","ex","passwordView","iterations","deriveKey","i","all","decrypt","recipientIndex","decryptionParameters","recipientPrivateKey","buffer","unwrapKey","dataBuffer","isConstructed","content"],"mappings":"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","file":"EnvelopedData.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf, clearProps } from \"pvutils\";\r\nimport { getOIDByAlgorithm, getRandomValues, getCrypto, getAlgorithmByOID, kdf } from \"./common.js\";\r\nimport OriginatorInfo from \"./OriginatorInfo.js\";\r\nimport RecipientInfo from \"./RecipientInfo.js\";\r\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\r\nimport Attribute from \"./Attribute.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport RSAESOAEPParams from \"./RSAESOAEPParams.js\";\r\nimport KeyTransRecipientInfo from \"./KeyTransRecipientInfo.js\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\r\nimport RecipientEncryptedKey from \"./RecipientEncryptedKey.js\";\r\nimport KeyAgreeRecipientIdentifier from \"./KeyAgreeRecipientIdentifier.js\";\r\nimport KeyAgreeRecipientInfo from \"./KeyAgreeRecipientInfo.js\";\r\nimport RecipientEncryptedKeys from \"./RecipientEncryptedKeys.js\";\r\nimport KEKRecipientInfo from \"./KEKRecipientInfo.js\";\r\nimport KEKIdentifier from \"./KEKIdentifier.js\";\r\nimport PBKDF2Params from \"./PBKDF2Params.js\";\r\nimport PasswordRecipientinfo from \"./PasswordRecipientinfo.js\";\r\nimport ECCCMSSharedInfo from \"./ECCCMSSharedInfo.js\";\r\nimport OriginatorIdentifierOrKey from \"./OriginatorIdentifierOrKey.js\";\r\nimport OriginatorPublicKey from \"./OriginatorPublicKey.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class EnvelopedData \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for EnvelopedData class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", EnvelopedData.defaultValues(\"version\"));\r\n\t\t\r\n\t\tif(\"originatorInfo\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {OriginatorInfo}\r\n\t\t\t * @desc originatorInfo\r\n\t\t\t */\r\n\t\t\tthis.originatorInfo = getParametersValue(parameters, \"originatorInfo\", EnvelopedData.defaultValues(\"originatorInfo\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Array.<RecipientInfo>}\r\n\t\t * @desc recipientInfos\r\n\t\t */\r\n\t\tthis.recipientInfos = getParametersValue(parameters, \"recipientInfos\", EnvelopedData.defaultValues(\"recipientInfos\"));\r\n\t\t/**\r\n\t\t * @type {EncryptedContentInfo}\r\n\t\t * @desc encryptedContentInfo\r\n\t\t */\r\n\t\tthis.encryptedContentInfo = getParametersValue(parameters, \"encryptedContentInfo\", EnvelopedData.defaultValues(\"encryptedContentInfo\"));\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Attribute>}\r\n\t\t\t * @desc unprotectedAttrs\r\n\t\t\t */\r\n\t\t\tthis.unprotectedAttrs = getParametersValue(parameters, \"unprotectedAttrs\", EnvelopedData.defaultValues(\"unprotectedAttrs\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"originatorInfo\":\r\n\t\t\t\treturn new OriginatorInfo();\r\n\t\t\tcase \"recipientInfos\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"encryptedContentInfo\":\r\n\t\t\t\treturn new EncryptedContentInfo();\r\n\t\t\tcase \"unprotectedAttrs\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EnvelopedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === EnvelopedData.defaultValues(memberName));\r\n\t\t\tcase \"originatorInfo\":\r\n\t\t\t\treturn ((memberValue.certs.certificates.length === 0) && (memberValue.crls.crls.length === 0));\r\n\t\t\tcase \"recipientInfos\":\r\n\t\t\tcase \"unprotectedAttrs\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tcase \"encryptedContentInfo\":\r\n\t\t\t\treturn ((EncryptedContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\r\n\t\t\t\t(EncryptedContentInfo.compareWithDefault(\"contentEncryptionAlgorithm\", memberValue.contentEncryptionAlgorithm) &&\r\n\t\t\t\t(EncryptedContentInfo.compareWithDefault(\"encryptedContent\", memberValue.encryptedContent))));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EnvelopedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * EnvelopedData ::= SEQUENCE {\r\n\t *    version CMSVersion,\r\n\t *    originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,\r\n\t *    recipientInfos RecipientInfos,\r\n\t *    encryptedContentInfo EncryptedContentInfo,\r\n\t *    unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [originatorInfo]\r\n\t\t * @property {string} [recipientInfos]\r\n\t\t * @property {string} [encryptedContentInfo]\r\n\t\t * @property {string} [unprotectedAttrs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.originatorInfo || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: OriginatorInfo.schema().valueBlock.value\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.recipientInfos || \"\"),\r\n\t\t\t\t\t\t\tvalue: RecipientInfo.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tEncryptedContentInfo.schema(names.encryptedContentInfo || {}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.unprotectedAttrs || \"\"),\r\n\t\t\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"originatorInfo\",\r\n\t\t\t\"recipientInfos\",\r\n\t\t\t\"encryptedContentInfo\",\r\n\t\t\t\"unprotectedAttrs\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tEnvelopedData.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\toriginatorInfo: \"originatorInfo\",\r\n\t\t\t\t\trecipientInfos: \"recipientInfos\",\r\n\t\t\t\t\tencryptedContentInfo: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"encryptedContentInfo\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tunprotectedAttrs: \"unprotectedAttrs\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for EnvelopedData\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\t\r\n\t\tif(\"originatorInfo\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.originatorInfo = new OriginatorInfo({\r\n\t\t\t\tschema: new asn1js.Sequence({\r\n\t\t\t\t\tvalue: asn1.result.originatorInfo.valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tthis.recipientInfos = Array.from(asn1.result.recipientInfos, element => new RecipientInfo({ schema: element }));\r\n\t\tthis.encryptedContentInfo = new EncryptedContentInfo({ schema: asn1.result.encryptedContentInfo });\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in asn1.result)\r\n\t\t\tthis.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, element => new Attribute({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\r\n\t\tif(\"originatorInfo\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.originatorInfo.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Set({\r\n\t\t\tvalue: Array.from(this.recipientInfos, element => element.toSchema())\r\n\t\t}));\r\n\t\t\r\n\t\toutputArray.push(this.encryptedContentInfo.toSchema());\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.unprotectedAttrs, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version\r\n\t\t};\r\n\t\t\r\n\t\tif(\"originatorInfo\" in this)\r\n\t\t\t_object.originatorInfo = this.originatorInfo.toJSON();\r\n\t\t\r\n\t\t_object.recipientInfos = Array.from(this.recipientInfos, element => element.toJSON());\r\n\t\t_object.encryptedContentInfo = this.encryptedContentInfo.toJSON();\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in this)\r\n\t\t\t_object.unprotectedAttrs = Array.from(this.unprotectedAttrs, element => element.toJSON());\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Helpers function for filling \"RecipientInfo\" based on recipient's certificate.\r\n\t * Problem with WebCrypto is that for RSA certificates we have only one option - \"key transport\" and\r\n\t * for ECC certificates we also have one option - \"key agreement\". As soon as Google will implement\r\n\t * DH algorithm it would be possible to use \"key agreement\" also for RSA certificates.\r\n\t * @param {Certificate} [certificate] Recipient's certificate\r\n\t * @param {Object} [parameters] Additional parameters neccessary for \"fine tunning\" of encryption process\r\n\t * @param {number} [variant] Variant = 1 is for \"key transport\", variant = 2 is for \"key agreement\". In fact the \"variant\" is unneccessary now because Google has no DH algorithm implementation. Thus key encryption scheme would be choosen by certificate type only: \"key transport\" for RSA and \"key agreement\" for ECC certificates.\r\n\t */\r\n\taddRecipientByCertificate(certificate, parameters, variant)\r\n\t{\r\n\t\t//region Initial variables \r\n\t\tconst encryptionParameters = parameters || {};\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Check type of certificate\r\n\t\tif(certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf(\"1.2.840.113549\") !== (-1))\r\n\t\t\tvariant = 1; // For the moment it is the only variant for RSA-based certificates\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf(\"1.2.840.10045\") !== (-1))\r\n\t\t\t\tvariant = 2; // For the moment it is the only variant for ECC-based certificates\r\n\t\t\telse\r\n\t\t\t\tthrow new Error(`Unknown type of certificate's public key: ${certificate.subjectPublicKeyInfo.algorithm.algorithmId}`);\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initialize encryption parameters \r\n\t\tif((\"oaepHashAlgorithm\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.oaepHashAlgorithm = \"SHA-512\";\r\n\t\t\r\n\t\tif((\"kdfAlgorithm\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.kdfAlgorithm = \"SHA-512\";\r\n\t\t\r\n\t\tif((\"kekEncryptionLength\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.kekEncryptionLength = 256;\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Add new \"recipient\" depends on \"variant\" and certificate type \r\n\t\tswitch(variant)\r\n\t\t{\r\n\t\t\tcase 1: // Key transport scheme\r\n\t\t\t\t{\r\n\t\t\t\t//region keyEncryptionAlgorithm\r\n\t\t\t\t\tconst oaepOID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(oaepOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(\"Can not find OID for OAEP\");\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region RSAES-OAEP-params\r\n\t\t\t\t\tconst hashOID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: encryptionParameters.oaepHashAlgorithm\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(hashOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(`Unknown OAEP hash algorithm: ${encryptionParameters.oaepHashAlgorithm}`);\r\n\t\t\t\t\r\n\t\t\t\t\tconst hashAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: hashOID,\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\t\tconst rsaOAEPParams = new RSAESOAEPParams({\r\n\t\t\t\t\t\thashAlgorithm,\r\n\t\t\t\t\t\tmaskGenAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.8\", // id-mgf1\r\n\t\t\t\t\t\t\talgorithmParams: hashAlgorithm.toSchema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t});\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region KeyTransRecipientInfo\r\n\t\t\t\t\tconst keyInfo = new KeyTransRecipientInfo({\r\n\t\t\t\t\t\tversion: 0,\r\n\t\t\t\t\t\trid: new IssuerAndSerialNumber({\r\n\t\t\t\t\t\t\tissuer: certificate.issuer,\r\n\t\t\t\t\t\t\tserialNumber: certificate.serialNumber\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tkeyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: oaepOID,\r\n\t\t\t\t\t\t\talgorithmParams: rsaOAEPParams.toSchema()\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\trecipientCertificate: certificate\r\n\t\t\t\t\t// \"encryptedKey\" will be calculated in \"encrypt\" function\r\n\t\t\t\t\t});\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Final values for \"CMS_ENVELOPED_DATA\"\r\n\t\t\t\t\tthis.recipientInfos.push(new RecipientInfo({\r\n\t\t\t\t\t\tvariant: 1,\r\n\t\t\t\t\t\tvalue: keyInfo\r\n\t\t\t\t\t}));\r\n\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2: // Key agreement scheme\r\n\t\t\t\t{\r\n\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t\tconst encryptedKey = new RecipientEncryptedKey({\r\n\t\t\t\t\t\trid: new KeyAgreeRecipientIdentifier({\r\n\t\t\t\t\t\t\tvariant: 1,\r\n\t\t\t\t\t\t\tvalue: new IssuerAndSerialNumber({\r\n\t\t\t\t\t\t\t\tissuer: certificate.issuer,\r\n\t\t\t\t\t\t\t\tserialNumber: certificate.serialNumber\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t// \"encryptedKey\" will be calculated in \"encrypt\" function\r\n\t\t\t\t\t});\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region keyEncryptionAlgorithm\r\n\t\t\t\t\tconst aesKWoid = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\t\tlength: encryptionParameters.kekEncryptionLength\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(aesKWoid === \"\")\r\n\t\t\t\t\t\tthrow new Error(`Unknown length for key encryption algorithm: ${encryptionParameters.kekEncryptionLength}`);\r\n\t\t\t\t\r\n\t\t\t\t\tconst aesKW = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: aesKWoid,\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t});\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region KeyAgreeRecipientInfo\r\n\t\t\t\t\tconst ecdhOID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\tkdf: encryptionParameters.kdfAlgorithm\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(ecdhOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(`Unknown KDF algorithm: ${encryptionParameters.kdfAlgorithm}`);\r\n\t\t\t\t\r\n\t\t\t\t// In fact there is no need in so long UKM, but RFC2631\r\n\t\t\t\t// has requirement that \"UserKeyMaterial\" must be 512 bits long\r\n\t\t\t\t\tconst ukmBuffer = new ArrayBuffer(64);\r\n\t\t\t\t\tconst ukmView = new Uint8Array(ukmBuffer);\r\n\t\t\t\t\tgetRandomValues(ukmView); // Generate random values in 64 bytes long buffer\r\n\t\t\t\t\r\n\t\t\t\t\tconst keyInfo = new KeyAgreeRecipientInfo({\r\n\t\t\t\t\t\tversion: 3,\r\n\t\t\t\t\t\t// \"originator\" will be calculated in \"encrypt\" function because ephemeral key would be generated there\r\n\t\t\t\t\t\tukm: new asn1js.OctetString({ valueHex: ukmBuffer }),\r\n\t\t\t\t\t\tkeyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: ecdhOID,\r\n\t\t\t\t\t\t\talgorithmParams: aesKW.toSchema()\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\trecipientEncryptedKeys: new RecipientEncryptedKeys({\r\n\t\t\t\t\t\t\tencryptedKeys: [encryptedKey]\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\trecipientCertificate: certificate\r\n\t\t\t\t\t});\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Final values for \"CMS_ENVELOPED_DATA\"\r\n\t\t\t\t\tthis.recipientInfos.push(new RecipientInfo({\r\n\t\t\t\t\t\tvariant: 2,\r\n\t\t\t\t\t\tvalue: keyInfo\r\n\t\t\t\t\t}));\r\n\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Unknown \"variant\" value: ${variant}`);\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Add recipient based on pre-defined data like password or KEK\r\n\t * @param {ArrayBuffer} preDefinedData ArrayBuffer with pre-defined data\r\n\t * @param {Object} parameters Additional parameters neccessary for \"fine tunning\" of encryption process\r\n\t * @param {number} variant Variant = 1 for pre-defined \"key encryption key\" (KEK). Variant = 2 for password-based encryption.\r\n\t */\r\n\taddRecipientByPreDefinedData(preDefinedData, parameters, variant)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tconst encryptionParameters = parameters || {};\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check initial parameters\r\n\t\tif((preDefinedData instanceof ArrayBuffer) === false)\r\n\t\t\tthrow new Error(\"Please pass \\\"preDefinedData\\\" in ArrayBuffer type\");\r\n\t\t\r\n\t\tif(preDefinedData.byteLength === 0)\r\n\t\t\tthrow new Error(\"Pre-defined data could have zero length\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initialize encryption parameters\r\n\t\tif((\"keyIdentifier\" in encryptionParameters) === false)\r\n\t\t{\r\n\t\t\tconst keyIdentifierBuffer = new ArrayBuffer(16);\r\n\t\t\tconst keyIdentifierView = new Uint8Array(keyIdentifierBuffer);\r\n\t\t\tgetRandomValues(keyIdentifierView);\r\n\t\t\t\r\n\t\t\tencryptionParameters.keyIdentifier = keyIdentifierBuffer;\r\n\t\t}\r\n\t\t\r\n\t\tif((\"hmacHashAlgorithm\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.hmacHashAlgorithm = \"SHA-512\";\r\n\t\t\r\n\t\tif((\"iterationCount\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.iterationCount = 2048;\r\n\t\t\r\n\t\tif((\"keyEncryptionAlgorithm\" in encryptionParameters) === false)\r\n\t\t{\r\n\t\t\tencryptionParameters.keyEncryptionAlgorithm = {\r\n\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\tlength: 256\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\tif((\"keyEncryptionAlgorithmParams\" in encryptionParameters) === false)\r\n\t\t\tencryptionParameters.keyEncryptionAlgorithmParams = new asn1js.Null();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Add new recipient based on passed variant\r\n\t\tswitch(variant)\r\n\t\t{\r\n\t\t\tcase 1: // KEKRecipientInfo\r\n\t\t\t\t{\r\n\t\t\t\t//region keyEncryptionAlgorithm\r\n\t\t\t\t\tconst kekOID = getOIDByAlgorithm(encryptionParameters.keyEncryptionAlgorithm);\r\n\t\t\t\t\tif(kekOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(\"Incorrect value for \\\"keyEncryptionAlgorithm\\\"\");\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region KEKRecipientInfo\r\n\t\t\t\t\tconst keyInfo = new KEKRecipientInfo({\r\n\t\t\t\t\t\tversion: 4,\r\n\t\t\t\t\t\tkekid: new KEKIdentifier({\r\n\t\t\t\t\t\t\tkeyIdentifier: new asn1js.OctetString({ valueHex: encryptionParameters.keyIdentifier })\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tkeyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: kekOID,\r\n\t\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\t For AES-KW params are NULL, but for other algorithm could another situation.\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\talgorithmParams: encryptionParameters.keyEncryptionAlgorithmParams\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tpreDefinedKEK: preDefinedData\r\n\t\t\t\t\t// \"encryptedKey\" would be set in \"ecrypt\" function\r\n\t\t\t\t\t});\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Final values for \"CMS_ENVELOPED_DATA\"\r\n\t\t\t\t\tthis.recipientInfos.push(new RecipientInfo({\r\n\t\t\t\t\t\tvariant: 3,\r\n\t\t\t\t\t\tvalue: keyInfo\r\n\t\t\t\t\t}));\r\n\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2: // PasswordRecipientinfo\r\n\t\t\t\t{\r\n\t\t\t\t//region keyDerivationAlgorithm\r\n\t\t\t\t\tconst pbkdf2OID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"PBKDF2\"\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(pbkdf2OID === \"\")\r\n\t\t\t\t\t\tthrow new Error(\"Can not find OID for PBKDF2\");\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Salt\r\n\t\t\t\t\tconst saltBuffer = new ArrayBuffer(64);\r\n\t\t\t\t\tconst saltView = new Uint8Array(saltBuffer);\r\n\t\t\t\t\tgetRandomValues(saltView);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region HMAC-based algorithm\r\n\t\t\t\t\tconst hmacOID = getOIDByAlgorithm({\r\n\t\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\tname: encryptionParameters.hmacHashAlgorithm\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(hmacOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(`Incorrect value for \"hmacHashAlgorithm\": ${encryptionParameters.hmacHashAlgorithm}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region PBKDF2-params\r\n\t\t\t\t\tconst pbkdf2Params = new PBKDF2Params({\r\n\t\t\t\t\t\tsalt: new asn1js.OctetString({ valueHex: saltBuffer }),\r\n\t\t\t\t\t\titerationCount: encryptionParameters.iterationCount,\r\n\t\t\t\t\t\tprf: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: hmacOID,\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t});\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region keyEncryptionAlgorithm\r\n\t\t\t\t\tconst kekOID = getOIDByAlgorithm(encryptionParameters.keyEncryptionAlgorithm);\r\n\t\t\t\t\tif(kekOID === \"\")\r\n\t\t\t\t\t\tthrow new Error(\"Incorrect value for \\\"keyEncryptionAlgorithm\\\"\");\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region PasswordRecipientinfo\r\n\t\t\t\t\tconst keyInfo = new PasswordRecipientinfo({\r\n\t\t\t\t\t\tversion: 0,\r\n\t\t\t\t\t\tkeyDerivationAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: pbkdf2OID,\r\n\t\t\t\t\t\t\talgorithmParams: pbkdf2Params.toSchema()\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tkeyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: kekOID,\r\n\t\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\t For AES-KW params are NULL, but for other algorithm could be another situation.\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\talgorithmParams: encryptionParameters.keyEncryptionAlgorithmParams\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tpassword: preDefinedData\r\n\t\t\t\t\t// \"encryptedKey\" would be set in \"ecrypt\" function\r\n\t\t\t\t\t});\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Final values for \"CMS_ENVELOPED_DATA\"\r\n\t\t\t\t\tthis.recipientInfos.push(new RecipientInfo({\r\n\t\t\t\t\t\tvariant: 4,\r\n\t\t\t\t\t\tvalue: keyInfo\r\n\t\t\t\t\t}));\r\n\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Unknown value for \"variant\": ${variant}`);\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create a new CMS Enveloped Data content with encrypted data\r\n\t * @param {Object} contentEncryptionAlgorithm WebCrypto algorithm. For the moment here could be only \"AES-CBC\" or \"AES-GCM\" algorithms.\r\n\t * @param {ArrayBuffer} contentToEncrypt Content to encrypt\r\n\t * @returns {Promise}\r\n\t */\r\n\tencrypt(contentEncryptionAlgorithm, contentToEncrypt)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst ivBuffer = new ArrayBuffer(16); // For AES we need IV 16 bytes long\r\n\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\tgetRandomValues(ivView);\r\n\t\t\r\n\t\tconst contentView = new Uint8Array(contentToEncrypt);\r\n\t\t\r\n\t\tlet sessionKey;\r\n\t\tlet encryptedContent;\r\n\t\tlet exportedSessionKey;\r\n\t\t\r\n\t\tconst recipientsPromises = [];\r\n\t\t\r\n\t\tconst _this = this;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check for input parameters\r\n\t\tconst contentEncryptionOID = getOIDByAlgorithm(contentEncryptionAlgorithm);\r\n\t\tif(contentEncryptionOID === \"\")\r\n\t\t\treturn Promise.reject(\"Wrong \\\"contentEncryptionAlgorithm\\\" value\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Generate new content encryption key\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcrypto.generateKey(contentEncryptionAlgorithm, true, [\"encrypt\"]));\r\n\t\t//endregion\r\n\t\t//region Encrypt content\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tsessionKey = result;\r\n\t\t\t\r\n\t\t\treturn crypto.encrypt({\r\n\t\t\t\tname: contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\tsessionKey,\r\n\t\t\tcontentView);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error));\r\n\t\t//endregion\r\n\t\t//region Export raw content of content encryption key\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Create output OCTETSTRING with encrypted content\r\n\t\t\tencryptedContent = result;\r\n\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\treturn crypto.exportKey(\"raw\", sessionKey);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t).then(result =>\r\n\t\t{\r\n\t\t\texportedSessionKey = result;\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error));\r\n\t\t//endregion\r\n\t\t//region Append common information to CMS_ENVELOPED_DATA\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.version = 2;\r\n\t\t\tthis.encryptedContentInfo = new EncryptedContentInfo({\r\n\t\t\t\tcontentType: \"1.2.840.113549.1.7.1\", // \"data\"\r\n\t\t\t\tcontentEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: contentEncryptionOID,\r\n\t\t\t\t\talgorithmParams: new asn1js.OctetString({ valueHex: ivBuffer })\r\n\t\t\t\t}),\r\n\t\t\t\tencryptedContent: new asn1js.OctetString({ valueHex: encryptedContent })\r\n\t\t\t});\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Special sub-functions to work with each recipient's type\r\n\t\tfunction SubKeyAgreeRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t\r\n\t\t\tlet ecdhPublicKey;\r\n\t\t\tlet ecdhPrivateKey;\r\n\t\t\t\r\n\t\t\tlet recipientCurve;\r\n\t\t\tlet recipientCurveLength;\r\n\t\t\t\r\n\t\t\tlet exportedECDHPublicKey;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Get \"namedCurve\" parameter from recipient's certificate\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tconst curveObject = _this.recipientInfos[index].value.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;\r\n\t\t\t\t\r\n\t\t\t\tif((curveObject instanceof asn1js.ObjectIdentifier) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \"recipientCertificate\" for index ${index}`);\r\n\t\t\t\t\r\n\t\t\t\tconst curveOID = curveObject.valueBlock.toString();\r\n\t\t\t\t\r\n\t\t\t\tswitch(curveOID)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"1.2.840.10045.3.1.7\":\r\n\t\t\t\t\t\trecipientCurve = \"P-256\";\r\n\t\t\t\t\t\trecipientCurveLength = 256;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"1.3.132.0.34\":\r\n\t\t\t\t\t\trecipientCurve = \"P-384\";\r\n\t\t\t\t\t\trecipientCurveLength = 384;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"1.3.132.0.35\":\r\n\t\t\t\t\t\trecipientCurve = \"P-521\";\r\n\t\t\t\t\t\trecipientCurveLength = 528;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect curve OID for index ${index}`);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn recipientCurve;\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Generate ephemeral ECDH key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.generateKey({\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tnamedCurve: result\r\n\t\t\t\t},\r\n\t\t\t\ttrue,\r\n\t\t\t\t[\"deriveBits\"]),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Export public key of ephemeral ECDH key pair\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\tecdhPublicKey = result.publicKey;\r\n\t\t\t\tecdhPrivateKey = result.privateKey;\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.exportKey(\"spki\", ecdhPublicKey);\r\n\t\t\t},\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Import recipient's public key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\texportedECDHPublicKey = result;\r\n\t\t\t\t\r\n\t\t\t\treturn _this.recipientInfos[index].value.recipientCertificate.getPublicKey({\r\n\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\t\tnamedCurve: recipientCurve\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t//region Create shared secret\r\n\t\t\tcurrentSequence = currentSequence.then(result => crypto.deriveBits({\r\n\t\t\t\tname: \"ECDH\",\r\n\t\t\t\tpublic: result\r\n\t\t\t},\r\n\t\t\tecdhPrivateKey,\r\n\t\t\trecipientCurveLength),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Apply KDF function to shared secret\r\n\t\t\tcurrentSequence = currentSequence.then(\r\n\t\t\t\t/**\r\n\t\t\t\t * @param {ArrayBuffer} result\r\n\t\t\t\t */\r\n\t\t\t\tresult =>\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Get length of used AES-KW algorithm\r\n\t\t\t\t\tconst aesKWAlgorithm = new AlgorithmIdentifier({ schema: _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams });\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst KWalgorithm = getAlgorithmByOID(aesKWAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in KWalgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect OID for key encryption algorithm: ${aesKWAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Translate AES-KW length to ArrayBuffer\r\n\t\t\t\t\tlet kwLength = KWalgorithm.length;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst kwLengthBuffer = new ArrayBuffer(4);\r\n\t\t\t\t\tconst kwLengthView = new Uint8Array(kwLengthBuffer);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(let j = 3; j >= 0; j--)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tkwLengthView[j] = kwLength;\r\n\t\t\t\t\t\tkwLength >>= 8;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Create and encode \"ECC-CMS-SharedInfo\" structure\r\n\t\t\t\t\tconst eccInfo = new ECCCMSSharedInfo({\r\n\t\t\t\t\t\tkeyInfo: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: aesKWAlgorithm.algorithmId,\r\n\t\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\t Initially RFC5753 says that AES algorithms have absent parameters.\r\n\t\t\t\t\t\t\t But since early implementations all put NULL here. Thus, in order to be\r\n\t\t\t\t\t\t\t \"backward compatible\", index also put NULL here.\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tentityUInfo: _this.recipientInfos[index].value.ukm,\r\n\t\t\t\t\t\tsuppPubInfo: new asn1js.OctetString({ valueHex: kwLengthBuffer })\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst encodedInfo = eccInfo.toSchema().toBER(false);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Get SHA algorithm used together with ECDH\r\n\t\t\t\t\tconst ecdhAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in ecdhAlgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect OID for key encryption algorithm: ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn kdf(ecdhAlgorithm.kdf, result, KWalgorithm.length, encodedInfo);\r\n\t\t\t\t},\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t//region Import AES-KW key from result of KDF function\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.importKey(\"raw\", result, { name: \"AES-KW\" }, true, [\"wrapKey\"]),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Finally wrap session key by using AES-KW algorithm\r\n\t\t\tcurrentSequence = currentSequence.then(result => crypto.wrapKey(\"raw\", sessionKey, result, { name: \"AES-KW\" }),\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Append all neccessary data to current CMS_RECIPIENT_INFO object\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region OriginatorIdentifierOrKey\r\n\t\t\t\tconst asn1 = asn1js.fromBER(exportedECDHPublicKey);\r\n\t\t\t\t\t\r\n\t\t\t\tconst originator = new OriginatorIdentifierOrKey();\r\n\t\t\t\toriginator.variant = 3;\r\n\t\t\t\toriginator.value = new OriginatorPublicKey({ schema: asn1.result });\r\n\t\t\t\t// There is option when we can stay with ECParameters, but here index prefer to avoid the params\r\n\t\t\t\tif(\"algorithmParams\" in originator.value.algorithm)\r\n\t\t\t\t\tdelete originator.value.algorithm.algorithmParams;\r\n\t\t\t\t\t\r\n\t\t\t\t_this.recipientInfos[index].value.originator = originator;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t/*\r\n\t\t\t\t We will not support using of same ephemeral key for many recipients\r\n\t\t\t\t */\r\n\t\t\t\t_this.recipientInfos[index].value.recipientEncryptedKeys.encryptedKeys[0].encryptedKey = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t//endregion\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubKeyTransRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Get recipient's public key\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\t//region Get current used SHA algorithm\r\n\t\t\t\tconst schema = _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams;\r\n\t\t\t\tconst rsaOAEPParams = new RSAESOAEPParams({ schema });\r\n\t\t\t\t\r\n\t\t\t\tconst hashAlgorithm = getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\treturn _this.recipientInfos[index].value.recipientCertificate.getPublicKey({\r\n\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\tname: \"RSA-OAEP\",\r\n\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\tname: hashAlgorithm.name\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tusages: [\"encrypt\", \"wrapKey\"]\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error));\r\n\t\t\t//endregion\r\n\t\t\t//region Encrypt early exported session key on recipient's public key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.encrypt(result.algorithm, result, exportedSessionKey),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Append all neccessary data to current CMS_RECIPIENT_INFO object\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t_this.recipientInfos[index].value.encryptedKey = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t//endregion\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubKEKRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\tlet kekAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Import KEK from pre-defined data\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of \"keyEncryptionAlgorithm\"\r\n\t\t\t\tkekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in kekAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for \"keyEncryptionAlgorithm\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tnew Uint8Array(_this.recipientInfos[index].value.preDefinedKEK),\r\n\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"wrapKey\"]); // Too specific for AES-KW\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Wrap previously exported session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.wrapKey(\"raw\", sessionKey, result, kekAlgorithm),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Append all neccessary data to current CMS_RECIPIENT_INFO object\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t_this.recipientInfos[index].value.encryptedKey = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t//endregion\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubPasswordRecipientinfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\tlet pbkdf2Params;\r\n\t\t\tlet kekAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check that we have encoded \"keyDerivationAlgorithm\" plus \"PBKDF2_params\" in there\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tif((\"keyDerivationAlgorithm\" in _this.recipientInfos[index].value) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Please append encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\tif((\"algorithmParams\" in _this.recipientInfos[index].value.keyDerivationAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tpbkdf2Params = new PBKDF2Params({ schema: _this.recipientInfos[index].value.keyDerivationAlgorithm.algorithmParams });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\treturn Promise.resolve();\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tconst passwordView = new Uint8Array(_this.recipientInfos[index].value.password);\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tpasswordView,\r\n\t\t\t\t\t\"PBKDF2\",\r\n\t\t\t\t\tfalse,\r\n\t\t\t\t\t[\"deriveKey\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Derive key for \"keyEncryptionAlgorithm\"\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of \"keyEncryptionAlgorithm\"\r\n\t\t\t\tkekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in kekAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for \"keyEncryptionAlgorithm\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Get HMAC hash algorithm\r\n\t\t\t\tlet hmacHashAlgorithm = \"SHA-1\";\r\n\t\t\t\t\t\r\n\t\t\t\tif(\"prf\" in pbkdf2Params)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst algorithm = getAlgorithmByOID(pbkdf2Params.prf.algorithmId);\r\n\t\t\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect OID for HMAC hash algorithm\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\thmacHashAlgorithm = algorithm.hash.name;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Get PBKDF2 \"salt\" value\r\n\t\t\t\tconst saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t//region Get PBKDF2 iterations count\r\n\t\t\t\tconst iterations = pbkdf2Params.iterationCount;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.deriveKey({\r\n\t\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: hmacHashAlgorithm\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsalt: saltView,\r\n\t\t\t\t\titerations\r\n\t\t\t\t},\r\n\t\t\t\tresult,\r\n\t\t\t\tkekAlgorithm,\r\n\t\t\t\ttrue,\r\n\t\t\t\t[\"wrapKey\"]); // Usages are too specific for KEK algorithm\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Wrap previously exported session key (Also too specific for KEK algorithm)\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.wrapKey(\"raw\", sessionKey, result, kekAlgorithm),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Append all neccessary data to current CMS_RECIPIENT_INFO object\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region RecipientEncryptedKey\r\n\t\t\t\t_this.recipientInfos[index].value.encryptedKey = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t//endregion\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create special routines for each \"recipient\"\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tfor(let i = 0; i < this.recipientInfos.length; i++)\r\n\t\t\t{\r\n\t\t\t\t//region Initial variables\r\n\t\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\tswitch(this.recipientInfos[i].variant)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 1: // KeyTransRecipientInfo\r\n\t\t\t\t\t\tcurrentSequence = SubKeyTransRecipientInfo(i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2: // KeyAgreeRecipientInfo\r\n\t\t\t\t\t\tcurrentSequence = SubKeyAgreeRecipientInfo(i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3: // KEKRecipientInfo\r\n\t\t\t\t\t\tcurrentSequence = SubKEKRecipientInfo(i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 4: // PasswordRecipientinfo\r\n\t\t\t\t\t\tcurrentSequence = SubPasswordRecipientinfo(i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Uknown recipient type in array with index ${i}`);\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\trecipientsPromises.push(currentSequence);\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\treturn Promise.all(recipientsPromises);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Decrypt existing CMS Enveloped Data content\r\n\t * @param {number} recipientIndex Index of recipient\r\n\t * @param {Object} parameters Additional parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tdecrypt(recipientIndex, parameters)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst decryptionParameters = parameters || {};\r\n\t\t\r\n\t\tconst _this = this;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check for input parameters\r\n\t\tif((recipientIndex + 1) > this.recipientInfos.length)\r\n\t\t\treturn Promise.reject(`Maximum value for \"index\" is: ${this.recipientInfos.length - 1}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Special sub-functions to work with each recipient's type\r\n\t\tfunction SubKeyAgreeRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t\r\n\t\t\tlet recipientCurve;\r\n\t\t\tlet recipientCurveLength;\r\n\t\t\t\r\n\t\t\tlet curveOID;\r\n\t\t\t\r\n\t\t\tlet ecdhPrivateKey;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Get \"namedCurve\" parameter from recipient's certificate\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tif((\"recipientCertificate\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"recipientCertificate\\\" is mandatory for \\\"KeyAgreeRecipientInfo\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\tif((\"recipientPrivateKey\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"recipientPrivateKey\\\" is mandatory for \\\"KeyAgreeRecipientInfo\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\tconst curveObject = decryptionParameters.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;\r\n\t\t\t\t\t\r\n\t\t\t\tif((curveObject instanceof asn1js.ObjectIdentifier) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \"recipientCertificate\" for index ${index}`);\r\n\t\t\t\t\t\r\n\t\t\t\tcurveOID = curveObject.valueBlock.toString();\r\n\t\t\t\t\t\r\n\t\t\t\tswitch(curveOID)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"1.2.840.10045.3.1.7\":\r\n\t\t\t\t\t\trecipientCurve = \"P-256\";\r\n\t\t\t\t\t\trecipientCurveLength = 256;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"1.3.132.0.34\":\r\n\t\t\t\t\t\trecipientCurve = \"P-384\";\r\n\t\t\t\t\t\trecipientCurveLength = 384;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"1.3.132.0.35\":\r\n\t\t\t\t\t\trecipientCurve = \"P-521\";\r\n\t\t\t\t\t\trecipientCurveLength = 528;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect curve OID for index ${index}`);\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"pkcs8\",\r\n\t\t\t\t\tdecryptionParameters.recipientPrivateKey,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\tnamedCurve: recipientCurve\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"deriveBits\"]\r\n\t\t\t\t);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Import sender's ephemeral public key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\tecdhPrivateKey = result;\r\n\t\t\t\t\t\r\n\t\t\t\t//region Change \"OriginatorPublicKey\" if \"curve\" parameter absent\r\n\t\t\t\tif((\"algorithmParams\" in _this.recipientInfos[index].value.originator.value.algorithm) === false)\r\n\t\t\t\t\t_this.recipientInfos[index].value.originator.value.algorithm.algorithmParams = new asn1js.ObjectIdentifier({ value: curveOID });\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Create ArrayBuffer with sender's public key\r\n\t\t\t\tconst buffer = _this.recipientInfos[index].value.originator.value.toSchema().toBER(false);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"spki\",\r\n\t\t\t\t\tbuffer,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\tnamedCurve: recipientCurve\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Create shared secret\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.deriveBits({\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tpublic: result\r\n\t\t\t\t},\r\n\t\t\t\tecdhPrivateKey,\r\n\t\t\t\trecipientCurveLength),\r\n\t\t\terror =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Apply KDF function to shared secret\r\n\t\t\tcurrentSequence = currentSequence.then(\r\n\t\t\t\t/**\r\n\t\t\t\t * @param {ArrayBuffer} result\r\n\t\t\t\t */\r\n\t\t\t\tresult =>\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Get length of used AES-KW algorithm\r\n\t\t\t\t\tconst aesKWAlgorithm = new AlgorithmIdentifier({ schema: _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams });\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst KWalgorithm = getAlgorithmByOID(aesKWAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in KWalgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect OID for key encryption algorithm: ${aesKWAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Translate AES-KW length to ArrayBuffer\r\n\t\t\t\t\tlet kwLength = KWalgorithm.length;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst kwLengthBuffer = new ArrayBuffer(4);\r\n\t\t\t\t\tconst kwLengthView = new Uint8Array(kwLengthBuffer);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(let j = 3; j >= 0; j--)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tkwLengthView[j] = kwLength;\r\n\t\t\t\t\t\tkwLength >>= 8;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Create and encode \"ECC-CMS-SharedInfo\" structure\r\n\t\t\t\t\tconst eccInfo = new ECCCMSSharedInfo({\r\n\t\t\t\t\t\tkeyInfo: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: aesKWAlgorithm.algorithmId,\r\n\t\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\t Initially RFC5753 says that AES algorithms have absent parameters.\r\n\t\t\t\t\t\t\t But since early implementations all put NULL here. Thus, in order to be\r\n\t\t\t\t\t\t\t \"backward compatible\", index also put NULL here.\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tentityUInfo: _this.recipientInfos[index].value.ukm,\r\n\t\t\t\t\t\tsuppPubInfo: new asn1js.OctetString({ valueHex: kwLengthBuffer })\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst encodedInfo = eccInfo.toSchema().toBER(false);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Get SHA algorithm used together with ECDH\r\n\t\t\t\t\tconst ecdhAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in ecdhAlgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect OID for key encryption algorithm: ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\treturn kdf(ecdhAlgorithm.kdf, result, KWalgorithm.length, encodedInfo);\r\n\t\t\t\t},\r\n\t\t\t\terror =>\r\n\t\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Import AES-KW key from result of KDF function\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.importKey(\"raw\",\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\t{ name: \"AES-KW\" },\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"unwrapKey\"]),\r\n\t\t\terror => Promise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Finally unwrap session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \"contentEncryptionAlgorithm\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.unwrapKey(\"raw\",\r\n\t\t\t\t\t_this.recipientInfos[index].value.recipientEncryptedKeys.encryptedKeys[0].encryptedKey.valueBlock.valueHex,\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\t{ name: \"AES-KW\" },\r\n\t\t\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"decrypt\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubKeyTransRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Import recipient's private key\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tif((\"recipientPrivateKey\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"recipientPrivateKey\\\" is mandatory for \\\"KeyTransRecipientInfo\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Get current used SHA algorithm\r\n\t\t\t\tconst schema = _this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmParams;\r\n\t\t\t\tconst rsaOAEPParams = new RSAESOAEPParams({ schema });\r\n\t\t\t\t\t\r\n\t\t\t\tconst hashAlgorithm = getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"pkcs8\",\r\n\t\t\t\t\tdecryptionParameters.recipientPrivateKey,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: \"RSA-OAEP\",\r\n\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\tname: hashAlgorithm.name\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"decrypt\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Decrypt encrypted session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t\tcrypto.decrypt(result.algorithm,\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\t_this.recipientInfos[index].value.encryptedKey.valueBlock.valueHex\r\n\t\t\t\t), error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Import decrypted session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \"contentEncryptionAlgorithm\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"decrypt\"]\r\n\t\t\t\t);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubKEKRecipientInfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\tlet kekAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Import KEK from pre-defined data\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tif((\"preDefinedData\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"preDefinedData\\\" is mandatory for \\\"KEKRecipientInfo\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\t//region Get WebCrypto form of \"keyEncryptionAlgorithm\"\r\n\t\t\t\tkekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in kekAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for \"keyEncryptionAlgorithm\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tdecryptionParameters.preDefinedData,\r\n\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"unwrapKey\"]); // Too specific for AES-KW\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Unwrap previously exported session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \"contentEncryptionAlgorithm\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.unwrapKey(\"raw\",\r\n\t\t\t\t\t_this.recipientInfos[index].value.encryptedKey.valueBlock.valueHex,\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"decrypt\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SubPasswordRecipientinfo(index)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\tlet pbkdf2Params;\r\n\t\t\tlet kekAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\t\tcurrentSequence = currentSequence.then(() =>\r\n\t\t\t{\r\n\t\t\t\tif((\"preDefinedData\" in decryptionParameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Parameter \\\"preDefinedData\\\" is mandatory for \\\"KEKRecipientInfo\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\tif((\"keyDerivationAlgorithm\" in _this.recipientInfos[index].value) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Please append encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\tif((\"algorithmParams\" in _this.recipientInfos[index].value.keyDerivationAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tpbkdf2Params = new PBKDF2Params({ schema: _this.recipientInfos[index].value.keyDerivationAlgorithm.algorithmParams });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.importKey(\"raw\",\r\n\t\t\t\t\tdecryptionParameters.preDefinedData,\r\n\t\t\t\t\t\"PBKDF2\",\r\n\t\t\t\t\tfalse,\r\n\t\t\t\t\t[\"deriveKey\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Derive key for \"keyEncryptionAlgorithm\"\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of \"keyEncryptionAlgorithm\"\r\n\t\t\t\tkekAlgorithm = getAlgorithmByOID(_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in kekAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect OID for \"keyEncryptionAlgorithm\": ${_this.recipientInfos[index].value.keyEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Get HMAC hash algorithm\r\n\t\t\t\tlet hmacHashAlgorithm = \"SHA-1\";\r\n\t\t\t\t\t\r\n\t\t\t\tif(\"prf\" in pbkdf2Params)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst algorithm = getAlgorithmByOID(pbkdf2Params.prf.algorithmId);\r\n\t\t\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect OID for HMAC hash algorithm\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\thmacHashAlgorithm = algorithm.hash.name;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Get PBKDF2 \"salt\" value\r\n\t\t\t\tconst saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t//region Get PBKDF2 iterations count\r\n\t\t\t\tconst iterations = pbkdf2Params.iterationCount;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.deriveKey({\r\n\t\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: hmacHashAlgorithm\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsalt: saltView,\r\n\t\t\t\t\titerations\r\n\t\t\t\t},\r\n\t\t\t\tresult,\r\n\t\t\t\tkekAlgorithm,\r\n\t\t\t\ttrue,\r\n\t\t\t\t[\"unwrapKey\"]); // Usages are too specific for KEK algorithm\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t//region Unwrap previously exported session key\r\n\t\t\tcurrentSequence = currentSequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\t\treturn Promise.reject(`Incorrect \"contentEncryptionAlgorithm\": ${_this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\treturn crypto.unwrapKey(\"raw\",\r\n\t\t\t\t\t_this.recipientInfos[index].value.encryptedKey.valueBlock.valueHex,\r\n\t\t\t\t\tresult,\r\n\t\t\t\t\tkekAlgorithm,\r\n\t\t\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\t\t\ttrue,\r\n\t\t\t\t\t[\"decrypt\"]);\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(error)\r\n\t\t\t);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}\r\n\t\t\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Perform steps, specific to each type of session key encryption\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet currentSequence = Promise.resolve();\r\n\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\tswitch(this.recipientInfos[recipientIndex].variant)\r\n\t\t\t{\r\n\t\t\t\tcase 1: // KeyTransRecipientInfo\r\n\t\t\t\t\tcurrentSequence = SubKeyTransRecipientInfo(recipientIndex);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2: // KeyAgreeRecipientInfo\r\n\t\t\t\t\tcurrentSequence = SubKeyAgreeRecipientInfo(recipientIndex);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3: // KEKRecipientInfo\r\n\t\t\t\t\tcurrentSequence = SubKEKRecipientInfo(recipientIndex);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4: // PasswordRecipientinfo\r\n\t\t\t\t\tcurrentSequence = SubPasswordRecipientinfo(recipientIndex);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn Promise.reject(`Uknown recipient type in array with index ${recipientIndex}`);\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\treturn currentSequence;\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Finally decrypt data by session key\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Get WebCrypto form of content encryption algorithm\r\n\t\t\tconst contentEncryptionAlgorithm = getAlgorithmByOID(this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\t\treturn Promise.reject(`Incorrect \"contentEncryptionAlgorithm\": ${this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Get \"intialization vector\" for content encryption algorithm\r\n\t\t\tconst ivBuffer = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams.valueBlock.valueHex;\r\n\t\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Create correct data block for decryption\r\n\t\t\tlet dataBuffer = new ArrayBuffer(0);\r\n\t\t\t\t\r\n\t\t\tif(this.encryptedContentInfo.encryptedContent.idBlock.isConstructed === false)\r\n\t\t\t\tdataBuffer = this.encryptedContentInfo.encryptedContent.valueBlock.valueHex;\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tfor(const content of this.encryptedContentInfo.encryptedContent.valueBlock.value)\r\n\t\t\t\t\tdataBuffer = utilConcatBuf(dataBuffer, content.valueBlock.valueHex);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\treturn crypto.decrypt({\r\n\t\t\t\tname: contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tdataBuffer);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}